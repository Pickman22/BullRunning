
BullRunning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000076c  20000000  080082c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000344  2000076c  08008a34  0002076c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000ab0  08008a34  00020ab0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00015012  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000611ea  00000000  00000000  000357ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000089c3  00000000  00000000  00096998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000018e8  00000000  00000000  0009f360  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003b08  00000000  00000000  000a0c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000b735  00000000  00000000  000a4750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000afe85  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000463c  00000000  00000000  000aff04  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0001cd0f  00000000  00000000  000b4540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000076c 	.word	0x2000076c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ff0 	.word	0x08007ff0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000770 	.word	0x20000770
 80001c4:	08007ff0 	.word	0x08007ff0

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f002 fd59 	bl	8002ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f007 fecf 	bl	8007f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 f845 	bl	8000288 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000204:	080082c8 	.word	0x080082c8
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	2000076c 	.word	0x2000076c
	ldr	r2, =_sbss
 8000210:	2000076c 	.word	0x2000076c
	ldr	r3, = _ebss
 8000214:	20000ab0 	.word	0x20000ab0

08000218 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <BusFault_Handler>
	...

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	2100      	movs	r1, #0
{
 8000220:	b09d      	sub	sp, #116	; 0x74
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000222:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	a805      	add	r0, sp, #20
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	f007 feda 	bl	8007fe0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	4621      	mov	r1, r4
 800022e:	a80f      	add	r0, sp, #60	; 0x3c
 8000230:	2234      	movs	r2, #52	; 0x34
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	9401      	str	r4, [sp, #4]
 8000236:	9400      	str	r4, [sp, #0]
 8000238:	9402      	str	r4, [sp, #8]
 800023a:	9403      	str	r4, [sp, #12]
 800023c:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023e:	f007 fecf 	bl	8007fe0 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000248:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024e:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000252:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f003 fbd5 	bl	8003a08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000260:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	9200      	str	r2, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f003 fe9b 	bl	8003fac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027a:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800027c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800027e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000280:	f003 ffda 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000284:	b01d      	add	sp, #116	; 0x74
 8000286:	bd30      	pop	{r4, r5, pc}

08000288 <main>:
{
 8000288:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800028c:	b0a3      	sub	sp, #140	; 0x8c
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	2400      	movs	r4, #0
  HAL_Init();
 8000290:	f002 fd66 	bl	8002d60 <HAL_Init>
  SystemClock_Config();
 8000294:	f7ff ffc2 	bl	800021c <SystemClock_Config>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000298:	4aaf      	ldr	r2, [pc, #700]	; (8000558 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	9417      	str	r4, [sp, #92]	; 0x5c
 800029c:	9416      	str	r4, [sp, #88]	; 0x58
 800029e:	9418      	str	r4, [sp, #96]	; 0x60
 80002a0:	9419      	str	r4, [sp, #100]	; 0x64
 80002a2:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	6951      	ldr	r1, [r2, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	48ad      	ldr	r0, [pc, #692]	; (800055c <main+0x2d4>)
  hadc1.Instance = ADC1;
 80002a8:	4dad      	ldr	r5, [pc, #692]	; (8000560 <main+0x2d8>)
  hdac.Instance = DAC;
 80002aa:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 800057c <main+0x2f4>
  htim1.Instance = TIM1;
 80002ae:	4ead      	ldr	r6, [pc, #692]	; (8000564 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80002b4:	6151      	str	r1, [r2, #20]
 80002b6:	6951      	ldr	r1, [r2, #20]
 80002b8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80002bc:	9103      	str	r1, [sp, #12]
 80002be:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c0:	6951      	ldr	r1, [r2, #20]
 80002c2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80002c6:	6151      	str	r1, [r2, #20]
 80002c8:	6951      	ldr	r1, [r2, #20]
 80002ca:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80002ce:	9104      	str	r1, [sp, #16]
 80002d0:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	6951      	ldr	r1, [r2, #20]
 80002d4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80002d8:	6151      	str	r1, [r2, #20]
 80002da:	6951      	ldr	r1, [r2, #20]
 80002dc:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 80002e0:	9105      	str	r1, [sp, #20]
 80002e2:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	6951      	ldr	r1, [r2, #20]
 80002e6:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80002ea:	6151      	str	r1, [r2, #20]
 80002ec:	6952      	ldr	r2, [r2, #20]
 80002ee:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80002f2:	9206      	str	r2, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fa:	9f06      	ldr	r7, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002fc:	f003 fb7e 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000300:	4622      	mov	r2, r4
 8000302:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000306:	4898      	ldr	r0, [pc, #608]	; (8000568 <main+0x2e0>)
 8000308:	f003 fb78 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800030c:	4a97      	ldr	r2, [pc, #604]	; (800056c <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800030e:	4896      	ldr	r0, [pc, #600]	; (8000568 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000310:	9217      	str	r2, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000316:	a916      	add	r1, sp, #88	; 0x58

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800031a:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800031e:	f003 fa83 	bl	8003828 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000326:	a916      	add	r1, sp, #88	; 0x58
 8000328:	488c      	ldr	r0, [pc, #560]	; (800055c <main+0x2d4>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800032a:	9316      	str	r3, [sp, #88]	; 0x58

  /*Configure GPIO pins : M1_PWM_EN_U_Pin M1_PWM_EN_V_Pin M1_PWM_EN_W_Pin */
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800032c:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	9717      	str	r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800033a:	f003 fa75 	bl	8003828 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800033e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	a916      	add	r1, sp, #88	; 0x58
 8000344:	4888      	ldr	r0, [pc, #544]	; (8000568 <main+0x2e0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000346:	9216      	str	r2, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	9717      	str	r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800034a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034e:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000352:	f003 fa69 	bl	8003828 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000356:	4621      	mov	r1, r4
 8000358:	2230      	movs	r2, #48	; 0x30
 800035a:	a816      	add	r0, sp, #88	; 0x58
 800035c:	f007 fe40 	bl	8007fe0 <memset>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000360:	f04f 0a04 	mov.w	sl, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000364:	2320      	movs	r3, #32
  hadc1.Instance = ADC1;
 8000366:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800036a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036e:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000370:	e885 0006 	stmia.w	r5, {r1, r2}
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000374:	60eb      	str	r3, [r5, #12]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000378:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800037a:	61ec      	str	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037c:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037e:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	62ef      	str	r7, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 2;
 8000382:	f8c5 8020 	str.w	r8, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000386:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000388:	61ac      	str	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038a:	63af      	str	r7, [r5, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038c:	f8c5 a014 	str.w	sl, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000390:	940f      	str	r4, [sp, #60]	; 0x3c
 8000392:	9410      	str	r4, [sp, #64]	; 0x40
 8000394:	9411      	str	r4, [sp, #68]	; 0x44
 8000396:	9412      	str	r4, [sp, #72]	; 0x48
 8000398:	9413      	str	r4, [sp, #76]	; 0x4c
 800039a:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039c:	f002 fd04 	bl	8002da8 <HAL_ADC_Init>
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80003a0:	2240      	movs	r2, #64	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003a2:	a916      	add	r1, sp, #88	; 0x58
 80003a4:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80003a6:	9221      	str	r2, [sp, #132]	; 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80003a8:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80003aa:	9717      	str	r7, [sp, #92]	; 0x5c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80003ac:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedNbrOfConversion = 3;
 80003ae:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80003b2:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80003b6:	9420      	str	r4, [sp, #128]	; 0x80
  sConfigInjected.AutoInjectedConv = DISABLE;
 80003b8:	941e      	str	r4, [sp, #120]	; 0x78
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80003ba:	941d      	str	r4, [sp, #116]	; 0x74
  sConfigInjected.QueueInjectedContext = ENABLE;
 80003bc:	971f      	str	r7, [sp, #124]	; 0x7c
  sConfigInjected.InjectedOffset = 0;
 80003be:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80003c0:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003c2:	f002 ff99 	bl	80032f8 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80003c6:	2307      	movs	r3, #7
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003c8:	a916      	add	r1, sp, #88	; 0x58
 80003ca:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80003cc:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80003ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003d2:	f002 ff91 	bl	80032f8 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80003d6:	2306      	movs	r3, #6
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003d8:	a916      	add	r1, sp, #88	; 0x58
 80003da:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80003dc:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80003de:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003e2:	f002 ff89 	bl	80032f8 <HAL_ADCEx_InjectedConfigChannel>
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80003e6:	2205      	movs	r2, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e8:	a90f      	add	r1, sp, #60	; 0x3c
 80003ea:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80003ec:	9211      	str	r2, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_2;
 80003ee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f2:	9710      	str	r7, [sp, #64]	; 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f4:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f6:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 80003f8:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	f002 fdf1 	bl	8002fe0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 80003fe:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000400:	a90f      	add	r1, sp, #60	; 0x3c
 8000402:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 8000404:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000406:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	f002 fde9 	bl	8002fe0 <HAL_ADC_ConfigChannel>
  hdac.Instance = DAC;
 800040e:	4a58      	ldr	r2, [pc, #352]	; (8000570 <main+0x2e8>)
 8000410:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000414:	4658      	mov	r0, fp
  DAC_ChannelConfTypeDef sConfig = {0};
 8000416:	9416      	str	r4, [sp, #88]	; 0x58
 8000418:	9417      	str	r4, [sp, #92]	; 0x5c
 800041a:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800041c:	f003 f9ca 	bl	80037b4 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000420:	233c      	movs	r3, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000422:	4622      	mov	r2, r4
 8000424:	a916      	add	r1, sp, #88	; 0x58
 8000426:	4658      	mov	r0, fp
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000428:	9316      	str	r3, [sp, #88]	; 0x58
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800042a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800042e:	f003 f9d7 	bl	80037e0 <HAL_DAC_ConfigChannel>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000432:	4621      	mov	r1, r4
 8000434:	222c      	movs	r2, #44	; 0x2c
 8000436:	a816      	add	r0, sp, #88	; 0x58
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000438:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043a:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043c:	940f      	str	r4, [sp, #60]	; 0x3c
 800043e:	9410      	str	r4, [sp, #64]	; 0x40
 8000440:	9411      	str	r4, [sp, #68]	; 0x44
 8000442:	9412      	str	r4, [sp, #72]	; 0x48
 8000444:	9413      	str	r4, [sp, #76]	; 0x4c
 8000446:	9414      	str	r4, [sp, #80]	; 0x50
 8000448:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800044a:	940b      	str	r4, [sp, #44]	; 0x2c
 800044c:	940c      	str	r4, [sp, #48]	; 0x30
 800044e:	940d      	str	r4, [sp, #52]	; 0x34
 8000450:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000452:	9408      	str	r4, [sp, #32]
 8000454:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000456:	f007 fdc3 	bl	8007fe0 <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800045a:	2220      	movs	r2, #32
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800045c:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Instance = TIM1;
 8000460:	4944      	ldr	r1, [pc, #272]	; (8000574 <main+0x2ec>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000462:	60b2      	str	r2, [r6, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000464:	4630      	mov	r0, r6
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000466:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
  htim1.Instance = TIM1;
 800046a:	6031      	str	r1, [r6, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800046c:	60f2      	str	r2, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800046e:	6133      	str	r3, [r6, #16]
 8000470:	9301      	str	r3, [sp, #4]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000472:	6074      	str	r4, [r6, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000474:	6177      	str	r7, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000476:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000478:	f003 ffde 	bl	8004438 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800047c:	4630      	mov	r0, r6
 800047e:	f004 f83f 	bl	8004500 <HAL_TIM_PWM_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000482:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000484:	2210      	movs	r2, #16
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8000486:	a90a      	add	r1, sp, #40	; 0x28
 8000488:	4630      	mov	r0, r6
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800048a:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800048c:	920b      	str	r2, [sp, #44]	; 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800048e:	2570      	movs	r5, #112	; 0x70
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8000490:	f004 f898 	bl	80045c4 <HAL_TIM_SlaveConfigSynchronization>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000494:	a907      	add	r1, sp, #28
 8000496:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000498:	9507      	str	r5, [sp, #28]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800049a:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049e:	f004 fadb 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a2:	f04f 0c60 	mov.w	ip, #96	; 0x60
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80004a6:	f44f 7e16 	mov.w	lr, #600	; 0x258
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004aa:	4622      	mov	r2, r4
 80004ac:	a90f      	add	r1, sp, #60	; 0x3c
 80004ae:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80004b4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b8:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ba:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004bc:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004be:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004c0:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c2:	f004 f9db 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c6:	4652      	mov	r2, sl
 80004c8:	a90f      	add	r1, sp, #60	; 0x3c
 80004ca:	4630      	mov	r0, r6
 80004cc:	f004 f9d6 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004d0:	2208      	movs	r2, #8
 80004d2:	a90f      	add	r1, sp, #60	; 0x3c
 80004d4:	4630      	mov	r0, r6
 80004d6:	f004 f9d1 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80004da:	f44f 6e88 	mov.w	lr, #1088	; 0x440
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004de:	a90f      	add	r1, sp, #60	; 0x3c
 80004e0:	220c      	movs	r2, #12
 80004e2:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80004e4:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80004e6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004ea:	f004 f9c7 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f2:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80004f4:	9b01      	ldr	r3, [sp, #4]
 80004f6:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80004f8:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80004fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  sBreakDeadTimeConfig.Break2Filter = 7;
 8000500:	2307      	movs	r3, #7
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000502:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000504:	f44f 6580 	mov.w	r5, #1024	; 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000508:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800050a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 7;
 800050e:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000510:	921d      	str	r2, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000512:	9517      	str	r5, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8000514:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000516:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000518:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 800051a:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051c:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051e:	f004 fac1 	bl	8004aa4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000522:	4630      	mov	r0, r6
 8000524:	f001 fd98 	bl	8002058 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <main+0x2f0>)
  huart2.Init.BaudRate = 115200;
 800052a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052e:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000530:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000532:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  huart2.Init.BaudRate = 115200;
 8000536:	6059      	str	r1, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	609c      	str	r4, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800053c:	60dc      	str	r4, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053e:	611c      	str	r4, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000540:	619c      	str	r4, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000542:	61dc      	str	r4, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000544:	621c      	str	r4, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000546:	625c      	str	r4, [r3, #36]	; 0x24
  huart2.Instance = USART2;
 8000548:	601d      	str	r5, [r3, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	f004 fb43 	bl	8004bd4 <HAL_UART_Init>
  MX_MotorControl_Init();
 800054e:	f001 fa6f 	bl	8001a30 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000552:	463a      	mov	r2, r7
 8000554:	4651      	mov	r1, sl
 8000556:	e013      	b.n	8000580 <main+0x2f8>
 8000558:	40021000 	.word	0x40021000
 800055c:	48000400 	.word	0x48000400
 8000560:	200007a4 	.word	0x200007a4
 8000564:	2000080c 	.word	0x2000080c
 8000568:	48000800 	.word	0x48000800
 800056c:	10210000 	.word	0x10210000
 8000570:	40007400 	.word	0x40007400
 8000574:	40012c00 	.word	0x40012c00
 8000578:	2000084c 	.word	0x2000084c
 800057c:	200007f8 	.word	0x200007f8
 8000580:	2018      	movs	r0, #24
 8000582:	f003 f8b5 	bl	80036f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000586:	2018      	movs	r0, #24
 8000588:	f003 f8e8 	bl	800375c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 800058c:	4622      	mov	r2, r4
 800058e:	4641      	mov	r1, r8
 8000590:	2012      	movs	r0, #18
 8000592:	f003 f8ad 	bl	80036f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000596:	2012      	movs	r0, #18
 8000598:	f003 f8e0 	bl	800375c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800059c:	463a      	mov	r2, r7
 800059e:	4649      	mov	r1, r9
 80005a0:	2026      	movs	r0, #38	; 0x26
 80005a2:	f003 f8a5 	bl	80036f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005a6:	2026      	movs	r0, #38	; 0x26
 80005a8:	f003 f8d8 	bl	800375c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	4622      	mov	r2, r4
 80005b0:	4621      	mov	r1, r4
 80005b2:	f003 f89d 	bl	80036f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b6:	2028      	movs	r0, #40	; 0x28
 80005b8:	f003 f8d0 	bl	800375c <HAL_NVIC_EnableIRQ>
 80005bc:	e7fe      	b.n	80005bc <main+0x334>
 80005be:	bf00      	nop

080005c0 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <MC_StartMotor1+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	f004 bd16 	b.w	8004ff4 <MCI_StartMotor>
 80005c8:	2000099c 	.word	0x2000099c

080005cc <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <MC_StopMotor1+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	f004 bd1a 	b.w	8005008 <MCI_StopMotor>
 80005d4:	2000099c 	.word	0x2000099c

080005d8 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80005d8:	4b01      	ldr	r3, [pc, #4]	; (80005e0 <MC_GetSTMStateMotor1+0x8>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f004 bd5c 	b.w	8005098 <MCI_GetSTMState>
 80005e0:	2000099c 	.word	0x2000099c

080005e4 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 80005e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pFF[M1] = &FF_M1; /* only if M1 has FF */

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80005e8:	4b7c      	ldr	r3, [pc, #496]	; (80007dc <MCboot+0x1f8>)
 80005ea:	4d7d      	ldr	r5, [pc, #500]	; (80007e0 <MCboot+0x1fc>)
  pFF[M1] = &FF_M1; /* only if M1 has FF */
 80005ec:	f8df b258 	ldr.w	fp, [pc, #600]	; 8000848 <MCboot+0x264>
  pCLM[M1] = &CircleLimitationM1;
 80005f0:	4c7c      	ldr	r4, [pc, #496]	; (80007e4 <MCboot+0x200>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80005f2:	602b      	str	r3, [r5, #0]
{
 80005f4:	b08b      	sub	sp, #44	; 0x2c
  bMCBootCompleted = 0;
 80005f6:	f04f 0800 	mov.w	r8, #0
{
 80005fa:	9003      	str	r0, [sp, #12]
  R3_1_F30X_Init(&PWM_Handle_M1);
 80005fc:	4618      	mov	r0, r3
  bMCBootCompleted = 0;
 80005fe:	4b7a      	ldr	r3, [pc, #488]	; (80007e8 <MCboot+0x204>)
  pFF[M1] = &FF_M1; /* only if M1 has FF */
 8000600:	4a7a      	ldr	r2, [pc, #488]	; (80007ec <MCboot+0x208>)
  pCLM[M1] = &CircleLimitationM1;
 8000602:	4e7b      	ldr	r6, [pc, #492]	; (80007f0 <MCboot+0x20c>)
{
 8000604:	9104      	str	r1, [sp, #16]
  bMCBootCompleted = 0;
 8000606:	f883 8000 	strb.w	r8, [r3]
  pFF[M1] = &FF_M1; /* only if M1 has FF */
 800060a:	f8cb 2000 	str.w	r2, [fp]
  pCLM[M1] = &CircleLimitationM1;
 800060e:	6026      	str	r6, [r4, #0]
  R3_1_F30X_Init(&PWM_Handle_M1);
 8000610:	f005 fe92 	bl	8006338 <R3_1_F30X_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();    
 8000614:	f005 f81c 	bl	8005650 <startTimers>

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 8000618:	4876      	ldr	r0, [pc, #472]	; (80007f4 <MCboot+0x210>)
  
  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
  pSTC[M1] = &SpeednTorqCtrlM1;
 800061a:	4c77      	ldr	r4, [pc, #476]	; (80007f8 <MCboot+0x214>)
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);  
      
  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 800061c:	f8df a22c 	ldr.w	sl, [pc, #556]	; 800084c <MCboot+0x268>
  PID_HandleInit(&PIDIdHandle_M1);
 8000620:	4f76      	ldr	r7, [pc, #472]	; (80007fc <MCboot+0x218>)
  pPIDId[M1] = &PIDIdHandle_M1;
  
  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000622:	4e77      	ldr	r6, [pc, #476]	; (8000800 <MCboot+0x21c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
  
  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);    
 8000624:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8000850 <MCboot+0x26c>
  STM_Init(&STM[M1]);
 8000628:	f006 fca0 	bl	8006f6c <STM_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800062c:	4875      	ldr	r0, [pc, #468]	; (8000804 <MCboot+0x220>)
 800062e:	f004 ff77 	bl	8005520 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000632:	4a75      	ldr	r2, [pc, #468]	; (8000808 <MCboot+0x224>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000634:	4b75      	ldr	r3, [pc, #468]	; (800080c <MCboot+0x228>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000636:	4973      	ldr	r1, [pc, #460]	; (8000804 <MCboot+0x220>)
  STO_PLL_Init (&STO_PLL_M1);
 8000638:	4875      	ldr	r0, [pc, #468]	; (8000810 <MCboot+0x22c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800063a:	6011      	str	r1, [r2, #0]
  pSTC[M1] = &SpeednTorqCtrlM1;
 800063c:	6023      	str	r3, [r4, #0]
  STO_PLL_Init (&STO_PLL_M1);
 800063e:	f007 f8a5 	bl	800778c <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000642:	4b71      	ldr	r3, [pc, #452]	; (8000808 <MCboot+0x224>)
 8000644:	4a72      	ldr	r2, [pc, #456]	; (8000810 <MCboot+0x22c>)
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	6820      	ldr	r0, [r4, #0]
 800064a:	f006 fbbf 	bl	8006dcc <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800064e:	4871      	ldr	r0, [pc, #452]	; (8000814 <MCboot+0x230>)
 8000650:	f006 fea6 	bl	80073a0 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);  
 8000654:	682b      	ldr	r3, [r5, #0]
 8000656:	6821      	ldr	r1, [r4, #0]
 8000658:	4a6e      	ldr	r2, [pc, #440]	; (8000814 <MCboot+0x230>)
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	486e      	ldr	r0, [pc, #440]	; (8000818 <MCboot+0x234>)
 800065e:	4b6f      	ldr	r3, [pc, #444]	; (800081c <MCboot+0x238>)
 8000660:	f007 fba6 	bl	8007db0 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000664:	4650      	mov	r0, sl
 8000666:	f004 ff5b 	bl	8005520 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 800066a:	4638      	mov	r0, r7
 800066c:	f004 ff58 	bl	8005520 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000670:	4a6b      	ldr	r2, [pc, #428]	; (8000820 <MCboot+0x23c>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000672:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <MCboot+0x240>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000674:	f8c2 a000 	str.w	sl, [r2]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000678:	4a6b      	ldr	r2, [pc, #428]	; (8000828 <MCboot+0x244>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800067a:	6033      	str	r3, [r6, #0]
  RVBS_Init(pBusSensorM1);
 800067c:	4618      	mov	r0, r3
  pPIDId[M1] = &PIDIdHandle_M1;
 800067e:	6017      	str	r7, [r2, #0]
  RVBS_Init(pBusSensorM1);
 8000680:	f006 fa22 	bl	8006ac8 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000684:	4b69      	ldr	r3, [pc, #420]	; (800082c <MCboot+0x248>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000686:	6832      	ldr	r2, [r6, #0]
 8000688:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800068c:	4a68      	ldr	r2, [pc, #416]	; (8000830 <MCboot+0x24c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800068e:	4f69      	ldr	r7, [pc, #420]	; (8000834 <MCboot+0x250>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000690:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);    
 8000692:	4648      	mov	r0, r9
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000694:	f8c3 710c 	str.w	r7, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);    
 8000698:	f004 fef2 	bl	8005480 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
    
  /*******************************************************/
  /*   Feed forward component initialization             */
  /*******************************************************/
  FF_Init(pFF[M1],&(pBusSensorM1->_Super),pPIDId[M1],pPIDIq[M1]);  
 800069c:	4b60      	ldr	r3, [pc, #384]	; (8000820 <MCboot+0x23c>)
 800069e:	4a62      	ldr	r2, [pc, #392]	; (8000828 <MCboot+0x244>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80006a0:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8000854 <MCboot+0x270>
  FF_Init(pFF[M1],&(pBusSensorM1->_Super),pPIDId[M1],pPIDIq[M1]);  
 80006a4:	6831      	ldr	r1, [r6, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6812      	ldr	r2, [r2, #0]
 80006aa:	f8db 0000 	ldr.w	r0, [fp]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80006ae:	f8ca 9000 	str.w	r9, [sl]
  FF_Init(pFF[M1],&(pBusSensorM1->_Super),pPIDId[M1],pPIDIq[M1]);  
 80006b2:	f006 ff87 	bl	80075c4 <FF_Init>
  

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MCboot+0x254>)
 80006b8:	4a60      	ldr	r2, [pc, #384]	; (800083c <MCboot+0x258>)
  REMNG_Init(pREMNG[M1]);
 80006ba:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80006bc:	6013      	str	r3, [r2, #0]
  REMNG_Init(pREMNG[M1]);
 80006be:	f006 fa8d 	bl	8006bdc <REMNG_Init>
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = Vnull;
  FOCVars[bMotor].Valphabeta = Vnull;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80006c2:	4b57      	ldr	r3, [pc, #348]	; (8000820 <MCboot+0x23c>)
  FOCVars[bMotor].Iab = Inull;
 80006c4:	f8c7 8000 	str.w	r8, [r7]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80006c8:	6818      	ldr	r0, [r3, #0]
  FOCVars[bMotor].Iab = Inull;
 80006ca:	f8c7 8004 	str.w	r8, [r7, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80006ce:	4641      	mov	r1, r8
  FOCVars[bMotor].Iqd = Inull;
 80006d0:	f8c7 800c 	str.w	r8, [r7, #12]
 80006d4:	f8c7 8010 	str.w	r8, [r7, #16]
  FOCVars[bMotor].Vqd = Vnull;
 80006d8:	f8c7 8016 	str.w	r8, [r7, #22]
 80006dc:	f8c7 801a 	str.w	r8, [r7, #26]
 80006e0:	f8c7 801e 	str.w	r8, [r7, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80006e4:	f004 ff30 	bl	8005548 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <MCboot+0x244>)
 80006ea:	4641      	mov	r1, r8
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	f004 ff2b 	bl	8005548 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80006f2:	6820      	ldr	r0, [r4, #0]
 80006f4:	f006 fb82 	bl	8006dfc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80006f8:	6828      	ldr	r0, [r5, #0]
 80006fa:	f005 f8e3 	bl	80058c4 <PWMC_SwitchOffPWM>

  if (pFF[bMotor])
 80006fe:	f8db 0000 	ldr.w	r0, [fp]
 8000702:	b108      	cbz	r0, 8000708 <MCboot+0x124>
  {
    FF_Clear(pFF[bMotor]);
 8000704:	f006 ff6a 	bl	80075dc <FF_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000708:	f04f 0901 	mov.w	r9, #1
 800070c:	f887 9024 	strb.w	r9, [r7, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000710:	6820      	ldr	r0, [r4, #0]
  oMCInterface[M1] = & Mci[M1];
 8000712:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000858 <MCboot+0x274>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000716:	f006 fc15 	bl	8006f44 <STC_GetDefaultIqdref>
 800071a:	4603      	mov	r3, r0
 800071c:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000720:	823b      	strh	r3, [r7, #16]
 8000722:	827a      	strh	r2, [r7, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).qI_Component2;
 8000724:	6820      	ldr	r0, [r4, #0]
 8000726:	f006 fc0d 	bl	8006f44 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 800072a:	4945      	ldr	r1, [pc, #276]	; (8000840 <MCboot+0x25c>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 800072c:	4b41      	ldr	r3, [pc, #260]	; (8000834 <MCboot+0x250>)
 800072e:	6822      	ldr	r2, [r4, #0]
  oMCInterface[M1] = & Mci[M1];
 8000730:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).qI_Component2;
 8000734:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 8000738:	f8a7 e014 	strh.w	lr, [r7, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 800073c:	4608      	mov	r0, r1
 800073e:	492d      	ldr	r1, [pc, #180]	; (80007f4 <MCboot+0x210>)
 8000740:	f004 fc2a 	bl	8004f98 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000744:	6820      	ldr	r0, [r4, #0]
 8000746:	f8d8 7000 	ldr.w	r7, [r8]
 800074a:	f006 fbe9 	bl	8006f20 <STC_GetMecSpeedRef01HzDefault>
 800074e:	2200      	movs	r2, #0
 8000750:	4601      	mov	r1, r0
 8000752:	4638      	mov	r0, r7
 8000754:	f004 fc2c 	bl	8004fb0 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDId = pPIDId[M1];
 8000758:	4f33      	ldr	r7, [pc, #204]	; (8000828 <MCboot+0x244>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800075a:	492b      	ldr	r1, [pc, #172]	; (8000808 <MCboot+0x224>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800075c:	f8d4 c000 	ldr.w	ip, [r4]
  pMCIList[M1] = oMCInterface[M1];
 8000760:	f8d8 2000 	ldr.w	r2, [r8]
 8000764:	9c03      	ldr	r4, [sp, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000766:	f8d5 8000 	ldr.w	r8, [r5]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800076a:	482d      	ldr	r0, [pc, #180]	; (8000820 <MCboot+0x23c>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800076c:	4d30      	ldr	r5, [pc, #192]	; (8000830 <MCboot+0x24c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MCboot+0x260>)
 8000770:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000772:	683f      	ldr	r7, [r7, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000774:	9105      	str	r1, [sp, #20]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000776:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000778:	9707      	str	r7, [sp, #28]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800077a:	f8da e000 	ldr.w	lr, [sl]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800077e:	6837      	ldr	r7, [r6, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000780:	682e      	ldr	r6, [r5, #0]
  MCT[M1].pFF = pFF[M1];
 8000782:	f8db 5000 	ldr.w	r5, [fp]
  pMCIList[M1] = oMCInterface[M1];
 8000786:	6022      	str	r2, [r4, #0]
  MCT[M1].pStateMachine = &STM[M1];
 8000788:	4c1a      	ldr	r4, [pc, #104]	; (80007f4 <MCboot+0x210>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 800078a:	9006      	str	r0, [sp, #24]
  MCT[M1].pStateMachine = &STM[M1];
 800078c:	629c      	str	r4, [r3, #40]	; 0x28
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800078e:	9c05      	ldr	r4, [sp, #20]
 8000790:	601c      	str	r4, [r3, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000792:	9c06      	ldr	r4, [sp, #24]
 8000794:	605c      	str	r4, [r3, #4]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000796:	2200      	movs	r2, #0
  MCT[M1].pPIDId = pPIDId[M1];
 8000798:	9c07      	ldr	r4, [sp, #28]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 800079a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8000818 <MCboot+0x234>
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1; 
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <MCboot+0x22c>)
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80007a0:	491c      	ldr	r1, [pc, #112]	; (8000814 <MCboot+0x230>)
  MCT[M1].pPIDId = pPIDId[M1];
 80007a2:	609c      	str	r4, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80007a4:	f8c3 8010 	str.w	r8, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80007a8:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80007ac:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80007b0:	631f      	str	r7, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80007b2:	63de      	str	r6, [r3, #60]	; 0x3c
  MCT[M1].pFF = pFF[M1];
 80007b4:	645d      	str	r5, [r3, #68]	; 0x44
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 80007b6:	f8c3 b014 	str.w	fp, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1; 
 80007ba:	6198      	str	r0, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80007bc:	6219      	str	r1, [r3, #32]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80007be:	60da      	str	r2, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80007c0:	61da      	str	r2, [r3, #28]
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80007c4:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pFW = MC_NULL;
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 80007c8:	649a      	str	r2, [r3, #72]	; 0x48
  MCT[M1].pOTT = MC_NULL;
 80007ca:	64da      	str	r2, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 80007cc:	9a04      	ldr	r2, [sp, #16]
 80007ce:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <MCboot+0x204>)
 80007d2:	f883 9000 	strb.w	r9, [r3]
}
 80007d6:	b00b      	add	sp, #44	; 0x2c
 80007d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007dc:	200002c0 	.word	0x200002c0
 80007e0:	200008d4 	.word	0x200008d4
 80007e4:	20000960 	.word	0x20000960
 80007e8:	20000788 	.word	0x20000788
 80007ec:	200000f0 	.word	0x200000f0
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000984 	.word	0x20000984
 80007f8:	20000998 	.word	0x20000998
 80007fc:	20000128 	.word	0x20000128
 8000800:	20000964 	.word	0x20000964
 8000804:	20000180 	.word	0x20000180
 8000808:	200008d8 	.word	0x200008d8
 800080c:	20000560 	.word	0x20000560
 8000810:	20000440 	.word	0x20000440
 8000814:	200005ec 	.word	0x200005ec
 8000818:	200003b4 	.word	0x200003b4
 800081c:	2000042c 	.word	0x2000042c
 8000820:	200008dc 	.word	0x200008dc
 8000824:	2000038c 	.word	0x2000038c
 8000828:	20000994 	.word	0x20000994
 800082c:	200001ac 	.word	0x200001ac
 8000830:	20000990 	.word	0x20000990
 8000834:	200008e8 	.word	0x200008e8
 8000838:	20000374 	.word	0x20000374
 800083c:	2000098c 	.word	0x2000098c
 8000840:	20000968 	.word	0x20000968
 8000844:	20000910 	.word	0x20000910
 8000848:	200008cc 	.word	0x200008cc
 800084c:	20000154 	.word	0x20000154
 8000850:	20000594 	.word	0x20000594
 8000854:	200008d0 	.word	0x200008d0
 8000858:	200008e0 	.word	0x200008e0

0800085c <MC_RunMotorControlTasks>:
{
 800085c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( bMCBootCompleted ) {
 8000860:	4c9b      	ldr	r4, [pc, #620]	; (8000ad0 <MC_RunMotorControlTasks+0x274>)
 8000862:	7823      	ldrb	r3, [r4, #0]
{
 8000864:	b083      	sub	sp, #12
  if ( bMCBootCompleted ) {
 8000866:	b913      	cbnz	r3, 800086e <MC_RunMotorControlTasks+0x12>
}
 8000868:	b003      	add	sp, #12
 800086a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (bMCBootCompleted == 1)
 800086e:	2b01      	cmp	r3, #1
 8000870:	d004      	beq.n	800087c <MC_RunMotorControlTasks+0x20>
    UI_Scheduler();
 8000872:	f001 fcc3 	bl	80021fc <UI_Scheduler>
}
 8000876:	b003      	add	sp, #12
 8000878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(hMFTaskCounterM1 > 0u)
 800087c:	4e95      	ldr	r6, [pc, #596]	; (8000ad4 <MC_RunMotorControlTasks+0x278>)
 800087e:	8832      	ldrh	r2, [r6, #0]
 8000880:	b292      	uxth	r2, r2
 8000882:	2a00      	cmp	r2, #0
 8000884:	d065      	beq.n	8000952 <MC_RunMotorControlTasks+0xf6>
      hMFTaskCounterM1--;
 8000886:	8832      	ldrh	r2, [r6, #0]
 8000888:	4f93      	ldr	r7, [pc, #588]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 800088a:	4d94      	ldr	r5, [pc, #592]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 800088c:	3a01      	subs	r2, #1
 800088e:	b292      	uxth	r2, r2
 8000890:	8032      	strh	r2, [r6, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8000892:	883a      	ldrh	r2, [r7, #0]
 8000894:	b292      	uxth	r2, r2
 8000896:	b11a      	cbz	r2, 80008a0 <MC_RunMotorControlTasks+0x44>
      hBootCapDelayCounterM1--;
 8000898:	883a      	ldrh	r2, [r7, #0]
 800089a:	3a01      	subs	r2, #1
 800089c:	b292      	uxth	r2, r2
 800089e:	803a      	strh	r2, [r7, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80008a0:	882a      	ldrh	r2, [r5, #0]
 80008a2:	b292      	uxth	r2, r2
 80008a4:	b11a      	cbz	r2, 80008ae <MC_RunMotorControlTasks+0x52>
      hStopPermanencyCounterM1--;
 80008a6:	882a      	ldrh	r2, [r5, #0]
 80008a8:	3a01      	subs	r2, #1
 80008aa:	b292      	uxth	r2, r2
 80008ac:	802a      	strh	r2, [r5, #0]
void TSK_SafetyTask(void)
{
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d1df      	bne.n	8000872 <MC_RunMotorControlTasks+0x16>
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80008b2:	4b8b      	ldr	r3, [pc, #556]	; (8000ae0 <MC_RunMotorControlTasks+0x284>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80008b4:	4d8b      	ldr	r5, [pc, #556]	; (8000ae4 <MC_RunMotorControlTasks+0x288>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	f004 fdf2 	bl	80054a0 <NTC_CalcAvTemp>
 80008bc:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80008be:	6828      	ldr	r0, [r5, #0]
 80008c0:	f005 f82a 	bl	8005918 <PWMC_CheckOverCurrent>
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 80008c4:	4b88      	ldr	r3, [pc, #544]	; (8000ae8 <MC_RunMotorControlTasks+0x28c>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80008c6:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80008ca:	4304      	orrs	r4, r0
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	f006 f919 	bl	8006b04 <RVBS_CalcAvVbusFilt>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80008d2:	b2a4      	uxth	r4, r4
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 80008d4:	f000 010e 	and.w	r1, r0, #14
 80008d8:	4321      	orrs	r1, r4
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80008da:	43ca      	mvns	r2, r1
 80008dc:	b292      	uxth	r2, r2
 80008de:	4883      	ldr	r0, [pc, #524]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 80008e0:	f006 fbd0 	bl	8007084 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80008e4:	4881      	ldr	r0, [pc, #516]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 80008e6:	f006 fbe7 	bl	80070b8 <STM_GetState>
 80008ea:	280a      	cmp	r0, #10
 80008ec:	d007      	beq.n	80008fe <MC_RunMotorControlTasks+0xa2>
 80008ee:	280b      	cmp	r0, #11
 80008f0:	d102      	bne.n	80008f8 <MC_RunMotorControlTasks+0x9c>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80008f2:	6828      	ldr	r0, [r5, #0]
 80008f4:	f004 ffe6 	bl	80058c4 <PWMC_SwitchOffPWM>
    RCM_ExecUserConv ();
 80008f8:	f001 f9c2 	bl	8001c80 <RCM_ExecUserConv>
 80008fc:	e7b9      	b.n	8000872 <MC_RunMotorControlTasks+0x16>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80008fe:	6828      	ldr	r0, [r5, #0]
 8000900:	f004 ffe0 	bl	80058c4 <PWMC_SwitchOffPWM>
  FOCVars[bMotor].Iab = Inull;
 8000904:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <MC_RunMotorControlTasks+0x294>)
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000906:	4a7b      	ldr	r2, [pc, #492]	; (8000af4 <MC_RunMotorControlTasks+0x298>)
  FOCVars[bMotor].Iab = Inull;
 8000908:	2400      	movs	r4, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800090a:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Iab = Inull;
 800090c:	601c      	str	r4, [r3, #0]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800090e:	4621      	mov	r1, r4
  FOCVars[bMotor].Iab = Inull;
 8000910:	605c      	str	r4, [r3, #4]
  FOCVars[bMotor].Iqd = Inull;
 8000912:	60dc      	str	r4, [r3, #12]
 8000914:	611c      	str	r4, [r3, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000916:	f8c3 4016 	str.w	r4, [r3, #22]
 800091a:	f8c3 401a 	str.w	r4, [r3, #26]
 800091e:	f8c3 401e 	str.w	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000922:	f004 fe11 	bl	8005548 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000926:	4b74      	ldr	r3, [pc, #464]	; (8000af8 <MC_RunMotorControlTasks+0x29c>)
 8000928:	4621      	mov	r1, r4
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f004 fe0c 	bl	8005548 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 8000930:	4b72      	ldr	r3, [pc, #456]	; (8000afc <MC_RunMotorControlTasks+0x2a0>)
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	f006 fa62 	bl	8006dfc <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000938:	6828      	ldr	r0, [r5, #0]
 800093a:	f004 ffc3 	bl	80058c4 <PWMC_SwitchOffPWM>
  if (pFF[bMotor])
 800093e:	4b70      	ldr	r3, [pc, #448]	; (8000b00 <MC_RunMotorControlTasks+0x2a4>)
 8000940:	6818      	ldr	r0, [r3, #0]
 8000942:	b108      	cbz	r0, 8000948 <MC_RunMotorControlTasks+0xec>
    FF_Clear(pFF[bMotor]);
 8000944:	f006 fe4a 	bl	80075dc <FF_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8000948:	4b6e      	ldr	r3, [pc, #440]	; (8000b04 <MC_RunMotorControlTasks+0x2a8>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f004 fd68 	bl	8005420 <MPM_Clear>
 8000950:	e7d2      	b.n	80008f8 <MC_RunMotorControlTasks+0x9c>
  int16_t wAux = 0;
 8000952:	a902      	add	r1, sp, #8
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000954:	486c      	ldr	r0, [pc, #432]	; (8000b08 <MC_RunMotorControlTasks+0x2ac>)
  int16_t wAux = 0;
 8000956:	f821 2d08 	strh.w	r2, [r1, #-8]!
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 800095a:	f007 f861 	bl	8007a20 <STO_PLL_CalcAvrgMecSpeed01Hz>
  PQD_CalcElMotorPower( pMPM[M1] );
 800095e:	4d69      	ldr	r5, [pc, #420]	; (8000b04 <MC_RunMotorControlTasks+0x2a8>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000960:	4607      	mov	r7, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000962:	6828      	ldr	r0, [r5, #0]
 8000964:	f004 fe3e 	bl	80055e4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000968:	4860      	ldr	r0, [pc, #384]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 800096a:	f006 fba5 	bl	80070b8 <STM_GetState>
  switch ( StateM1 )
 800096e:	3803      	subs	r0, #3
 8000970:	2810      	cmp	r0, #16
 8000972:	d840      	bhi.n	80009f6 <MC_RunMotorControlTasks+0x19a>
 8000974:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000978:	00fe00f1 	.word	0x00fe00f1
 800097c:	014200d0 	.word	0x014200d0
 8000980:	006e0076 	.word	0x006e0076
 8000984:	003f005f 	.word	0x003f005f
 8000988:	003f003f 	.word	0x003f003f
 800098c:	003f003f 	.word	0x003f003f
 8000990:	0050003f 	.word	0x0050003f
 8000994:	00220042 	.word	0x00220042
 8000998:	0011      	.short	0x0011
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800099a:	485c      	ldr	r0, [pc, #368]	; (8000b0c <MC_RunMotorControlTasks+0x2b0>)
 800099c:	f007 fa8e 	bl	8007ebc <RUC_Exec>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	f040 8151 	bne.w	8000c48 <MC_RunMotorControlTasks+0x3ec>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 80009a6:	4602      	mov	r2, r0
 80009a8:	2110      	movs	r1, #16
 80009aa:	4850      	ldr	r0, [pc, #320]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 80009ac:	4f4a      	ldr	r7, [pc, #296]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 80009ae:	4d4b      	ldr	r5, [pc, #300]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 80009b0:	f006 fb68 	bl	8007084 <STM_FaultProcessing>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80009b4:	2201      	movs	r2, #1
 80009b6:	7823      	ldrb	r3, [r4, #0]
 80009b8:	8032      	strh	r2, [r6, #0]
 80009ba:	e76a      	b.n	8000892 <MC_RunMotorControlTasks+0x36>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80009bc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8000afc <MC_RunMotorControlTasks+0x2a0>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80009c0:	4d4b      	ldr	r5, [pc, #300]	; (8000af0 <MC_RunMotorControlTasks+0x294>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80009c2:	4953      	ldr	r1, [pc, #332]	; (8000b10 <MC_RunMotorControlTasks+0x2b4>)
 80009c4:	f8d8 0000 	ldr.w	r0, [r8]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80009ce:	f006 fa11 	bl	8006df4 <STC_SetSpeedSensor>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80009d2:	4b50      	ldr	r3, [pc, #320]	; (8000b14 <MC_RunMotorControlTasks+0x2b8>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f004 fb65 	bl	80050a4 <MCI_GetImposedMotorDirection>
 80009da:	4601      	mov	r1, r0
 80009dc:	484b      	ldr	r0, [pc, #300]	; (8000b0c <MC_RunMotorControlTasks+0x2b0>)
 80009de:	f007 fa25 	bl	8007e2c <RUC_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 80009e2:	4849      	ldr	r0, [pc, #292]	; (8000b08 <MC_RunMotorControlTasks+0x2ac>)
 80009e4:	f007 f8f4 	bl	8007bd0 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80009e8:	2104      	movs	r1, #4
 80009ea:	4840      	ldr	r0, [pc, #256]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 80009ec:	f006 fac4 	bl	8006f78 <STM_NextState>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	f040 816b 	bne.w	8000ccc <MC_RunMotorControlTasks+0x470>
 80009f6:	4f38      	ldr	r7, [pc, #224]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 80009f8:	4d38      	ldr	r5, [pc, #224]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 80009fa:	e7db      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80009fc:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MC_RunMotorControlTasks+0x288>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	f004 ff61 	bl	80058c8 <PWMC_CurrentReadingCalibr>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d0f5      	beq.n	80009f6 <MC_RunMotorControlTasks+0x19a>
      STM_NextState( &STM[M1], CLEAR );
 8000a0a:	2112      	movs	r1, #18
 8000a0c:	4837      	ldr	r0, [pc, #220]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 8000a0e:	4f32      	ldr	r7, [pc, #200]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 8000a10:	4d32      	ldr	r5, [pc, #200]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 8000a12:	f006 fab1 	bl	8006f78 <STM_NextState>
 8000a16:	e7cd      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
  if (hBootCapDelayCounterM1 == 0)
 8000a18:	4f2f      	ldr	r7, [pc, #188]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 8000a1a:	8839      	ldrh	r1, [r7, #0]
 8000a1c:	b289      	uxth	r1, r1
 8000a1e:	2900      	cmp	r1, #0
 8000a20:	d1ea      	bne.n	80009f8 <MC_RunMotorControlTasks+0x19c>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <MC_RunMotorControlTasks+0x288>)
 8000a24:	4d2d      	ldr	r5, [pc, #180]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	f004 ff4e 	bl	80058c8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8000a2c:	2111      	movs	r1, #17
 8000a2e:	482f      	ldr	r0, [pc, #188]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 8000a30:	f006 faa2 	bl	8006f78 <STM_NextState>
 8000a34:	e7be      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <MC_RunMotorControlTasks+0x2a0>)
 8000a38:	4935      	ldr	r1, [pc, #212]	; (8000b10 <MC_RunMotorControlTasks+0x2b4>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4f26      	ldr	r7, [pc, #152]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 8000a3e:	4d27      	ldr	r5, [pc, #156]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 8000a40:	f006 f9d8 	bl	8006df4 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8000a44:	4832      	ldr	r0, [pc, #200]	; (8000b10 <MC_RunMotorControlTasks+0x2b4>)
 8000a46:	f006 fcc1 	bl	80073cc <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4827      	ldr	r0, [pc, #156]	; (8000aec <MC_RunMotorControlTasks+0x290>)
 8000a4e:	f006 fa93 	bl	8006f78 <STM_NextState>
 8000a52:	e7af      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
  if (hStopPermanencyCounterM1 == 0)
 8000a54:	4d21      	ldr	r5, [pc, #132]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 8000a56:	882b      	ldrh	r3, [r5, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8115 	beq.w	8000c8a <MC_RunMotorControlTasks+0x42e>
 8000a60:	4f1d      	ldr	r7, [pc, #116]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
 8000a62:	e7a7      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
    R3_1_F30X_SwitchOffPWM( pwmcHandle[M1] );
 8000a64:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000ae4 <MC_RunMotorControlTasks+0x288>
 8000a68:	f8d8 0000 	ldr.w	r0, [r8]
 8000a6c:	f005 f8ee 	bl	8005c4c <R3_1_F30X_SwitchOffPWM>
  FOCVars[bMotor].Iab = Inull;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MC_RunMotorControlTasks+0x294>)
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <MC_RunMotorControlTasks+0x298>)
  FOCVars[bMotor].Iab = Inull;
 8000a74:	2700      	movs	r7, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a76:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Iab = Inull;
 8000a78:	601f      	str	r7, [r3, #0]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a7a:	4639      	mov	r1, r7
  FOCVars[bMotor].Iab = Inull;
 8000a7c:	605f      	str	r7, [r3, #4]
  FOCVars[bMotor].Iqd = Inull;
 8000a7e:	60df      	str	r7, [r3, #12]
 8000a80:	611f      	str	r7, [r3, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000a82:	f8c3 7016 	str.w	r7, [r3, #22]
 8000a86:	f8c3 701a 	str.w	r7, [r3, #26]
 8000a8a:	f8c3 701e 	str.w	r7, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a8e:	f004 fd5b 	bl	8005548 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MC_RunMotorControlTasks+0x29c>)
 8000a94:	4639      	mov	r1, r7
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f004 fd56 	bl	8005548 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MC_RunMotorControlTasks+0x2a0>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	f006 f9ac 	bl	8006dfc <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000aa4:	f8d8 0000 	ldr.w	r0, [r8]
 8000aa8:	f004 ff0c 	bl	80058c4 <PWMC_SwitchOffPWM>
  if (pFF[bMotor])
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MC_RunMotorControlTasks+0x2a4>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	b108      	cbz	r0, 8000ab6 <MC_RunMotorControlTasks+0x25a>
    FF_Clear(pFF[bMotor]);
 8000ab2:	f006 fd93 	bl	80075dc <FF_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000ab6:	6828      	ldr	r0, [r5, #0]
  hStopPermanencyCounterM1 = hTickCount;
 8000ab8:	4d08      	ldr	r5, [pc, #32]	; (8000adc <MC_RunMotorControlTasks+0x280>)
 8000aba:	4f07      	ldr	r7, [pc, #28]	; (8000ad8 <MC_RunMotorControlTasks+0x27c>)
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000abc:	f004 fcb0 	bl	8005420 <MPM_Clear>
  hStopPermanencyCounterM1 = hTickCount;
 8000ac0:	f44f 7348 	mov.w	r3, #800	; 0x320
    STM_NextState( &STM[M1], STOP );
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <MC_RunMotorControlTasks+0x290>)
  hStopPermanencyCounterM1 = hTickCount;
 8000ac8:	802b      	strh	r3, [r5, #0]
    STM_NextState( &STM[M1], STOP );
 8000aca:	f006 fa55 	bl	8006f78 <STM_NextState>
 8000ace:	e771      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
 8000ad0:	20000788 	.word	0x20000788
 8000ad4:	2000078c 	.word	0x2000078c
 8000ad8:	2000078a 	.word	0x2000078a
 8000adc:	2000078e 	.word	0x2000078e
 8000ae0:	200008d0 	.word	0x200008d0
 8000ae4:	200008d4 	.word	0x200008d4
 8000ae8:	20000964 	.word	0x20000964
 8000aec:	20000984 	.word	0x20000984
 8000af0:	200008e8 	.word	0x200008e8
 8000af4:	200008dc 	.word	0x200008dc
 8000af8:	20000994 	.word	0x20000994
 8000afc:	20000998 	.word	0x20000998
 8000b00:	200008cc 	.word	0x200008cc
 8000b04:	20000990 	.word	0x20000990
 8000b08:	20000440 	.word	0x20000440
 8000b0c:	200003b4 	.word	0x200003b4
 8000b10:	200005ec 	.word	0x200005ec
 8000b14:	200008e0 	.word	0x200008e0
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000b18:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8000d50 <MC_RunMotorControlTasks+0x4f4>
    if (pFF[bMotor])
 8000b1c:	4f81      	ldr	r7, [pc, #516]	; (8000d24 <MC_RunMotorControlTasks+0x4c8>)
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000b1e:	f8d8 0000 	ldr.w	r0, [r8]
 8000b22:	4981      	ldr	r1, [pc, #516]	; (8000d28 <MC_RunMotorControlTasks+0x4cc>)
 8000b24:	f006 f966 	bl	8006df4 <STC_SetSpeedSensor>
    if (pFF[bMotor])
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	b108      	cbz	r0, 8000b30 <MC_RunMotorControlTasks+0x2d4>
      FF_InitFOCAdditionalMethods(pFF[bMotor]);
 8000b2c:	f006 fdf0 	bl	8007710 <FF_InitFOCAdditionalMethods>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000b30:	4d7e      	ldr	r5, [pc, #504]	; (8000d2c <MC_RunMotorControlTasks+0x4d0>)
 8000b32:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80b7 	beq.w	8000caa <MC_RunMotorControlTasks+0x44e>
      STM_NextState( &STM[M1], RUN );
 8000b3c:	2106      	movs	r1, #6
 8000b3e:	487c      	ldr	r0, [pc, #496]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
 8000b40:	4f7c      	ldr	r7, [pc, #496]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
 8000b42:	4d7d      	ldr	r5, [pc, #500]	; (8000d38 <MC_RunMotorControlTasks+0x4dc>)
 8000b44:	f006 fa18 	bl	8006f78 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000b48:	f8d8 0000 	ldr.w	r0, [r8]
 8000b4c:	f006 fa06 	bl	8006f5c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000b50:	4b7a      	ldr	r3, [pc, #488]	; (8000d3c <MC_RunMotorControlTasks+0x4e0>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	f004 fa64 	bl	8005020 <MCI_ExecBufferedCommands>
 8000b58:	e72c      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
    R3_1_F30X_TurnOnLowSides( pwmcHandle[M1] );
 8000b5a:	4b79      	ldr	r3, [pc, #484]	; (8000d40 <MC_RunMotorControlTasks+0x4e4>)
   hBootCapDelayCounterM1 = hTickCount;
 8000b5c:	4f75      	ldr	r7, [pc, #468]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
    R3_1_F30X_TurnOnLowSides( pwmcHandle[M1] );
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	4d75      	ldr	r5, [pc, #468]	; (8000d38 <MC_RunMotorControlTasks+0x4dc>)
 8000b62:	f004 ffff 	bl	8005b64 <R3_1_F30X_TurnOnLowSides>
   hBootCapDelayCounterM1 = hTickCount;
 8000b66:	2314      	movs	r3, #20
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4871      	ldr	r0, [pc, #452]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
   hBootCapDelayCounterM1 = hTickCount;
 8000b6c:	803b      	strh	r3, [r7, #0]
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000b6e:	f006 fa03 	bl	8006f78 <STM_NextState>
 8000b72:	e71f      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000b74:	4873      	ldr	r0, [pc, #460]	; (8000d44 <MC_RunMotorControlTasks+0x4e8>)
 8000b76:	f007 f9a1 	bl	8007ebc <RUC_Exec>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	f040 808b 	bne.w	8000c96 <MC_RunMotorControlTasks+0x43a>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000b80:	4602      	mov	r2, r0
 8000b82:	2110      	movs	r1, #16
 8000b84:	486a      	ldr	r0, [pc, #424]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
 8000b86:	f006 fa7d 	bl	8007084 <STM_FaultProcessing>
      (void) VSS_CalcAvrgMecSpeed01Hz( &VirtualSpeedSensorM1, &hForcedMecSpeed01Hz );
 8000b8a:	f10d 0102 	add.w	r1, sp, #2
 8000b8e:	486e      	ldr	r0, [pc, #440]	; (8000d48 <MC_RunMotorControlTasks+0x4ec>)
 8000b90:	f006 fc80 	bl	8007494 <VSS_CalcAvrgMecSpeed01Hz>
      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeed01Hz );
 8000b94:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8000b98:	4863      	ldr	r0, [pc, #396]	; (8000d28 <MC_RunMotorControlTasks+0x4cc>)
 8000b9a:	f007 f849 	bl	8007c30 <STO_PLL_IsObserverConverged>
 8000b9e:	4605      	mov	r5, r0
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	4869      	ldr	r0, [pc, #420]	; (8000d48 <MC_RunMotorControlTasks+0x4ec>)
 8000ba4:	f006 fcfc 	bl	80075a0 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	f43f af24 	beq.w	80009f6 <MC_RunMotorControlTasks+0x19a>
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000bae:	485e      	ldr	r0, [pc, #376]	; (8000d28 <MC_RunMotorControlTasks+0x4cc>)
 8000bb0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000d2c <MC_RunMotorControlTasks+0x4d0>
        REMNG_Init( pREMNG[M1] );
 8000bb4:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000d5c <MC_RunMotorControlTasks+0x500>
 8000bb8:	4f5e      	ldr	r7, [pc, #376]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000bba:	f006 f8c5 	bl	8006d48 <SPD_GetElAngle>
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000bc4:	f004 fb16 	bl	80051f4 <MCM_Park>
 8000bc8:	4605      	mov	r5, r0
        REMNG_Init( pREMNG[M1] );
 8000bca:	f8d8 0000 	ldr.w	r0, [r8]
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000bce:	9501      	str	r5, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8000bd0:	f006 f804 	bl	8006bdc <REMNG_Init>
        Iq = StatorCurrent.qI_Component1;
 8000bd4:	b22d      	sxth	r5, r5
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.qI_Component1, 0 );
 8000bd6:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
 8000bda:	f8d8 0000 	ldr.w	r0, [r8]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f006 f820 	bl	8006c24 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], Iq, TRANSITION_DURATION );
 8000be4:	4629      	mov	r1, r5
 8000be6:	f8d8 0000 	ldr.w	r0, [r8]
 8000bea:	4d53      	ldr	r5, [pc, #332]	; (8000d38 <MC_RunMotorControlTasks+0x4dc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f006 f819 	bl	8006c24 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8000bf2:	2113      	movs	r1, #19
 8000bf4:	484e      	ldr	r0, [pc, #312]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
 8000bf6:	f006 f9bf 	bl	8006f78 <STM_NextState>
 8000bfa:	e6db      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <MC_RunMotorControlTasks+0x4e0>)
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000bfe:	4d4b      	ldr	r5, [pc, #300]	; (8000d2c <MC_RunMotorControlTasks+0x4d0>)
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	f004 fa0d 	bl	8005020 <MCI_ExecBufferedCommands>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000c06:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000c0a:	b153      	cbz	r3, 8000c22 <MC_RunMotorControlTasks+0x3c6>
    if( !IsSpeedReliable )
 8000c0c:	2f00      	cmp	r7, #0
 8000c0e:	f47f aef2 	bne.w	80009f6 <MC_RunMotorControlTasks+0x19a>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8000c12:	463a      	mov	r2, r7
 8000c14:	2120      	movs	r1, #32
 8000c16:	4846      	ldr	r0, [pc, #280]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
 8000c18:	4f46      	ldr	r7, [pc, #280]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
 8000c1a:	4d47      	ldr	r5, [pc, #284]	; (8000d38 <MC_RunMotorControlTasks+0x4dc>)
 8000c1c:	f006 fa32 	bl	8007084 <STM_FaultProcessing>
 8000c20:	e6c8      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000c22:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8000d50 <MC_RunMotorControlTasks+0x4f4>
 8000c26:	f8d8 0000 	ldr.w	r0, [r8]
 8000c2a:	f006 f945 	bl	8006eb8 <STC_CalcTorqueReference>
    if (pFF[bMotor])
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MC_RunMotorControlTasks+0x4c8>)
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000c30:	83e8      	strh	r0, [r5, #30]
    if (pFF[bMotor])
 8000c32:	681b      	ldr	r3, [r3, #0]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 8000c34:	8228      	strh	r0, [r5, #16]
    if (pFF[bMotor])
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0e8      	beq.n	8000c0c <MC_RunMotorControlTasks+0x3b0>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8000c3a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c3e:	6929      	ldr	r1, [r5, #16]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f006 fccf 	bl	80075e4 <FF_VqdffComputation>
 8000c46:	e7e1      	b.n	8000c0c <MC_RunMotorControlTasks+0x3b0>
        LoopClosed = VSS_CalcAvrgMecSpeed01Hz(&VirtualSpeedSensorM1,&hForcedMecSpeed01Hz);
 8000c48:	a901      	add	r1, sp, #4
 8000c4a:	483f      	ldr	r0, [pc, #252]	; (8000d48 <MC_RunMotorControlTasks+0x4ec>)
 8000c4c:	f006 fc22 	bl	8007494 <VSS_CalcAvrgMecSpeed01Hz>
 8000c50:	4605      	mov	r5, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8000c52:	483d      	ldr	r0, [pc, #244]	; (8000d48 <MC_RunMotorControlTasks+0x4ec>)
 8000c54:	f006 fcb2 	bl	80075bc <VSS_TransitionEnded>
        if ( LoopClosed == true ) 
 8000c58:	b915      	cbnz	r5, 8000c60 <MC_RunMotorControlTasks+0x404>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	f43f aecb 	beq.w	80009f6 <MC_RunMotorControlTasks+0x19a>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000c60:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <MC_RunMotorControlTasks+0x4f0>)
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <MC_RunMotorControlTasks+0x4d0>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000c64:	f8d2 8000 	ldr.w	r8, [r2]
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000c68:	f9b3 9010 	ldrsh.w	r9, [r3, #16]
 8000c6c:	4f31      	ldr	r7, [pc, #196]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
 8000c6e:	4d32      	ldr	r5, [pc, #200]	; (8000d38 <MC_RunMotorControlTasks+0x4dc>)
 8000c70:	4640      	mov	r0, r8
 8000c72:	f004 fc6d 	bl	8005550 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000c76:	fb09 f100 	mul.w	r1, r9, r0
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	f004 fc64 	bl	8005548 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8000c80:	2105      	movs	r1, #5
 8000c82:	482b      	ldr	r0, [pc, #172]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
 8000c84:	f006 f978 	bl	8006f78 <STM_NextState>
 8000c88:	e694      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
      STM_NextState( &STM[M1], STOP_IDLE );
 8000c8a:	2109      	movs	r1, #9
 8000c8c:	4828      	ldr	r0, [pc, #160]	; (8000d30 <MC_RunMotorControlTasks+0x4d4>)
 8000c8e:	4f29      	ldr	r7, [pc, #164]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
 8000c90:	f006 f972 	bl	8006f78 <STM_NextState>
 8000c94:	e68e      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
        IqdRef.qI_Component1 = STC_CalcTorqueReference( pSTC[M1] );
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MC_RunMotorControlTasks+0x4f4>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	f006 f90d 	bl	8006eb8 <STC_CalcTorqueReference>
        IqdRef.qI_Component2 = FOCVars[M1].UserIdref;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MC_RunMotorControlTasks+0x4d0>)
 8000ca0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8000ca4:	8218      	strh	r0, [r3, #16]
 8000ca6:	825a      	strh	r2, [r3, #18]
 8000ca8:	e76f      	b.n	8000b8a <MC_RunMotorControlTasks+0x32e>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000caa:	f8d8 0000 	ldr.w	r0, [r8]
 8000cae:	f006 f903 	bl	8006eb8 <STC_CalcTorqueReference>
    if (pFF[bMotor])
 8000cb2:	683b      	ldr	r3, [r7, #0]
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000cb4:	83e8      	strh	r0, [r5, #30]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 8000cb6:	8228      	strh	r0, [r5, #16]
    if (pFF[bMotor])
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f43f af3f 	beq.w	8000b3c <MC_RunMotorControlTasks+0x2e0>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8000cbe:	6929      	ldr	r1, [r5, #16]
 8000cc0:	f8d8 2000 	ldr.w	r2, [r8]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f006 fc8d 	bl	80075e4 <FF_VqdffComputation>
 8000cca:	e737      	b.n	8000b3c <MC_RunMotorControlTasks+0x2e0>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MC_RunMotorControlTasks+0x4f8>)
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000cce:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000d40 <MC_RunMotorControlTasks+0x4e4>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000cd2:	6818      	ldr	r0, [r3, #0]
  FOCVars[bMotor].Iab = Inull;
 8000cd4:	2700      	movs	r7, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000cd6:	4639      	mov	r1, r7
  FOCVars[bMotor].Iab = Inull;
 8000cd8:	602f      	str	r7, [r5, #0]
 8000cda:	606f      	str	r7, [r5, #4]
  FOCVars[bMotor].Iqd = Inull;
 8000cdc:	60ef      	str	r7, [r5, #12]
 8000cde:	612f      	str	r7, [r5, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000ce0:	f8c5 7016 	str.w	r7, [r5, #22]
 8000ce4:	f8c5 701a 	str.w	r7, [r5, #26]
 8000ce8:	f8c5 701e 	str.w	r7, [r5, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000cec:	f004 fc2c 	bl	8005548 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MC_RunMotorControlTasks+0x4fc>)
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	f004 fc27 	bl	8005548 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 8000cfa:	f8d8 0000 	ldr.w	r0, [r8]
 8000cfe:	f006 f87d 	bl	8006dfc <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d02:	f8d9 0000 	ldr.w	r0, [r9]
 8000d06:	f004 fddd 	bl	80058c4 <PWMC_SwitchOffPWM>
  if (pFF[bMotor])
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MC_RunMotorControlTasks+0x4c8>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	b108      	cbz	r0, 8000d14 <MC_RunMotorControlTasks+0x4b8>
    FF_Clear(pFF[bMotor]);
 8000d10:	f006 fc64 	bl	80075dc <FF_Clear>
      R3_1_F30X_SwitchOnPWM( pwmcHandle[M1] );
 8000d14:	f8d9 0000 	ldr.w	r0, [r9]
 8000d18:	4f06      	ldr	r7, [pc, #24]	; (8000d34 <MC_RunMotorControlTasks+0x4d8>)
 8000d1a:	4d07      	ldr	r5, [pc, #28]	; (8000d38 <MC_RunMotorControlTasks+0x4dc>)
 8000d1c:	f004 ff46 	bl	8005bac <R3_1_F30X_SwitchOnPWM>
 8000d20:	e648      	b.n	80009b4 <MC_RunMotorControlTasks+0x158>
 8000d22:	bf00      	nop
 8000d24:	200008cc 	.word	0x200008cc
 8000d28:	20000440 	.word	0x20000440
 8000d2c:	200008e8 	.word	0x200008e8
 8000d30:	20000984 	.word	0x20000984
 8000d34:	2000078a 	.word	0x2000078a
 8000d38:	2000078e 	.word	0x2000078e
 8000d3c:	200008e0 	.word	0x200008e0
 8000d40:	200008d4 	.word	0x200008d4
 8000d44:	200003b4 	.word	0x200003b4
 8000d48:	200005ec 	.word	0x200005ec
 8000d4c:	200008d8 	.word	0x200008d8
 8000d50:	20000998 	.word	0x20000998
 8000d54:	200008dc 	.word	0x200008dc
 8000d58:	20000994 	.word	0x20000994
 8000d5c:	2000098c 	.word	0x2000098c

08000d60 <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 8000d60:	4ba5      	ldr	r3, [pc, #660]	; (8000ff8 <MC_Scheduler+0x298>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d000      	beq.n	8000d6a <MC_Scheduler+0xa>
 8000d68:	4770      	bx	lr
{
 8000d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(hMFTaskCounterM1 > 0u)
 8000d6e:	4ca3      	ldr	r4, [pc, #652]	; (8000ffc <MC_Scheduler+0x29c>)
 8000d70:	8823      	ldrh	r3, [r4, #0]
 8000d72:	b29b      	uxth	r3, r3
{
 8000d74:	b083      	sub	sp, #12
    if(hMFTaskCounterM1 > 0u)
 8000d76:	b1bb      	cbz	r3, 8000da8 <MC_Scheduler+0x48>
      hMFTaskCounterM1--;
 8000d78:	8823      	ldrh	r3, [r4, #0]
 8000d7a:	4ea1      	ldr	r6, [pc, #644]	; (8001000 <MC_Scheduler+0x2a0>)
 8000d7c:	4da1      	ldr	r5, [pc, #644]	; (8001004 <MC_Scheduler+0x2a4>)
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8000d84:	8833      	ldrh	r3, [r6, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	b94b      	cbnz	r3, 8000d9e <MC_Scheduler+0x3e>
    if(hStopPermanencyCounterM1 > 0u)
 8000d8a:	882b      	ldrh	r3, [r5, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b11b      	cbz	r3, 8000d98 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8000d90:	882b      	ldrh	r3, [r5, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	802b      	strh	r3, [r5, #0]
}
 8000d98:	b003      	add	sp, #12
 8000d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hBootCapDelayCounterM1--;
 8000d9e:	8833      	ldrh	r3, [r6, #0]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	8033      	strh	r3, [r6, #0]
 8000da6:	e7f0      	b.n	8000d8a <MC_Scheduler+0x2a>
  int16_t wAux = 0;
 8000da8:	a902      	add	r1, sp, #8
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000daa:	4897      	ldr	r0, [pc, #604]	; (8001008 <MC_Scheduler+0x2a8>)
  int16_t wAux = 0;
 8000dac:	f821 3d08 	strh.w	r3, [r1, #-8]!
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000db0:	f006 fe36 	bl	8007a20 <STO_PLL_CalcAvrgMecSpeed01Hz>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000db4:	4d95      	ldr	r5, [pc, #596]	; (800100c <MC_Scheduler+0x2ac>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000db6:	4606      	mov	r6, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000db8:	6828      	ldr	r0, [r5, #0]
 8000dba:	f004 fc13 	bl	80055e4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000dbe:	4894      	ldr	r0, [pc, #592]	; (8001010 <MC_Scheduler+0x2b0>)
 8000dc0:	f006 f97a 	bl	80070b8 <STM_GetState>
  switch ( StateM1 )
 8000dc4:	3803      	subs	r0, #3
 8000dc6:	2810      	cmp	r0, #16
 8000dc8:	d83d      	bhi.n	8000e46 <MC_Scheduler+0xe6>
 8000dca:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000dce:	00c4      	.short	0x00c4
 8000dd0:	00a600d1 	.word	0x00a600d1
 8000dd4:	00730137 	.word	0x00730137
 8000dd8:	005c006b 	.word	0x005c006b
 8000ddc:	003c003c 	.word	0x003c003c
 8000de0:	003c003c 	.word	0x003c003c
 8000de4:	003c003c 	.word	0x003c003c
 8000de8:	003f004d 	.word	0x003f004d
 8000dec:	00110021 	.word	0x00110021
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000df0:	4888      	ldr	r0, [pc, #544]	; (8001014 <MC_Scheduler+0x2b4>)
 8000df2:	f007 f863 	bl	8007ebc <RUC_Exec>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	f040 8143 	bne.w	8001082 <MC_Scheduler+0x322>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4883      	ldr	r0, [pc, #524]	; (8001010 <MC_Scheduler+0x2b0>)
 8000e02:	4e7f      	ldr	r6, [pc, #508]	; (8001000 <MC_Scheduler+0x2a0>)
 8000e04:	4d7f      	ldr	r5, [pc, #508]	; (8001004 <MC_Scheduler+0x2a4>)
 8000e06:	f006 f93d 	bl	8007084 <STM_FaultProcessing>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	8023      	strh	r3, [r4, #0]
 8000e0e:	e7b9      	b.n	8000d84 <MC_Scheduler+0x24>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000e10:	4e81      	ldr	r6, [pc, #516]	; (8001018 <MC_Scheduler+0x2b8>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000e12:	4d82      	ldr	r5, [pc, #520]	; (800101c <MC_Scheduler+0x2bc>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000e14:	4982      	ldr	r1, [pc, #520]	; (8001020 <MC_Scheduler+0x2c0>)
 8000e16:	6830      	ldr	r0, [r6, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000e1e:	f005 ffe9 	bl	8006df4 <STC_SetSpeedSensor>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8000e22:	4b80      	ldr	r3, [pc, #512]	; (8001024 <MC_Scheduler+0x2c4>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f004 f93d 	bl	80050a4 <MCI_GetImposedMotorDirection>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	4879      	ldr	r0, [pc, #484]	; (8001014 <MC_Scheduler+0x2b4>)
 8000e2e:	f006 fffd 	bl	8007e2c <RUC_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 8000e32:	4875      	ldr	r0, [pc, #468]	; (8001008 <MC_Scheduler+0x2a8>)
 8000e34:	f006 fecc 	bl	8007bd0 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4875      	ldr	r0, [pc, #468]	; (8001010 <MC_Scheduler+0x2b0>)
 8000e3c:	f006 f89c 	bl	8006f78 <STM_NextState>
 8000e40:	2800      	cmp	r0, #0
 8000e42:	f040 815d 	bne.w	8001100 <MC_Scheduler+0x3a0>
 8000e46:	4e6e      	ldr	r6, [pc, #440]	; (8001000 <MC_Scheduler+0x2a0>)
 8000e48:	4d6e      	ldr	r5, [pc, #440]	; (8001004 <MC_Scheduler+0x2a4>)
 8000e4a:	e7de      	b.n	8000e0a <MC_Scheduler+0xaa>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8000e4c:	4b76      	ldr	r3, [pc, #472]	; (8001028 <MC_Scheduler+0x2c8>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	f004 fd39 	bl	80058c8 <PWMC_CurrentReadingCalibr>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d0f5      	beq.n	8000e46 <MC_Scheduler+0xe6>
      STM_NextState( &STM[M1], CLEAR );
 8000e5a:	2112      	movs	r1, #18
 8000e5c:	486c      	ldr	r0, [pc, #432]	; (8001010 <MC_Scheduler+0x2b0>)
 8000e5e:	4e68      	ldr	r6, [pc, #416]	; (8001000 <MC_Scheduler+0x2a0>)
 8000e60:	4d68      	ldr	r5, [pc, #416]	; (8001004 <MC_Scheduler+0x2a4>)
 8000e62:	f006 f889 	bl	8006f78 <STM_NextState>
 8000e66:	e7d0      	b.n	8000e0a <MC_Scheduler+0xaa>
  if (hBootCapDelayCounterM1 == 0)
 8000e68:	4e65      	ldr	r6, [pc, #404]	; (8001000 <MC_Scheduler+0x2a0>)
 8000e6a:	8831      	ldrh	r1, [r6, #0]
 8000e6c:	b289      	uxth	r1, r1
 8000e6e:	2900      	cmp	r1, #0
 8000e70:	d1ea      	bne.n	8000e48 <MC_Scheduler+0xe8>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8000e72:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <MC_Scheduler+0x2c8>)
 8000e74:	4d63      	ldr	r5, [pc, #396]	; (8001004 <MC_Scheduler+0x2a4>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	f004 fd26 	bl	80058c8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8000e7c:	2111      	movs	r1, #17
 8000e7e:	4864      	ldr	r0, [pc, #400]	; (8001010 <MC_Scheduler+0x2b0>)
 8000e80:	f006 f87a 	bl	8006f78 <STM_NextState>
 8000e84:	e7c1      	b.n	8000e0a <MC_Scheduler+0xaa>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8000e86:	4b64      	ldr	r3, [pc, #400]	; (8001018 <MC_Scheduler+0x2b8>)
 8000e88:	4965      	ldr	r1, [pc, #404]	; (8001020 <MC_Scheduler+0x2c0>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	4e5c      	ldr	r6, [pc, #368]	; (8001000 <MC_Scheduler+0x2a0>)
 8000e8e:	4d5d      	ldr	r5, [pc, #372]	; (8001004 <MC_Scheduler+0x2a4>)
 8000e90:	f005 ffb0 	bl	8006df4 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8000e94:	4862      	ldr	r0, [pc, #392]	; (8001020 <MC_Scheduler+0x2c0>)
 8000e96:	f006 fa99 	bl	80073cc <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	485c      	ldr	r0, [pc, #368]	; (8001010 <MC_Scheduler+0x2b0>)
 8000e9e:	f006 f86b 	bl	8006f78 <STM_NextState>
 8000ea2:	e7b2      	b.n	8000e0a <MC_Scheduler+0xaa>
  if (hStopPermanencyCounterM1 == 0)
 8000ea4:	4d57      	ldr	r5, [pc, #348]	; (8001004 <MC_Scheduler+0x2a4>)
 8000ea6:	882b      	ldrh	r3, [r5, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8109 	beq.w	80010c2 <MC_Scheduler+0x362>
 8000eb0:	4e53      	ldr	r6, [pc, #332]	; (8001000 <MC_Scheduler+0x2a0>)
 8000eb2:	e7aa      	b.n	8000e0a <MC_Scheduler+0xaa>
    R3_1_F30X_SwitchOffPWM( pwmcHandle[M1] );
 8000eb4:	4f5c      	ldr	r7, [pc, #368]	; (8001028 <MC_Scheduler+0x2c8>)
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f004 fec8 	bl	8005c4c <R3_1_F30X_SwitchOffPWM>
  FOCVars[bMotor].Iab = Inull;
 8000ebc:	4b57      	ldr	r3, [pc, #348]	; (800101c <MC_Scheduler+0x2bc>)
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ebe:	4a5b      	ldr	r2, [pc, #364]	; (800102c <MC_Scheduler+0x2cc>)
  FOCVars[bMotor].Iab = Inull;
 8000ec0:	2600      	movs	r6, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ec2:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Iab = Inull;
 8000ec4:	601e      	str	r6, [r3, #0]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ec6:	4631      	mov	r1, r6
  FOCVars[bMotor].Iab = Inull;
 8000ec8:	605e      	str	r6, [r3, #4]
  FOCVars[bMotor].Iqd = Inull;
 8000eca:	60de      	str	r6, [r3, #12]
 8000ecc:	611e      	str	r6, [r3, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000ece:	f8c3 6016 	str.w	r6, [r3, #22]
 8000ed2:	f8c3 601a 	str.w	r6, [r3, #26]
 8000ed6:	f8c3 601e 	str.w	r6, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000eda:	f004 fb35 	bl	8005548 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000ede:	4b54      	ldr	r3, [pc, #336]	; (8001030 <MC_Scheduler+0x2d0>)
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f004 fb30 	bl	8005548 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <MC_Scheduler+0x2b8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f005 ff86 	bl	8006dfc <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f004 fce7 	bl	80058c4 <PWMC_SwitchOffPWM>
  if (pFF[bMotor])
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <MC_Scheduler+0x2d4>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	b108      	cbz	r0, 8000f00 <MC_Scheduler+0x1a0>
    FF_Clear(pFF[bMotor]);
 8000efc:	f006 fb6e 	bl	80075dc <FF_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000f00:	6828      	ldr	r0, [r5, #0]
  hStopPermanencyCounterM1 = hTickCount;
 8000f02:	4d40      	ldr	r5, [pc, #256]	; (8001004 <MC_Scheduler+0x2a4>)
 8000f04:	4e3e      	ldr	r6, [pc, #248]	; (8001000 <MC_Scheduler+0x2a0>)
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000f06:	f004 fa8b 	bl	8005420 <MPM_Clear>
  hStopPermanencyCounterM1 = hTickCount;
 8000f0a:	f44f 7348 	mov.w	r3, #800	; 0x320
    STM_NextState( &STM[M1], STOP );
 8000f0e:	2108      	movs	r1, #8
 8000f10:	483f      	ldr	r0, [pc, #252]	; (8001010 <MC_Scheduler+0x2b0>)
  hStopPermanencyCounterM1 = hTickCount;
 8000f12:	802b      	strh	r3, [r5, #0]
    STM_NextState( &STM[M1], STOP );
 8000f14:	f006 f830 	bl	8006f78 <STM_NextState>
 8000f18:	e777      	b.n	8000e0a <MC_Scheduler+0xaa>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000f1a:	4f3f      	ldr	r7, [pc, #252]	; (8001018 <MC_Scheduler+0x2b8>)
    if (pFF[bMotor])
 8000f1c:	4e45      	ldr	r6, [pc, #276]	; (8001034 <MC_Scheduler+0x2d4>)
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000f1e:	6838      	ldr	r0, [r7, #0]
 8000f20:	4939      	ldr	r1, [pc, #228]	; (8001008 <MC_Scheduler+0x2a8>)
 8000f22:	f005 ff67 	bl	8006df4 <STC_SetSpeedSensor>
    if (pFF[bMotor])
 8000f26:	6830      	ldr	r0, [r6, #0]
 8000f28:	b108      	cbz	r0, 8000f2e <MC_Scheduler+0x1ce>
      FF_InitFOCAdditionalMethods(pFF[bMotor]);
 8000f2a:	f006 fbf1 	bl	8007710 <FF_InitFOCAdditionalMethods>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f2e:	4d3b      	ldr	r5, [pc, #236]	; (800101c <MC_Scheduler+0x2bc>)
 8000f30:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80d4 	beq.w	80010e2 <MC_Scheduler+0x382>
      STM_NextState( &STM[M1], RUN );
 8000f3a:	2106      	movs	r1, #6
 8000f3c:	4834      	ldr	r0, [pc, #208]	; (8001010 <MC_Scheduler+0x2b0>)
 8000f3e:	4e30      	ldr	r6, [pc, #192]	; (8001000 <MC_Scheduler+0x2a0>)
 8000f40:	4d30      	ldr	r5, [pc, #192]	; (8001004 <MC_Scheduler+0x2a4>)
 8000f42:	f006 f819 	bl	8006f78 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f006 f808 	bl	8006f5c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000f4c:	4b35      	ldr	r3, [pc, #212]	; (8001024 <MC_Scheduler+0x2c4>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	f004 f866 	bl	8005020 <MCI_ExecBufferedCommands>
 8000f54:	e759      	b.n	8000e0a <MC_Scheduler+0xaa>
    R3_1_F30X_TurnOnLowSides( pwmcHandle[M1] );
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <MC_Scheduler+0x2c8>)
   hBootCapDelayCounterM1 = hTickCount;
 8000f58:	4e29      	ldr	r6, [pc, #164]	; (8001000 <MC_Scheduler+0x2a0>)
    R3_1_F30X_TurnOnLowSides( pwmcHandle[M1] );
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	4d29      	ldr	r5, [pc, #164]	; (8001004 <MC_Scheduler+0x2a4>)
 8000f5e:	f004 fe01 	bl	8005b64 <R3_1_F30X_TurnOnLowSides>
   hBootCapDelayCounterM1 = hTickCount;
 8000f62:	2314      	movs	r3, #20
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000f64:	2110      	movs	r1, #16
 8000f66:	482a      	ldr	r0, [pc, #168]	; (8001010 <MC_Scheduler+0x2b0>)
   hBootCapDelayCounterM1 = hTickCount;
 8000f68:	8033      	strh	r3, [r6, #0]
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000f6a:	f006 f805 	bl	8006f78 <STM_NextState>
 8000f6e:	e74c      	b.n	8000e0a <MC_Scheduler+0xaa>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000f70:	4828      	ldr	r0, [pc, #160]	; (8001014 <MC_Scheduler+0x2b4>)
 8000f72:	f006 ffa3 	bl	8007ebc <RUC_Exec>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	f040 80a9 	bne.w	80010ce <MC_Scheduler+0x36e>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <MC_Scheduler+0x2b0>)
 8000f82:	f006 f87f 	bl	8007084 <STM_FaultProcessing>
      (void) VSS_CalcAvrgMecSpeed01Hz( &VirtualSpeedSensorM1, &hForcedMecSpeed01Hz );
 8000f86:	f10d 0102 	add.w	r1, sp, #2
 8000f8a:	4825      	ldr	r0, [pc, #148]	; (8001020 <MC_Scheduler+0x2c0>)
 8000f8c:	f006 fa82 	bl	8007494 <VSS_CalcAvrgMecSpeed01Hz>
      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeed01Hz );
 8000f90:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <MC_Scheduler+0x2a8>)
 8000f96:	f006 fe4b 	bl	8007c30 <STO_PLL_IsObserverConverged>
 8000f9a:	4605      	mov	r5, r0
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	4820      	ldr	r0, [pc, #128]	; (8001020 <MC_Scheduler+0x2c0>)
 8000fa0:	f006 fafe 	bl	80075a0 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	f43f af4e 	beq.w	8000e46 <MC_Scheduler+0xe6>
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MC_Scheduler+0x2a8>)
 8000fac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800101c <MC_Scheduler+0x2bc>
        REMNG_Init( pREMNG[M1] );
 8000fb0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001038 <MC_Scheduler+0x2d8>
 8000fb4:	4e12      	ldr	r6, [pc, #72]	; (8001000 <MC_Scheduler+0x2a0>)
 8000fb6:	4d13      	ldr	r5, [pc, #76]	; (8001004 <MC_Scheduler+0x2a4>)
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000fb8:	f005 fec6 	bl	8006d48 <SPD_GetElAngle>
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000fc2:	f004 f917 	bl	80051f4 <MCM_Park>
 8000fc6:	4607      	mov	r7, r0
        REMNG_Init( pREMNG[M1] );
 8000fc8:	f8d8 0000 	ldr.w	r0, [r8]
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000fcc:	9701      	str	r7, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8000fce:	f005 fe05 	bl	8006bdc <REMNG_Init>
        Iq = StatorCurrent.qI_Component1;
 8000fd2:	b23f      	sxth	r7, r7
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.qI_Component1, 0 );
 8000fd4:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
 8000fd8:	f8d8 0000 	ldr.w	r0, [r8]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f005 fe21 	bl	8006c24 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], Iq, TRANSITION_DURATION );
 8000fe2:	4639      	mov	r1, r7
 8000fe4:	f8d8 0000 	ldr.w	r0, [r8]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f005 fe1b 	bl	8006c24 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8000fee:	2113      	movs	r1, #19
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MC_Scheduler+0x2b0>)
 8000ff2:	f005 ffc1 	bl	8006f78 <STM_NextState>
 8000ff6:	e708      	b.n	8000e0a <MC_Scheduler+0xaa>
 8000ff8:	20000788 	.word	0x20000788
 8000ffc:	2000078c 	.word	0x2000078c
 8001000:	2000078a 	.word	0x2000078a
 8001004:	2000078e 	.word	0x2000078e
 8001008:	20000440 	.word	0x20000440
 800100c:	20000990 	.word	0x20000990
 8001010:	20000984 	.word	0x20000984
 8001014:	200003b4 	.word	0x200003b4
 8001018:	20000998 	.word	0x20000998
 800101c:	200008e8 	.word	0x200008e8
 8001020:	200005ec 	.word	0x200005ec
 8001024:	200008e0 	.word	0x200008e0
 8001028:	200008d4 	.word	0x200008d4
 800102c:	200008dc 	.word	0x200008dc
 8001030:	20000994 	.word	0x20000994
 8001034:	200008cc 	.word	0x200008cc
 8001038:	2000098c 	.word	0x2000098c
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800103c:	4b45      	ldr	r3, [pc, #276]	; (8001154 <MC_Scheduler+0x3f4>)
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800103e:	4d46      	ldr	r5, [pc, #280]	; (8001158 <MC_Scheduler+0x3f8>)
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f003 ffed 	bl	8005020 <MCI_ExecBufferedCommands>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001046:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800104a:	b153      	cbz	r3, 8001062 <MC_Scheduler+0x302>
    if( !IsSpeedReliable )
 800104c:	2e00      	cmp	r6, #0
 800104e:	f47f aefa 	bne.w	8000e46 <MC_Scheduler+0xe6>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001052:	4632      	mov	r2, r6
 8001054:	2120      	movs	r1, #32
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <MC_Scheduler+0x3fc>)
 8001058:	4e41      	ldr	r6, [pc, #260]	; (8001160 <MC_Scheduler+0x400>)
 800105a:	4d42      	ldr	r5, [pc, #264]	; (8001164 <MC_Scheduler+0x404>)
 800105c:	f006 f812 	bl	8007084 <STM_FaultProcessing>
 8001060:	e6d3      	b.n	8000e0a <MC_Scheduler+0xaa>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001062:	4f41      	ldr	r7, [pc, #260]	; (8001168 <MC_Scheduler+0x408>)
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f005 ff27 	bl	8006eb8 <STC_CalcTorqueReference>
    if (pFF[bMotor])
 800106a:	4b40      	ldr	r3, [pc, #256]	; (800116c <MC_Scheduler+0x40c>)
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800106c:	83e8      	strh	r0, [r5, #30]
    if (pFF[bMotor])
 800106e:	681b      	ldr	r3, [r3, #0]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 8001070:	8228      	strh	r0, [r5, #16]
    if (pFF[bMotor])
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0ea      	beq.n	800104c <MC_Scheduler+0x2ec>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	6929      	ldr	r1, [r5, #16]
 800107a:	4618      	mov	r0, r3
 800107c:	f006 fab2 	bl	80075e4 <FF_VqdffComputation>
 8001080:	e7e4      	b.n	800104c <MC_Scheduler+0x2ec>
        LoopClosed = VSS_CalcAvrgMecSpeed01Hz(&VirtualSpeedSensorM1,&hForcedMecSpeed01Hz);
 8001082:	a901      	add	r1, sp, #4
 8001084:	483a      	ldr	r0, [pc, #232]	; (8001170 <MC_Scheduler+0x410>)
 8001086:	f006 fa05 	bl	8007494 <VSS_CalcAvrgMecSpeed01Hz>
 800108a:	4605      	mov	r5, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 800108c:	4838      	ldr	r0, [pc, #224]	; (8001170 <MC_Scheduler+0x410>)
 800108e:	f006 fa95 	bl	80075bc <VSS_TransitionEnded>
        if ( LoopClosed == true ) 
 8001092:	b915      	cbnz	r5, 800109a <MC_Scheduler+0x33a>
 8001094:	2800      	cmp	r0, #0
 8001096:	f43f aed6 	beq.w	8000e46 <MC_Scheduler+0xe6>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <MC_Scheduler+0x414>)
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800109c:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <MC_Scheduler+0x3f8>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800109e:	6817      	ldr	r7, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80010a0:	f9b3 8010 	ldrsh.w	r8, [r3, #16]
 80010a4:	4e2e      	ldr	r6, [pc, #184]	; (8001160 <MC_Scheduler+0x400>)
 80010a6:	4d2f      	ldr	r5, [pc, #188]	; (8001164 <MC_Scheduler+0x404>)
 80010a8:	4638      	mov	r0, r7
 80010aa:	f004 fa51 	bl	8005550 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80010ae:	fb08 f100 	mul.w	r1, r8, r0
 80010b2:	4638      	mov	r0, r7
 80010b4:	f004 fa48 	bl	8005548 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80010b8:	2105      	movs	r1, #5
 80010ba:	4828      	ldr	r0, [pc, #160]	; (800115c <MC_Scheduler+0x3fc>)
 80010bc:	f005 ff5c 	bl	8006f78 <STM_NextState>
 80010c0:	e6a3      	b.n	8000e0a <MC_Scheduler+0xaa>
      STM_NextState( &STM[M1], STOP_IDLE );
 80010c2:	2109      	movs	r1, #9
 80010c4:	4825      	ldr	r0, [pc, #148]	; (800115c <MC_Scheduler+0x3fc>)
 80010c6:	4e26      	ldr	r6, [pc, #152]	; (8001160 <MC_Scheduler+0x400>)
 80010c8:	f005 ff56 	bl	8006f78 <STM_NextState>
 80010cc:	e69d      	b.n	8000e0a <MC_Scheduler+0xaa>
        IqdRef.qI_Component1 = STC_CalcTorqueReference( pSTC[M1] );
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MC_Scheduler+0x408>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f005 fef1 	bl	8006eb8 <STC_CalcTorqueReference>
        IqdRef.qI_Component2 = FOCVars[M1].UserIdref;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MC_Scheduler+0x3f8>)
 80010d8:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 80010dc:	8218      	strh	r0, [r3, #16]
 80010de:	825a      	strh	r2, [r3, #18]
 80010e0:	e751      	b.n	8000f86 <MC_Scheduler+0x226>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	f005 fee8 	bl	8006eb8 <STC_CalcTorqueReference>
    if (pFF[bMotor])
 80010e8:	6833      	ldr	r3, [r6, #0]
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80010ea:	83e8      	strh	r0, [r5, #30]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 80010ec:	8228      	strh	r0, [r5, #16]
    if (pFF[bMotor])
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f43f af23 	beq.w	8000f3a <MC_Scheduler+0x1da>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 80010f4:	6929      	ldr	r1, [r5, #16]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fa73 	bl	80075e4 <FF_VqdffComputation>
 80010fe:	e71c      	b.n	8000f3a <MC_Scheduler+0x1da>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MC_Scheduler+0x418>)
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001102:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001180 <MC_Scheduler+0x420>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001106:	6818      	ldr	r0, [r3, #0]
  FOCVars[bMotor].Iab = Inull;
 8001108:	2700      	movs	r7, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800110a:	4639      	mov	r1, r7
  FOCVars[bMotor].Iab = Inull;
 800110c:	602f      	str	r7, [r5, #0]
 800110e:	606f      	str	r7, [r5, #4]
  FOCVars[bMotor].Iqd = Inull;
 8001110:	60ef      	str	r7, [r5, #12]
 8001112:	612f      	str	r7, [r5, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8001114:	f8c5 7016 	str.w	r7, [r5, #22]
 8001118:	f8c5 701a 	str.w	r7, [r5, #26]
 800111c:	f8c5 701e 	str.w	r7, [r5, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001120:	f004 fa12 	bl	8005548 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MC_Scheduler+0x41c>)
 8001126:	4639      	mov	r1, r7
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	f004 fa0d 	bl	8005548 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 800112e:	6830      	ldr	r0, [r6, #0]
 8001130:	f005 fe64 	bl	8006dfc <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001134:	f8d8 0000 	ldr.w	r0, [r8]
 8001138:	f004 fbc4 	bl	80058c4 <PWMC_SwitchOffPWM>
  if (pFF[bMotor])
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MC_Scheduler+0x40c>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	b108      	cbz	r0, 8001146 <MC_Scheduler+0x3e6>
    FF_Clear(pFF[bMotor]);
 8001142:	f006 fa4b 	bl	80075dc <FF_Clear>
      R3_1_F30X_SwitchOnPWM( pwmcHandle[M1] );
 8001146:	f8d8 0000 	ldr.w	r0, [r8]
 800114a:	4e05      	ldr	r6, [pc, #20]	; (8001160 <MC_Scheduler+0x400>)
 800114c:	4d05      	ldr	r5, [pc, #20]	; (8001164 <MC_Scheduler+0x404>)
 800114e:	f004 fd2d 	bl	8005bac <R3_1_F30X_SwitchOnPWM>
 8001152:	e65a      	b.n	8000e0a <MC_Scheduler+0xaa>
 8001154:	200008e0 	.word	0x200008e0
 8001158:	200008e8 	.word	0x200008e8
 800115c:	20000984 	.word	0x20000984
 8001160:	2000078a 	.word	0x2000078a
 8001164:	2000078e 	.word	0x2000078e
 8001168:	20000998 	.word	0x20000998
 800116c:	200008cc 	.word	0x200008cc
 8001170:	200005ec 	.word	0x200005ec
 8001174:	200008d8 	.word	0x200008d8
 8001178:	200008dc 	.word	0x200008dc
 800117c:	20000994 	.word	0x20000994
 8001180:	200008d4 	.word	0x200008d4

08001184 <TSK_HighFrequencyTask>:
{
 8001184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ( STM[M1].bState == SWITCH_OVER )
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <TSK_HighFrequencyTask+0x160>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800118a:	4c57      	ldr	r4, [pc, #348]	; (80012e8 <TSK_HighFrequencyTask+0x164>)
  if ( STM[M1].bState == SWITCH_OVER )
 800118c:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800118e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001192:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 8001194:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001196:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001198:	f000 8097 	beq.w	80012ca <TSK_HighFrequencyTask+0x146>
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <TSK_HighFrequencyTask+0x168>)
  PWMC_GetPhaseCurrents(pwmcHandle[bMotor], &Iab);
 800119e:	4f54      	ldr	r7, [pc, #336]	; (80012f0 <TSK_HighFrequencyTask+0x16c>)
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80011a0:	6818      	ldr	r0, [r3, #0]
  if (pFF[bMotor])
 80011a2:	4e54      	ldr	r6, [pc, #336]	; (80012f4 <TSK_HighFrequencyTask+0x170>)
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80011a4:	f005 fe28 	bl	8006df8 <STC_GetSpeedSensor>
 80011a8:	f005 fdce 	bl	8006d48 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[bMotor], &Iab);
 80011ac:	4669      	mov	r1, sp
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80011ae:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[bMotor], &Iab);
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f004 fa7f 	bl	80056b4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80011b6:	9800      	ldr	r0, [sp, #0]
 80011b8:	f003 fff6 	bl	80051a8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011bc:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80011be:	9001      	str	r0, [sp, #4]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011c0:	f004 f818 	bl	80051f4 <MCM_Park>
  Vqd.qV_Component1 = PI_Controller(pPIDIq[bMotor],
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <TSK_HighFrequencyTask+0x174>)
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component1) - Iqd.qI_Component1);
 80011c6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011ca:	9002      	str	r0, [sp, #8]
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component1) - Iqd.qI_Component1);
 80011cc:	b200      	sxth	r0, r0
  Vqd.qV_Component1 = PI_Controller(pPIDIq[bMotor],
 80011ce:	1a09      	subs	r1, r1, r0
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f004 f9c5 	bl	8005560 <PI_Controller>
  Vqd.qV_Component2 = PI_Controller(pPIDId[bMotor],
 80011d6:	4b49      	ldr	r3, [pc, #292]	; (80012fc <TSK_HighFrequencyTask+0x178>)
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component2) - Iqd.qI_Component2);
 80011d8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80011dc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  Vqd.qV_Component1 = PI_Controller(pPIDIq[bMotor],
 80011e0:	4680      	mov	r8, r0
  Vqd.qV_Component2 = PI_Controller(pPIDId[bMotor],
 80011e2:	1a89      	subs	r1, r1, r2
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f004 f9bb 	bl	8005560 <PI_Controller>
 80011ea:	4603      	mov	r3, r0
  if (pFF[bMotor])
 80011ec:	6830      	ldr	r0, [r6, #0]
 80011ee:	b148      	cbz	r0, 8001204 <TSK_HighFrequencyTask+0x80>
    Vqd = FF_VqdConditioning(pFF[bMotor],Vqd);
 80011f0:	f8ad 8010 	strh.w	r8, [sp, #16]
 80011f4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80011f8:	9904      	ldr	r1, [sp, #16]
 80011fa:	f006 fa49 	bl	8007690 <FF_VqdConditioning>
 80011fe:	fa0f f880 	sxth.w	r8, r0
 8001202:	1403      	asrs	r3, r0, #16
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 8001204:	4a3e      	ldr	r2, [pc, #248]	; (8001300 <TSK_HighFrequencyTask+0x17c>)
 8001206:	f8ad 3012 	strh.w	r3, [sp, #18]
 800120a:	f8ad 8010 	strh.w	r8, [sp, #16]
 800120e:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Vqd = Vqd;
 8001210:	8323      	strh	r3, [r4, #24]
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 8001212:	9904      	ldr	r1, [sp, #16]
  FOCVars[bMotor].Vqd = Vqd;
 8001214:	f8a4 8016 	strh.w	r8, [r4, #22]
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 8001218:	f003 fe10 	bl	8004e3c <Circle_Limitation>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800121c:	4629      	mov	r1, r5
 800121e:	f004 f85d 	bl	80052dc <MCM_Rev_Park>
 8001222:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[bMotor], Valphabeta);
 8001224:	4601      	mov	r1, r0
 8001226:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001228:	9303      	str	r3, [sp, #12]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[bMotor], Valphabeta);
 800122a:	f004 fa45 	bl	80056b8 <PWMC_SetPhaseVoltage>
 800122e:	4607      	mov	r7, r0
  FOCVars[bMotor].Iab = Iab;
 8001230:	9800      	ldr	r0, [sp, #0]
 8001232:	6020      	str	r0, [r4, #0]
  FOCVars[bMotor].Ialphabeta = Ialphabeta;
 8001234:	9801      	ldr	r0, [sp, #4]
 8001236:	6060      	str	r0, [r4, #4]
  if (pFF[bMotor])
 8001238:	6833      	ldr	r3, [r6, #0]
  FOCVars[bMotor].Iqd = Iqd;
 800123a:	9802      	ldr	r0, [sp, #8]
 800123c:	60e0      	str	r0, [r4, #12]
  FOCVars[bMotor].Valphabeta = Valphabeta;
 800123e:	9803      	ldr	r0, [sp, #12]
  FOCVars[bMotor].hElAngle = hElAngle;
 8001240:	8425      	strh	r5, [r4, #32]
  FOCVars[bMotor].Valphabeta = Valphabeta;
 8001242:	f8c4 001a 	str.w	r0, [r4, #26]
  if (pFF[bMotor])
 8001246:	b113      	cbz	r3, 800124e <TSK_HighFrequencyTask+0xca>
    FF_DataProcess(pFF[bMotor]);
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fa49 	bl	80076e0 <FF_DataProcess>
  if(hFOCreturn == MC_FOC_DURATION)
 800124e:	2f01      	cmp	r7, #1
 8001250:	d032      	beq.n	80012b8 <TSK_HighFrequencyTask+0x134>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 8001252:	482c      	ldr	r0, [pc, #176]	; (8001304 <TSK_HighFrequencyTask+0x180>)
 8001254:	f006 fe6a 	bl	8007f2c <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <TSK_HighFrequencyTask+0x184>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <TSK_HighFrequencyTask+0x188>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 800125c:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	f003 fde2 	bl	8004e2c <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001268:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800126a:	f8ad 001c 	strh.w	r0, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800126e:	4828      	ldr	r0, [pc, #160]	; (8001310 <TSK_HighFrequencyTask+0x18c>)
 8001270:	f006 faee 	bl	8007850 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <TSK_HighFrequencyTask+0x18c>)
 8001276:	f006 fc7b 	bl	8007b70 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800127a:	b1cc      	cbz	r4, 80012b0 <TSK_HighFrequencyTask+0x12c>
    hState = STM_GetState(&STM[M1]);
 800127c:	4819      	ldr	r0, [pc, #100]	; (80012e4 <TSK_HighFrequencyTask+0x160>)
 800127e:	f005 ff1b 	bl	80070b8 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001282:	1f03      	subs	r3, r0, #4
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d905      	bls.n	8001296 <TSK_HighFrequencyTask+0x112>
 800128a:	2813      	cmp	r0, #19
 800128c:	d003      	beq.n	8001296 <TSK_HighFrequencyTask+0x112>
}
 800128e:	2000      	movs	r0, #0
 8001290:	b008      	add	sp, #32
 8001292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);      
 8001296:	481e      	ldr	r0, [pc, #120]	; (8001310 <TSK_HighFrequencyTask+0x18c>)
 8001298:	f005 fd56 	bl	8006d48 <SPD_GetElAngle>
 800129c:	a908      	add	r1, sp, #32
 800129e:	f821 0d14 	strh.w	r0, [r1, #-20]!
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);  
 80012a2:	481c      	ldr	r0, [pc, #112]	; (8001314 <TSK_HighFrequencyTask+0x190>)
 80012a4:	f006 f8a8 	bl	80073f8 <VSS_CalcElAngle>
}
 80012a8:	2000      	movs	r0, #0
 80012aa:	b008      	add	sp, #32
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <TSK_HighFrequencyTask+0x18c>)
 80012b2:	f006 fd61 	bl	8007d78 <STO_ResetPLL>
 80012b6:	e7e1      	b.n	800127c <TSK_HighFrequencyTask+0xf8>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80012b8:	4639      	mov	r1, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <TSK_HighFrequencyTask+0x160>)
 80012be:	f005 fee1 	bl	8007084 <STM_FaultProcessing>
}
 80012c2:	2000      	movs	r0, #0
 80012c4:	b008      	add	sp, #32
 80012c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80012ca:	4d13      	ldr	r5, [pc, #76]	; (8001318 <TSK_HighFrequencyTask+0x194>)
 80012cc:	6828      	ldr	r0, [r5, #0]
 80012ce:	f005 fd35 	bl	8006d3c <REMNG_RampCompleted>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	f47f af62 	bne.w	800119c <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.qI_Component1 = REMNG_Calc(pREMNG[M1]);
 80012d8:	6828      	ldr	r0, [r5, #0]
 80012da:	f005 fc87 	bl	8006bec <REMNG_Calc>
 80012de:	8220      	strh	r0, [r4, #16]
 80012e0:	e75c      	b.n	800119c <TSK_HighFrequencyTask+0x18>
 80012e2:	bf00      	nop
 80012e4:	20000984 	.word	0x20000984
 80012e8:	200008e8 	.word	0x200008e8
 80012ec:	20000998 	.word	0x20000998
 80012f0:	200008d4 	.word	0x200008d4
 80012f4:	200008cc 	.word	0x200008cc
 80012f8:	200008dc 	.word	0x200008dc
 80012fc:	20000994 	.word	0x20000994
 8001300:	20000960 	.word	0x20000960
 8001304:	200003b4 	.word	0x200003b4
 8001308:	200008ec 	.word	0x200008ec
 800130c:	20000964 	.word	0x20000964
 8001310:	20000440 	.word	0x20000440
 8001314:	200005ec 	.word	0x200005ec
 8001318:	2000098c 	.word	0x2000098c

0800131c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
void TSK_HardwareFaultTask(void)
{
 800131c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3_1_F30X_SwitchOffPWM(pwmcHandle[M1]);
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <TSK_HardwareFaultTask+0x18>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f004 fc93 	bl	8005c4c <R3_1_F30X_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800132c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001330:	f005 bea8 	b.w	8007084 <STM_FaultProcessing>
 8001334:	200008d4 	.word	0x200008d4
 8001338:	20000984 	.word	0x20000984

0800133c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
void mc_lock_pins (void)
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800133e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <mc_lock_pins+0xd4>)
 8001344:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134a:	61d1      	str	r1, [r2, #28]
 800134c:	b08d      	sub	sp, #52	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800134e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001350:	69d3      	ldr	r3, [r2, #28]
 8001352:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001354:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001358:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 800135c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800135e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001360:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001362:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001364:	69d3      	ldr	r3, [r2, #28]
 8001366:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001368:	f44f 3084 	mov.w	r0, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 800136c:	f44f 6500 	mov.w	r5, #2048	; 0x800
  (void) temp;
 8001370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001372:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001374:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001376:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001378:	69d3      	ldr	r3, [r2, #28]
 800137a:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800137c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001380:	f44f 6480 	mov.w	r4, #1024	; 0x400
  (void) temp;
 8001384:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001386:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001388:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800138a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <mc_lock_pins+0xd8>)
  temp = READ_REG(GPIOx->LCKR);
 800138e:	69d6      	ldr	r6, [r2, #28]
 8001390:	9608      	str	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001392:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001396:	f44f 3688 	mov.w	r6, #69632	; 0x11000
  (void) temp;
 800139a:	f8dd e020 	ldr.w	lr, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800139e:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013a0:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a2:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013a4:	69de      	ldr	r6, [r3, #28]
 80013a6:	9607      	str	r6, [sp, #28]
  (void) temp;
 80013a8:	9e07      	ldr	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013aa:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ac:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ae:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013b0:	69d8      	ldr	r0, [r3, #28]
 80013b2:	9006      	str	r0, [sp, #24]
  (void) temp;
 80013b4:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ba:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013bc:	69d9      	ldr	r1, [r3, #28]
 80013be:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c0:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c2:	4915      	ldr	r1, [pc, #84]	; (8001418 <mc_lock_pins+0xdc>)
  (void) temp;
 80013c4:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ca:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013cc:	69d0      	ldr	r0, [r2, #28]
 80013ce:	9004      	str	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013d0:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  (void) temp;
 80013d6:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013da:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013dc:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013de:	69d2      	ldr	r2, [r2, #28]
 80013e0:	9203      	str	r2, [sp, #12]
  (void) temp;
 80013e2:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013e6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ea:	69da      	ldr	r2, [r3, #28]
 80013ec:	9202      	str	r2, [sp, #8]
  (void) temp;
 80013ee:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013f2:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	9201      	str	r2, [sp, #4]
  (void) temp;
 80013fa:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <mc_lock_pins+0xe0>)
 80013fe:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001400:	2104      	movs	r1, #4
 8001402:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001404:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	9300      	str	r3, [sp, #0]
  (void) temp;
 800140a:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 800140c:	b00d      	add	sp, #52	; 0x34
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	00010100 	.word	0x00010100
 8001414:	48000800 	.word	0x48000800
 8001418:	00010002 	.word	0x00010002
 800141c:	00010004 	.word	0x00010004

08001420 <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001420:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001422:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8001424:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001426:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001428:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001430:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    MCP_WaitNextFrame(pHandle);
}
 8001434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001438:	4718      	bx	r3
 800143a:	bf00      	nop

0800143c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001440:	4616      	mov	r6, r2
  bool bNoError = false; // Default is error
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001442:	094a      	lsrs	r2, r1, #5
{
 8001444:	b08c      	sub	sp, #48	; 0x30
 8001446:	460c      	mov	r4, r1
 8001448:	4698      	mov	r8, r3
 800144a:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 800144c:	d111      	bne.n	8001472 <MCP_ReceivedFrame+0x36>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800144e:	2c0c      	cmp	r4, #12
 8001450:	f200 821f 	bhi.w	8001892 <MCP_ReceivedFrame+0x456>
 8001454:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001458:	002b01fd 	.word	0x002b01fd
 800145c:	013f00b3 	.word	0x013f00b3
 8001460:	021d021d 	.word	0x021d021d
 8001464:	0174014a 	.word	0x0174014a
 8001468:	01b80187 	.word	0x01b80187
 800146c:	01ef01d9 	.word	0x01ef01d9
 8001470:	0200      	.short	0x0200
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001472:	1e57      	subs	r7, r2, #1
 8001474:	463a      	mov	r2, r7
 8001476:	2100      	movs	r1, #0
 8001478:	f000 ff1a 	bl	80022b0 <UI_SetReg>
 800147c:	b960      	cbnz	r0, 8001498 <MCP_ReceivedFrame+0x5c>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800147e:	ac0c      	add	r4, sp, #48	; 0x30
 8001480:	230b      	movs	r3, #11
 8001482:	f804 3d22 	strb.w	r3, [r4, #-34]!
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001486:	4622      	mov	r2, r4
 8001488:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800148a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800148c:	2301      	movs	r3, #1
 800148e:	21ff      	movs	r1, #255	; 0xff
 8001490:	47a0      	blx	r4
    }
  }
}
 8001492:	b00c      	add	sp, #48	; 0x30
 8001494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pHandle->pDAC)
 8001498:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 800149c:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d0d4      	beq.n	800144e <MCP_ReceivedFrame+0x12>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 80014a4:	463a      	mov	r2, r7
 80014a6:	2100      	movs	r1, #0
 80014a8:	f000 ff02 	bl	80022b0 <UI_SetReg>
 80014ac:	e7cf      	b.n	800144e <MCP_ReceivedFrame+0x12>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80014ae:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80014b0:	2305      	movs	r3, #5
 80014b2:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80014b6:	297e      	cmp	r1, #126	; 0x7e
 80014b8:	f200 826d 	bhi.w	8001996 <MCP_ReceivedFrame+0x55a>
 80014bc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80014c0:	026b025e 	.word	0x026b025e
 80014c4:	0259026b 	.word	0x0259026b
 80014c8:	0251026b 	.word	0x0251026b
 80014cc:	02510251 	.word	0x02510251
 80014d0:	02510251 	.word	0x02510251
 80014d4:	02510251 	.word	0x02510251
 80014d8:	02510251 	.word	0x02510251
 80014dc:	02510251 	.word	0x02510251
 80014e0:	02430243 	.word	0x02430243
 80014e4:	026b026b 	.word	0x026b026b
 80014e8:	02510251 	.word	0x02510251
 80014ec:	02510251 	.word	0x02510251
 80014f0:	026b0251 	.word	0x026b0251
 80014f4:	026b026b 	.word	0x026b026b
 80014f8:	0235023c 	.word	0x0235023c
 80014fc:	026b026b 	.word	0x026b026b
 8001500:	026b026b 	.word	0x026b026b
 8001504:	026b026b 	.word	0x026b026b
 8001508:	026b026b 	.word	0x026b026b
 800150c:	026b026b 	.word	0x026b026b
 8001510:	026b026b 	.word	0x026b026b
 8001514:	026b026b 	.word	0x026b026b
 8001518:	026b026b 	.word	0x026b026b
 800151c:	026b026b 	.word	0x026b026b
 8001520:	026b026b 	.word	0x026b026b
 8001524:	026b026b 	.word	0x026b026b
 8001528:	026b026b 	.word	0x026b026b
 800152c:	026b026b 	.word	0x026b026b
 8001530:	026b026b 	.word	0x026b026b
 8001534:	026b026b 	.word	0x026b026b
 8001538:	026b026b 	.word	0x026b026b
 800153c:	026b026b 	.word	0x026b026b
 8001540:	0251026b 	.word	0x0251026b
 8001544:	026b026b 	.word	0x026b026b
 8001548:	026b026b 	.word	0x026b026b
 800154c:	02430243 	.word	0x02430243
 8001550:	026b0243 	.word	0x026b0243
 8001554:	026b026b 	.word	0x026b026b
 8001558:	026b026b 	.word	0x026b026b
 800155c:	0251026b 	.word	0x0251026b
 8001560:	026b026b 	.word	0x026b026b
 8001564:	0251026b 	.word	0x0251026b
 8001568:	02510251 	.word	0x02510251
 800156c:	02510251 	.word	0x02510251
 8001570:	02510251 	.word	0x02510251
 8001574:	0243026b 	.word	0x0243026b
 8001578:	026b026b 	.word	0x026b026b
 800157c:	026b026b 	.word	0x026b026b
 8001580:	0251026b 	.word	0x0251026b
 8001584:	026b026b 	.word	0x026b026b
 8001588:	02510251 	.word	0x02510251
 800158c:	026b026b 	.word	0x026b026b
 8001590:	026b026b 	.word	0x026b026b
 8001594:	026b026b 	.word	0x026b026b
 8001598:	026b026b 	.word	0x026b026b
 800159c:	026b026b 	.word	0x026b026b
 80015a0:	026b026b 	.word	0x026b026b
 80015a4:	026b026b 	.word	0x026b026b
 80015a8:	02430259 	.word	0x02430259
 80015ac:	02430243 	.word	0x02430243
 80015b0:	02430243 	.word	0x02430243
 80015b4:	026b026b 	.word	0x026b026b
 80015b8:	0243026b 	.word	0x0243026b
 80015bc:	0243      	.short	0x0243
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015be:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80015c6:	2982      	cmp	r1, #130	; 0x82
 80015c8:	f200 8143 	bhi.w	8001852 <MCP_ReceivedFrame+0x416>
 80015cc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80015d0:	019301a0 	.word	0x019301a0
 80015d4:	01a001a0 	.word	0x01a001a0
 80015d8:	01860193 	.word	0x01860193
 80015dc:	01860186 	.word	0x01860186
 80015e0:	01860186 	.word	0x01860186
 80015e4:	01860186 	.word	0x01860186
 80015e8:	01860186 	.word	0x01860186
 80015ec:	01860186 	.word	0x01860186
 80015f0:	01860186 	.word	0x01860186
 80015f4:	01860186 	.word	0x01860186
 80015f8:	01860186 	.word	0x01860186
 80015fc:	01860186 	.word	0x01860186
 8001600:	01860186 	.word	0x01860186
 8001604:	01860186 	.word	0x01860186
 8001608:	01660176 	.word	0x01660176
 800160c:	01860193 	.word	0x01860193
 8001610:	01860186 	.word	0x01860186
 8001614:	014101a0 	.word	0x014101a0
 8001618:	01410141 	.word	0x01410141
 800161c:	01410141 	.word	0x01410141
 8001620:	01410141 	.word	0x01410141
 8001624:	01410141 	.word	0x01410141
 8001628:	01410141 	.word	0x01410141
 800162c:	01410141 	.word	0x01410141
 8001630:	01410141 	.word	0x01410141
 8001634:	01410141 	.word	0x01410141
 8001638:	01410141 	.word	0x01410141
 800163c:	01410141 	.word	0x01410141
 8001640:	01410141 	.word	0x01410141
 8001644:	01410141 	.word	0x01410141
 8001648:	01410141 	.word	0x01410141
 800164c:	01410141 	.word	0x01410141
 8001650:	01860141 	.word	0x01860141
 8001654:	01410141 	.word	0x01410141
 8001658:	01410141 	.word	0x01410141
 800165c:	01930193 	.word	0x01930193
 8001660:	01860193 	.word	0x01860193
 8001664:	01860186 	.word	0x01860186
 8001668:	01a00186 	.word	0x01a00186
 800166c:	01860193 	.word	0x01860193
 8001670:	01860186 	.word	0x01860186
 8001674:	01860186 	.word	0x01860186
 8001678:	01860186 	.word	0x01860186
 800167c:	01860186 	.word	0x01860186
 8001680:	01860186 	.word	0x01860186
 8001684:	019301a0 	.word	0x019301a0
 8001688:	01860141 	.word	0x01860141
 800168c:	01860186 	.word	0x01860186
 8001690:	01860186 	.word	0x01860186
 8001694:	01410141 	.word	0x01410141
 8001698:	01860186 	.word	0x01860186
 800169c:	01a001a0 	.word	0x01a001a0
 80016a0:	01930193 	.word	0x01930193
 80016a4:	01930193 	.word	0x01930193
 80016a8:	01a00193 	.word	0x01a00193
 80016ac:	01860186 	.word	0x01860186
 80016b0:	01410193 	.word	0x01410193
 80016b4:	01860186 	.word	0x01860186
 80016b8:	019301a0 	.word	0x019301a0
 80016bc:	01930193 	.word	0x01930193
 80016c0:	01930193 	.word	0x01930193
 80016c4:	01930193 	.word	0x01930193
 80016c8:	01930193 	.word	0x01930193
 80016cc:	01930193 	.word	0x01930193
 80016d0:	014101a0 	.word	0x014101a0
 80016d4:	01a0      	.short	0x01a0
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80016d6:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 80016d8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80016da:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80016de:	4628      	mov	r0, r5
 80016e0:	f001 fa34 	bl	8002b4c <UI_ExecCmd>
    if (bNoError)
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f000 80b4 	beq.w	8001852 <MCP_ReceivedFrame+0x416>
 80016ea:	e09b      	b.n	8001824 <MCP_ReceivedFrame+0x3e8>
 80016ec:	ac04      	add	r4, sp, #16
 80016ee:	2100      	movs	r1, #0
 80016f0:	4620      	mov	r0, r4
 80016f2:	2220      	movs	r2, #32
 80016f4:	f006 fc74 	bl	8007fe0 <memset>
 80016f8:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 80016fc:	f10d 0012 	add.w	r0, sp, #18
 8001700:	1e71      	subs	r1, r6, #1
  switch (Code)
 8001702:	2300      	movs	r3, #0
 8001704:	e005      	b.n	8001712 <MCP_ReceivedFrame+0x2d6>
 8001706:	3301      	adds	r3, #1
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001708:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 800170a:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800170e:	f000 8147 	beq.w	80019a0 <MCP_ReceivedFrame+0x564>
 8001712:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001716:	2a09      	cmp	r2, #9
 8001718:	d1f5      	bne.n	8001706 <MCP_ReceivedFrame+0x2ca>
 800171a:	1d59      	adds	r1, r3, #5
 800171c:	1dda      	adds	r2, r3, #7
 800171e:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001720:	5c71      	ldrb	r1, [r6, r1]
 8001722:	f88d 1010 	strb.w	r1, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001726:	5cb2      	ldrb	r2, [r6, r2]
 8001728:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 800172c:	5cf3      	ldrb	r3, [r6, r3]
 800172e:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001732:	4622      	mov	r2, r4
 8001734:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001736:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001738:	2320      	movs	r3, #32
 800173a:	21f0      	movs	r1, #240	; 0xf0
 800173c:	47a0      	blx	r4
    break;
 800173e:	e071      	b.n	8001824 <MCP_ReceivedFrame+0x3e8>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001740:	7877      	ldrb	r7, [r6, #1]
 8001742:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001744:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001746:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001748:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800174a:	78f1      	ldrb	r1, [r6, #3]
 800174c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001750:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001754:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001758:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800175c:	b292      	uxth	r2, r2
 800175e:	4628      	mov	r0, r5
 8001760:	f001 fa32 	bl	8002bc8 <UI_ExecSpeedRamp>
    break;
 8001764:	e7be      	b.n	80016e4 <MCP_ReceivedFrame+0x2a8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeed01Hz, &FinalTorque);
 8001766:	f10d 040e 	add.w	r4, sp, #14
 800176a:	7831      	ldrb	r1, [r6, #0]
 800176c:	9400      	str	r4, [sp, #0]
 800176e:	ab03      	add	r3, sp, #12
 8001770:	f10d 020a 	add.w	r2, sp, #10
 8001774:	4628      	mov	r0, r5
 8001776:	f001 fa39 	bl	8002bec <UI_GetRevupData>
      rpm = FinalMecSpeed01Hz * 6;
 800177a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 800177e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001782:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8001786:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = FinalMecSpeed01Hz * 6;
 800178a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800178e:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001790:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001792:	121e      	asrs	r6, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001794:	f363 0207 	bfi	r2, r3, #0, #8
 8001798:	f366 220f 	bfi	r2, r6, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 800179c:	141e      	asrs	r6, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 800179e:	f366 4217 	bfi	r2, r6, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 80017a2:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 80017a4:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80017a8:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80017aa:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 80017ac:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80017ae:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 80017b2:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80017b6:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80017ba:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80017bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80017be:	2308      	movs	r3, #8
 80017c0:	aa04      	add	r2, sp, #16
 80017c2:	21f0      	movs	r1, #240	; 0xf0
 80017c4:	47b0      	blx	r6
    break;
 80017c6:	e65e      	b.n	8001486 <MCP_ReceivedFrame+0x4a>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80017c8:	78b4      	ldrb	r4, [r6, #2]
 80017ca:	7873      	ldrb	r3, [r6, #1]
 80017cc:	78f0      	ldrb	r0, [r6, #3]
 80017ce:	7931      	ldrb	r1, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80017d0:	f896 e006 	ldrb.w	lr, [r6, #6]
      hFinalMecSpeed01Hz = rpm / 6;
 80017d4:	4a78      	ldr	r2, [pc, #480]	; (80019b8 <MCP_ReceivedFrame+0x57c>)
      hDurationms = buffer[7] + (buffer[8] << 8);
 80017d6:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80017d8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80017dc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80017e0:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80017e2:	79f4      	ldrb	r4, [r6, #7]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80017e4:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80017e8:	eb00 200e 	add.w	r0, r0, lr, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeed01Hz, hFinalTorque );
 80017ec:	7831      	ldrb	r1, [r6, #0]
      hFinalMecSpeed01Hz = rpm / 6;
 80017ee:	fb82 6203 	smull	r6, r2, r2, r3
 80017f2:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeed01Hz, hFinalTorque );
 80017f6:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80017f8:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeed01Hz, hFinalTorque );
 80017fc:	9000      	str	r0, [sp, #0]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	b292      	uxth	r2, r2
 8001802:	4628      	mov	r0, r5
 8001804:	f001 fa10 	bl	8002c28 <UI_SetRevupData>
    break;
 8001808:	e76c      	b.n	80016e4 <MCP_ReceivedFrame+0x2a8>
      hIdRef = buffer[2] + (buffer[3] << 8);
 800180a:	78f0      	ldrb	r0, [r6, #3]
 800180c:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 800180e:	7873      	ldrb	r3, [r6, #1]
 8001810:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001812:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001816:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800181a:	b212      	sxth	r2, r2
 800181c:	b209      	sxth	r1, r1
 800181e:	4628      	mov	r0, r5
 8001820:	f001 fa1c 	bl	8002c5c <UI_SetCurrentReferences>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001824:	2300      	movs	r3, #0
 8001826:	461a      	mov	r2, r3
 8001828:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800182a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800182c:	21f0      	movs	r1, #240	; 0xf0
 800182e:	47a0      	blx	r4
}
 8001830:	b00c      	add	sp, #48	; 0x30
 8001832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001836:	4c61      	ldr	r4, [pc, #388]	; (80019bc <MCP_ReceivedFrame+0x580>)
      stepList.data = buffer;
 8001838:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800183a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800183c:	4621      	mov	r1, r4
 800183e:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001840:	f88d 8014 	strb.w	r8, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001844:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001848:	f001 fa1a 	bl	8002c80 <UI_GetMPInfo>
      if (bNoError)
 800184c:	2800      	cmp	r0, #0
 800184e:	f040 80ab 	bne.w	80019a8 <MCP_ReceivedFrame+0x56c>
 8001852:	f10d 040e 	add.w	r4, sp, #14
 8001856:	e616      	b.n	8001486 <MCP_ReceivedFrame+0x4a>
 8001858:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 800185c:	ac04      	add	r4, sp, #16
 800185e:	3a01      	subs	r2, #1
  switch (Code)
 8001860:	4623      	mov	r3, r4
 8001862:	ae0c      	add	r6, sp, #48	; 0x30
 8001864:	e004      	b.n	8001870 <MCP_ReceivedFrame+0x434>
        outBuff[i] = pHandle->s_fwVer[i];
 8001866:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800186a:	429e      	cmp	r6, r3
 800186c:	f43f af61 	beq.w	8001732 <MCP_ReceivedFrame+0x2f6>
 8001870:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001874:	1b18      	subs	r0, r3, r4
 8001876:	b2c0      	uxtb	r0, r0
 8001878:	2900      	cmp	r1, #0
 800187a:	d1f4      	bne.n	8001866 <MCP_ReceivedFrame+0x42a>
      for (; i < 32; i++)
 800187c:	281f      	cmp	r0, #31
 800187e:	f63f af58 	bhi.w	8001732 <MCP_ReceivedFrame+0x2f6>
        outBuff[i] = 0;
 8001882:	f1c0 021f 	rsb	r2, r0, #31
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	3201      	adds	r2, #1
 800188a:	4420      	add	r0, r4
 800188c:	f006 fba8 	bl	8007fe0 <memset>
 8001890:	e74f      	b.n	8001732 <MCP_ReceivedFrame+0x2f6>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001892:	ac0c      	add	r4, sp, #48	; 0x30
 8001894:	2301      	movs	r3, #1
 8001896:	f804 3d22 	strb.w	r3, [r4, #-34]!
    break;
 800189a:	e5f4      	b.n	8001486 <MCP_ReceivedFrame+0x4a>
          if (pHandle->pDAC)
 800189c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d0d6      	beq.n	8001852 <MCP_ReceivedFrame+0x416>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80018a4:	2101      	movs	r1, #1
 80018a6:	f001 f9f9 	bl	8002c9c <UI_GetDAC>
 80018aa:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80018ac:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80018ae:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80018b2:	2301      	movs	r3, #1
 80018b4:	21f0      	movs	r1, #240	; 0xf0
 80018b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018b8:	47a0      	blx	r4
 80018ba:	e7b3      	b.n	8001824 <MCP_ReceivedFrame+0x3e8>
          if (pHandle->pDAC)
 80018bc:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d0c6      	beq.n	8001852 <MCP_ReceivedFrame+0x416>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 80018c4:	2100      	movs	r1, #0
 80018c6:	f001 f9e9 	bl	8002c9c <UI_GetDAC>
 80018ca:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80018cc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 80018ce:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80018d2:	2301      	movs	r3, #1
 80018d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018d6:	21f0      	movs	r1, #240	; 0xf0
 80018d8:	47a0      	blx	r4
 80018da:	e5da      	b.n	8001492 <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg(&pHandle->_Super, bRegID);
 80018dc:	4628      	mov	r0, r5
 80018de:	f000 fe81 	bl	80025e4 <UI_GetReg>
 80018e2:	9004      	str	r0, [sp, #16]
          if (value != (int32_t)(GUI_ERROR_CODE))
 80018e4:	3001      	adds	r0, #1
 80018e6:	d0b4      	beq.n	8001852 <MCP_ReceivedFrame+0x416>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80018e8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80018ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018ec:	2302      	movs	r3, #2
 80018ee:	aa04      	add	r2, sp, #16
 80018f0:	21f0      	movs	r1, #240	; 0xf0
 80018f2:	47a0      	blx	r4
 80018f4:	e5cd      	b.n	8001492 <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg(&pHandle->_Super, bRegID);
 80018f6:	4628      	mov	r0, r5
 80018f8:	f000 fe74 	bl	80025e4 <UI_GetReg>
 80018fc:	9004      	str	r0, [sp, #16]
          if (value != (int32_t)(GUI_ERROR_CODE))
 80018fe:	3001      	adds	r0, #1
 8001900:	d0a7      	beq.n	8001852 <MCP_ReceivedFrame+0x416>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001902:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001904:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001906:	2304      	movs	r3, #4
 8001908:	aa04      	add	r2, sp, #16
 800190a:	21f0      	movs	r1, #240	; 0xf0
 800190c:	47a0      	blx	r4
 800190e:	e5c0      	b.n	8001492 <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg(&pHandle->_Super, bRegID);
 8001910:	4628      	mov	r0, r5
 8001912:	f000 fe67 	bl	80025e4 <UI_GetReg>
 8001916:	9004      	str	r0, [sp, #16]
          if (value != (int32_t)(GUI_ERROR_CODE))
 8001918:	3001      	adds	r0, #1
 800191a:	d09a      	beq.n	8001852 <MCP_ReceivedFrame+0x416>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800191c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800191e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001920:	2301      	movs	r3, #1
 8001922:	aa04      	add	r2, sp, #16
 8001924:	21f0      	movs	r1, #240	; 0xf0
 8001926:	47a0      	blx	r4
 8001928:	e5b3      	b.n	8001492 <MCP_ReceivedFrame+0x56>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 800192a:	7872      	ldrb	r2, [r6, #1]
 800192c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001930:	2101      	movs	r1, #1
 8001932:	f001 f9af 	bl	8002c94 <UI_SetDAC>
        break;
 8001936:	e775      	b.n	8001824 <MCP_ReceivedFrame+0x3e8>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001938:	7872      	ldrb	r2, [r6, #1]
 800193a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800193e:	2100      	movs	r1, #0
 8001940:	f001 f9a8 	bl	8002c94 <UI_SetDAC>
        break;
 8001944:	e76e      	b.n	8001824 <MCP_ReceivedFrame+0x3e8>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001946:	78b4      	ldrb	r4, [r6, #2]
 8001948:	7873      	ldrb	r3, [r6, #1]
 800194a:	78f0      	ldrb	r0, [r6, #3]
 800194c:	7932      	ldrb	r2, [r6, #4]
 800194e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001952:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001956:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 800195a:	4628      	mov	r0, r5
 800195c:	f000 fca8 	bl	80022b0 <UI_SetReg>
        break;
 8001960:	e6c0      	b.n	80016e4 <MCP_ReceivedFrame+0x2a8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001962:	78b2      	ldrb	r2, [r6, #2]
 8001964:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001966:	4628      	mov	r0, r5
 8001968:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800196c:	f000 fca0 	bl	80022b0 <UI_SetReg>
        break;
 8001970:	e6b8      	b.n	80016e4 <MCP_ReceivedFrame+0x2a8>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001972:	7872      	ldrb	r2, [r6, #1]
 8001974:	4628      	mov	r0, r5
 8001976:	f000 fc9b 	bl	80022b0 <UI_SetReg>
        break;
 800197a:	e6b3      	b.n	80016e4 <MCP_ReceivedFrame+0x2a8>
          int32_t wValue = (int32_t)(buffer[1]);
 800197c:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 800197e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001982:	4622      	mov	r2, r4
 8001984:	2100      	movs	r1, #0
 8001986:	f000 fc93 	bl	80022b0 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800198a:	4622      	mov	r2, r4
 800198c:	2100      	movs	r1, #0
 800198e:	4628      	mov	r0, r5
 8001990:	f000 fc8e 	bl	80022b0 <UI_SetReg>
        break;
 8001994:	e6a6      	b.n	80016e4 <MCP_ReceivedFrame+0x2a8>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001996:	ac0c      	add	r4, sp, #48	; 0x30
 8001998:	2302      	movs	r3, #2
 800199a:	f804 3d22 	strb.w	r3, [r4, #-34]!
        break;
 800199e:	e572      	b.n	8001486 <MCP_ReceivedFrame+0x4a>
 80019a0:	2326      	movs	r3, #38	; 0x26
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	2122      	movs	r1, #34	; 0x22
 80019a6:	e6bb      	b.n	8001720 <MCP_ReceivedFrame+0x2e4>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80019a8:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80019aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80019ac:	7923      	ldrb	r3, [r4, #4]
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	21f0      	movs	r1, #240	; 0xf0
 80019b2:	47b0      	blx	r6
 80019b4:	e56d      	b.n	8001492 <MCP_ReceivedFrame+0x56>
 80019b6:	bf00      	nop
 80019b8:	2aaaaaab 	.word	0x2aaaaaab
 80019bc:	20000790 	.word	0x20000790

080019c0 <MCP_OnTimeOut>:
 80019c0:	b510      	push	{r4, lr}
 80019c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80019c4:	4604      	mov	r4, r0
 80019c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80019c8:	4798      	blx	r3
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
 80019d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019d8:	4718      	bx	r3
 80019da:	bf00      	nop

080019dc <MCP_Init>:
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	4604      	mov	r4, r0
 80019e2:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 80019e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 80019e6:	6301      	str	r1, [r0, #48]	; 0x30
  FCP_SetClient( pFCP, pHandle,
 80019e8:	4d0e      	ldr	r5, [pc, #56]	; (8001a24 <MCP_Init+0x48>)
  pHandle->pDAC = pDAC;
 80019ea:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 80019ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019f0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 80019f4:	4608      	mov	r0, r1
{
 80019f6:	4617      	mov	r7, r2
  FCP_SetClient( pFCP, pHandle,
 80019f8:	4621      	mov	r1, r4
 80019fa:	9500      	str	r5, [sp, #0]
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <MCP_Init+0x4c>)
{
 80019fe:	9d08      	ldr	r5, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <MCP_Init+0x50>)
 8001a02:	f003 faab 	bl	8004f5c <FCP_SetClient>
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001a06:	6b20      	ldr	r0, [r4, #48]	; 0x30
  pHandle->fFcpSend = fFcpSend;
 8001a08:	6367      	str	r7, [r4, #52]	; 0x34
  pHandle->fFcpReceive = fFcpReceive;
 8001a0a:	63a6      	str	r6, [r4, #56]	; 0x38
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001a0c:	63e5      	str	r5, [r4, #60]	; 0x3c
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001a0e:	47a8      	blx	r5
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001a16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8001a1a:	b003      	add	sp, #12
 8001a1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001a20:	4718      	bx	r3
 8001a22:	bf00      	nop
 8001a24:	080019c1 	.word	0x080019c1
 8001a28:	0800143d 	.word	0x0800143d
 8001a2c:	08001421 	.word	0x08001421

08001a30 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
void MX_MotorControl_Init(void) 
{
 8001a30:	b530      	push	{r4, r5, lr}
 8001a32:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001a34:	f002 fbca 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_MotorControl_Init+0x38>)

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001a3a:	4d0c      	ldr	r5, [pc, #48]	; (8001a6c <MX_MotorControl_Init+0x3c>)
 8001a3c:	4c0c      	ldr	r4, [pc, #48]	; (8001a70 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001a3e:	fba3 3000 	umull	r3, r0, r3, r0
 8001a42:	09c0      	lsrs	r0, r0, #7
 8001a44:	f001 fe96 	bl	8003774 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7fe fdca 	bl	80005e4 <MCboot>
  mc_lock_pins();
 8001a50:	f7ff fc74 	bl	800133c <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_MotorControl_Init+0x44>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4622      	mov	r2, r4
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_MotorControl_Init+0x48>)
 8001a60:	f000 fb5c 	bl	800211c <UI_TaskInit>
}
 8001a64:	b003      	add	sp, #12
 8001a66:	bd30      	pop	{r4, r5, pc}
 8001a68:	10624dd3 	.word	0x10624dd3
 8001a6c:	200009a0 	.word	0x200009a0
 8001a70:	2000099c 	.word	0x2000099c
 8001a74:	0800805c 	.word	0x0800805c
 8001a78:	20000758 	.word	0x20000758

08001a7c <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001a7e:	4a5f      	ldr	r2, [pc, #380]	; (8001bfc <RCM_RegisterRegConv+0x180>)
 8001a80:	7901      	ldrb	r1, [r0, #4]
 8001a82:	6813      	ldr	r3, [r2, #0]
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
      }
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001a84:	791d      	ldrb	r5, [r3, #4]
{
 8001a86:	4604      	mov	r4, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	20ff      	movne	r0, #255	; 0xff
 8001a8e:	2000      	moveq	r0, #0
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001a90:	428d      	cmp	r5, r1
 8001a92:	f000 808a 	beq.w	8001baa <RCM_RegisterRegConv+0x12e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001a96:	6853      	ldr	r3, [r2, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a2 	beq.w	8001be2 <RCM_RegisterRegConv+0x166>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001a9e:	791d      	ldrb	r5, [r3, #4]
 8001aa0:	428d      	cmp	r5, r1
 8001aa2:	f000 8089 	beq.w	8001bb8 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001aa6:	6893      	ldr	r3, [r2, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 809f 	beq.w	8001bec <RCM_RegisterRegConv+0x170>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001aae:	791d      	ldrb	r5, [r3, #4]
 8001ab0:	428d      	cmp	r5, r1
 8001ab2:	f000 8088 	beq.w	8001bc6 <RCM_RegisterRegConv+0x14a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001ab6:	68d3      	ldr	r3, [r2, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 809b 	beq.w	8001bf4 <RCM_RegisterRegConv+0x178>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001abe:	791d      	ldrb	r5, [r3, #4]
 8001ac0:	428d      	cmp	r5, r1
 8001ac2:	f000 8087 	beq.w	8001bd4 <RCM_RegisterRegConv+0x158>
         handle =i; /* Reuse the same handle */
         i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
        }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001ac6:	2803      	cmp	r0, #3
 8001ac8:	d85f      	bhi.n	8001b8a <RCM_RegisterRegConv+0x10e>
 8001aca:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001acc:	689d      	ldr	r5, [r3, #8]
    {    
      RCM_handle_array [handle] = regConv;
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001ace:	4e4c      	ldr	r6, [pc, #304]	; (8001c00 <RCM_RegisterRegConv+0x184>)
      RCM_handle_array [handle] = regConv;
 8001ad0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f846 2030 	str.w	r2, [r6, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001ada:	07ea      	lsls	r2, r5, #31
 8001adc:	d41e      	bmi.n	8001b1c <RCM_RegisterRegConv+0xa0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001ade:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001ae0:	2504      	movs	r5, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001ae2:	f022 0204 	bic.w	r2, r2, #4
 8001ae6:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001ae8:	601d      	str	r5, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001aea:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001aec:	2520      	movs	r5, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001aee:	f022 0220 	bic.w	r2, r2, #32
 8001af2:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001af4:	601d      	str	r5, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001afc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001b00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b04:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001b06:	689a      	ldr	r2, [r3, #8]
       LL_ADC_ClearFlag_EOC(regConv->regADC);
       LL_ADC_DisableIT_JEOC(regConv->regADC);
       LL_ADC_ClearFlag_JEOC(regConv->regADC);

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )  
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	dbfc      	blt.n	8001b06 <RCM_RegisterRegConv+0x8a>
  MODIFY_REG(ADCx->CR,
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b12:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001b1e:	2909      	cmp	r1, #9
 8001b20:	f022 020f 	bic.w	r2, r2, #15
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
 8001b26:	d832      	bhi.n	8001b8e <RCM_RegisterRegConv+0x112>
 8001b28:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8001b2c:	068a      	lsls	r2, r1, #26
 8001b2e:	2501      	movs	r5, #1
 8001b30:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8001b34:	fa05 f101 	lsl.w	r1, r5, r1
 8001b38:	430a      	orrs	r2, r1
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001b3e:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001b42:	fab7 f187 	clz	r1, r7
 8001b46:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001b4a:	40cf      	lsrs	r7, r1
 8001b4c:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8001b4e:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001b52:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8001b56:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001b5a:	fa91 f6a1 	rbit	r6, r1
 8001b5e:	fab6 f686 	clz	r6, r6
 8001b62:	fa91 f1a1 	rbit	r1, r1
 8001b66:	f04f 0e07 	mov.w	lr, #7
 8001b6a:	68a4      	ldr	r4, [r4, #8]
 8001b6c:	fab1 f181 	clz	r1, r1
 8001b70:	fa22 f606 	lsr.w	r6, r2, r6
 8001b74:	fa0e f606 	lsl.w	r6, lr, r6
 8001b78:	40ca      	lsrs	r2, r1
 8001b7a:	fa04 f102 	lsl.w	r1, r4, r2
 8001b7e:	ea25 0206 	bic.w	r2, r5, r6
 8001b82:	430a      	orrs	r2, r1
 8001b84:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
 8001b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8a:	20ff      	movs	r0, #255	; 0xff
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	408a      	lsls	r2, r1
 8001b92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b96:	2503      	movs	r5, #3
 8001b98:	f06f 061d 	mvn.w	r6, #29
 8001b9c:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8001ba0:	fb15 6101 	smlabb	r1, r5, r1, r6
 8001ba4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001ba8:	e7c7      	b.n	8001b3a <RCM_RegisterRegConv+0xbe>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001baa:	681d      	ldr	r5, [r3, #0]
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	42ab      	cmp	r3, r5
 8001bb0:	f47f af71 	bne.w	8001a96 <RCM_RegisterRegConv+0x1a>
  uint8_t i=0;
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	e789      	b.n	8001acc <RCM_RegisterRegConv+0x50>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001bb8:	681d      	ldr	r5, [r3, #0]
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	429d      	cmp	r5, r3
 8001bbe:	f47f af72 	bne.w	8001aa6 <RCM_RegisterRegConv+0x2a>
      i++;
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	e782      	b.n	8001acc <RCM_RegisterRegConv+0x50>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001bc6:	681d      	ldr	r5, [r3, #0]
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	429d      	cmp	r5, r3
 8001bcc:	f47f af73 	bne.w	8001ab6 <RCM_RegisterRegConv+0x3a>
      i++;
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	e77b      	b.n	8001acc <RCM_RegisterRegConv+0x50>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001bd4:	681d      	ldr	r5, [r3, #0]
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	429d      	cmp	r5, r3
 8001bda:	f47f af74 	bne.w	8001ac6 <RCM_RegisterRegConv+0x4a>
      i++;
 8001bde:	2003      	movs	r0, #3
 8001be0:	e774      	b.n	8001acc <RCM_RegisterRegConv+0x50>
 8001be2:	2804      	cmp	r0, #4
 8001be4:	bf94      	ite	ls
 8001be6:	2000      	movls	r0, #0
 8001be8:	2001      	movhi	r0, #1
 8001bea:	e758      	b.n	8001a9e <RCM_RegisterRegConv+0x22>
 8001bec:	2805      	cmp	r0, #5
 8001bee:	bf28      	it	cs
 8001bf0:	2002      	movcs	r0, #2
 8001bf2:	e75c      	b.n	8001aae <RCM_RegisterRegConv+0x32>
 8001bf4:	2805      	cmp	r0, #5
 8001bf6:	bf28      	it	cs
 8001bf8:	2003      	movcs	r0, #3
 8001bfa:	e760      	b.n	8001abe <RCM_RegisterRegConv+0x42>
 8001bfc:	200009cc 	.word	0x200009cc
 8001c00:	200009a8 	.word	0x200009a8

08001c04 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001c04:	b410      	push	{r4}
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <RCM_ExecRegularConv+0x78>)
 8001c08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c0c:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2909      	cmp	r1, #9
 8001c12:	d825      	bhi.n	8001c60 <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c14:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001c18:	068b      	lsls	r3, r1, #26
 8001c1a:	2001      	movs	r0, #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c1c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c20:	fa00 f101 	lsl.w	r1, r0, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c24:	430b      	orrs	r3, r1
 8001c26:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c2a:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8001c2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c30:	0d1b      	lsrs	r3, r3, #20
 8001c32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c36:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001c40:	6893      	ldr	r3, [r2, #8]
 8001c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001c50:	6813      	ldr	r3, [r2, #0]

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001c52:	075b      	lsls	r3, r3, #29
 8001c54:	d5fc      	bpl.n	8001c50 <RCM_ExecRegularConv+0x4c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c56:	6c10      	ldr	r0, [r2, #64]	; 0x40
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
return retVal;
}
 8001c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c5c:	b280      	uxth	r0, r0
 8001c5e:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c60:	2301      	movs	r3, #1
 8001c62:	408b      	lsls	r3, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f06f 041d 	mvn.w	r4, #29
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c6e:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c72:	fb10 4101 	smlabb	r1, r0, r1, r4
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c76:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001c7a:	e7d4      	b.n	8001c26 <RCM_ExecRegularConv+0x22>
 8001c7c:	200009cc 	.word	0x200009cc

08001c80 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 8001c80:	b470      	push	{r4, r5, r6}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001c82:	4c27      	ldr	r4, [pc, #156]	; (8001d20 <RCM_ExecUserConv+0xa0>)
 8001c84:	7823      	ldrb	r3, [r4, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001c8a:	bc70      	pop	{r4, r5, r6}
 8001c8c:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001c8e:	4925      	ldr	r1, [pc, #148]	; (8001d24 <RCM_ExecUserConv+0xa4>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c90:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <RCM_ExecUserConv+0xa8>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001c92:	7808      	ldrb	r0, [r1, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c94:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001c98:	7911      	ldrb	r1, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	2909      	cmp	r1, #9
 8001c9e:	d831      	bhi.n	8001d04 <RCM_ExecUserConv+0x84>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001ca0:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8001ca4:	068d      	lsls	r5, r1, #26
 8001ca6:	408b      	lsls	r3, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ca8:	ea45 5106 	orr.w	r1, r5, r6, lsl #20
 8001cac:	430b      	orrs	r3, r1
 8001cae:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001cb2:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8001cb6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cb8:	0d1b      	lsrs	r3, r3, #20
 8001cba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cbe:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001cc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001cc8:	6893      	ldr	r3, [r2, #8]
 8001cca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001cd8:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001cda:	075b      	lsls	r3, r3, #29
 8001cdc:	d5fc      	bpl.n	8001cd8 <RCM_ExecUserConv+0x58>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <RCM_ExecUserConv+0xac>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001ce0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001ce2:	4e13      	ldr	r6, [pc, #76]	; (8001d30 <RCM_ExecUserConv+0xb0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001ce4:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8001ce8:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001cea:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001cec:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001cee:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001cf0:	2d00      	cmp	r5, #0
 8001cf2:	d0ca      	beq.n	8001c8a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001cf4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001cf8:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001cfa:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001cfc:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001cfe:	462b      	mov	r3, r5
}
 8001d00:	bc70      	pop	{r4, r5, r6}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001d02:	4718      	bx	r3
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d04:	408b      	lsls	r3, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d0a:	2503      	movs	r5, #3
 8001d0c:	f06f 061d 	mvn.w	r6, #29
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d10:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d14:	fb15 6101 	smlabb	r1, r5, r1, r6
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d18:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001d1c:	e7c7      	b.n	8001cae <RCM_ExecUserConv+0x2e>
 8001d1e:	bf00      	nop
 8001d20:	200009c8 	.word	0x200009c8
 8001d24:	200009a4 	.word	0x200009a4
 8001d28:	200009cc 	.word	0x200009cc
 8001d2c:	200009a8 	.word	0x200009a8
 8001d30:	200009dc 	.word	0x200009dc

08001d34 <ADC1_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8001d34:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8001d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  
  // Clear Flags Single or M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
  // Highfrequency task Single or M1
  UI_DACUpdate(TSK_HighFrequencyTask());
 8001d3e:	f7ff fa21 	bl	8001184 <TSK_HighFrequencyTask>

 /* USER CODE END HighFreq M1 */  
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 8001d46:	f000 ba7b 	b.w	8002240 <UI_DACUpdate>
 8001d4a:	bf00      	nop

08001d4c <TIM1_UP_TIM16_IRQHandler>:
{
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */ 
 
    LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001d4e:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8001d52:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001d54:	f06f 0201 	mvn.w	r2, #1
 8001d58:	611a      	str	r2, [r3, #16]
    R3_1_F30X_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8001d5a:	f004 bd2f 	b.w	80067bc <R3_1_F30X_TIMx_UP_IRQHandler>
 8001d5e:	bf00      	nop
 8001d60:	200002c0 	.word	0x200002c0

08001d64 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */ 
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8001d64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */ 
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8001d66:	4c0f      	ldr	r4, [pc, #60]	; (8001da4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8001d68:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001d6c:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return (READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF));
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	0611      	lsls	r1, r2, #24
 8001d72:	d40c      	bmi.n	8001d8e <TIM1_BRK_TIM15_IRQHandler+0x2a>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return (READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF));
 8001d74:	691a      	ldr	r2, [r3, #16]
  {
  	LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_F30X_BRK_IRQHandler(&PWM_Handle_M1);
  }
  if (LL_TIM_IsActiveFlag_BRK2(PWM_Handle_M1.pParams_str->TIMx))
 8001d76:	05d2      	lsls	r2, r2, #23
 8001d78:	d505      	bpl.n	8001d86 <TIM1_BRK_TIM15_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8001d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d7e:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK2(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_F30X_BRK2_IRQHandler(&PWM_Handle_M1);
 8001d80:	4808      	ldr	r0, [pc, #32]	; (8001da4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8001d82:	f004 fd1d 	bl	80067c0 <R3_1_F30X_BRK2_IRQHandler>
  MC_Scheduler();
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 8001d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MC_Scheduler();
 8001d8a:	f7fe bfe9 	b.w	8000d60 <MC_Scheduler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001d8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d92:	611a      	str	r2, [r3, #16]
    R3_1_F30X_BRK_IRQHandler(&PWM_Handle_M1);
 8001d94:	4620      	mov	r0, r4
 8001d96:	f004 fd31 	bl	80067fc <R3_1_F30X_BRK_IRQHandler>
 8001d9a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	e7e8      	b.n	8001d74 <TIM1_BRK_TIM15_IRQHandler+0x10>
 8001da2:	bf00      	nop
 8001da4:	200002c0 	.word	0x200002c0

08001da8 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001da8:	b510      	push	{r4, lr}
 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001daa:	4c19      	ldr	r4, [pc, #100]	; (8001e10 <USART2_IRQHandler+0x68>)
 8001dac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	0691      	lsls	r1, r2, #26
 8001db4:	d417      	bmi.n	8001de6 <USART2_IRQHandler+0x3e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8001db6:	69da      	ldr	r2, [r3, #28]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */ 
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001db8:	0612      	lsls	r2, r2, #24
 8001dba:	d40e      	bmi.n	8001dda <USART2_IRQHandler+0x32>
  return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
 8001dbc:	69db      	ldr	r3, [r3, #28]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }
  
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001dbe:	071b      	lsls	r3, r3, #28
 8001dc0:	d400      	bmi.n	8001dc4 <USART2_IRQHandler+0x1c>
 8001dc2:	bd10      	pop	{r4, pc}
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <USART2_IRQHandler+0x68>)
 8001dc6:	f005 fa2b 	bl	8007220 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001dca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001dce:	2208      	movs	r2, #8
 8001dd0:	621a      	str	r2, [r3, #32]
    /* USER CODE END USART_ORE   */   
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */
}
 8001dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8001dd6:	f000 ba43 	b.w	8002260 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 8001dda:	480d      	ldr	r0, [pc, #52]	; (8001e10 <USART2_IRQHandler+0x68>)
 8001ddc:	f005 f9ee 	bl	80071bc <UFCP_TX_IRQ_Handler>
 8001de0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001de4:	e7ea      	b.n	8001dbc <USART2_IRQHandler+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001de6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8001de8:	4620      	mov	r0, r4
 8001dea:	b2c9      	uxtb	r1, r1
 8001dec:	f005 f97a 	bl	80070e4 <UFCP_RX_IRQ_Handler>
 8001df0:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d004      	beq.n	8001e00 <USART2_IRQHandler+0x58>
    if (retVal == 2)
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d007      	beq.n	8001e0a <USART2_IRQHandler+0x62>
 8001dfa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001dfe:	e7da      	b.n	8001db6 <USART2_IRQHandler+0xe>
      UI_SerialCommunicationTimeOutStart();
 8001e00:	f000 fa34 	bl	800226c <UI_SerialCommunicationTimeOutStart>
 8001e04:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001e08:	e7d5      	b.n	8001db6 <USART2_IRQHandler+0xe>
      UI_SerialCommunicationTimeOutStop();
 8001e0a:	f000 fa29 	bl	8002260 <UI_SerialCommunicationTimeOutStop>
 8001e0e:	e7f4      	b.n	8001dfa <USART2_IRQHandler+0x52>
 8001e10:	2000061c 	.word	0x2000061c

08001e14 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001e14:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8001e16:	f7ff fa81 	bl	800131c <TSK_HardwareFaultTask>
 8001e1a:	4c1a      	ldr	r4, [pc, #104]	; (8001e84 <HardFault_Handler+0x70>)
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001e1c:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001e1e:	4625      	mov	r5, r4
 8001e20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001e24:	e005      	b.n	8001e32 <HardFault_Handler+0x1e>
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8001e26:	69da      	ldr	r2, [r3, #28]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }
      
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001e28:	0611      	lsls	r1, r2, #24
 8001e2a:	d412      	bmi.n	8001e52 <HardFault_Handler+0x3e>
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001e2c:	69da      	ldr	r2, [r3, #28]
      {   
        UFCP_TX_IRQ_Handler(&pUSART);
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001e2e:	0692      	lsls	r2, r2, #26
 8001e30:	d417      	bmi.n	8001e62 <HardFault_Handler+0x4e>
  return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
 8001e32:	69da      	ldr	r2, [r3, #28]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001e34:	0710      	lsls	r0, r2, #28
 8001e36:	d5f6      	bpl.n	8001e26 <HardFault_Handler+0x12>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f005 f9f1 	bl	8007220 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001e3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001e42:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8001e44:	f000 fa0c 	bl	8002260 <UI_SerialCommunicationTimeOutStop>
 8001e48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8001e4c:	69da      	ldr	r2, [r3, #28]
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001e4e:	0611      	lsls	r1, r2, #24
 8001e50:	d5ec      	bpl.n	8001e2c <HardFault_Handler+0x18>
        UFCP_TX_IRQ_Handler(&pUSART);
 8001e52:	4628      	mov	r0, r5
 8001e54:	f005 f9b2 	bl	80071bc <UFCP_TX_IRQ_Handler>
 8001e58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001e5c:	69da      	ldr	r2, [r3, #28]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001e5e:	0692      	lsls	r2, r2, #26
 8001e60:	d5e7      	bpl.n	8001e32 <HardFault_Handler+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001e62:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001e64:	4628      	mov	r0, r5
 8001e66:	b2c9      	uxtb	r1, r1
 8001e68:	f005 f93c 	bl	80070e4 <UFCP_RX_IRQ_Handler>
 8001e6c:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d004      	beq.n	8001e7c <HardFault_Handler+0x68>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d1d4      	bne.n	8001e20 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8001e76:	f000 f9f3 	bl	8002260 <UI_SerialCommunicationTimeOutStop>
 8001e7a:	e7d1      	b.n	8001e20 <HardFault_Handler+0xc>
          UI_SerialCommunicationTimeOutStart();
 8001e7c:	f000 f9f6 	bl	800226c <UI_SerialCommunicationTimeOutStart>
 8001e80:	e7ce      	b.n	8001e20 <HardFault_Handler+0xc>
 8001e82:	bf00      	nop
 8001e84:	2000061c 	.word	0x2000061c

08001e88 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8001e88:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8001e8a:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <SysTick_Handler+0x2c>)
 8001e8c:	7823      	ldrb	r3, [r4, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d006      	beq.n	8001ea0 <SysTick_Handler+0x18>
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;  
 8001e96:	7023      	strb	r3, [r4, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8001e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001e9c:	f7fe bcde 	b.w	800085c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8001ea0:	f000 ff70 	bl	8002d84 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8001ea4:	f001 fc82 	bl	80037ac <HAL_SYSTICK_IRQHandler>
 8001ea8:	2301      	movs	r3, #1
  SystickDividerCounter ++;  
 8001eaa:	7023      	strb	r3, [r4, #0]
}
 8001eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001eb0:	f7fe bcd4 	b.w	800085c <MC_RunMotorControlTasks>
 8001eb4:	2000075c 	.word	0x2000075c

08001eb8 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <EXTI15_10_IRQHandler+0xc>)
 8001eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebe:	615a      	str	r2, [r3, #20]
  */
void EXTI15_10_IRQHandler (void)
{
/* USER CODE BEGIN START_STOP_BTN */
  LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
  UI_HandleStartStopButton_cb ();
 8001ec0:	f000 b9da 	b.w	8002278 <UI_HandleStartStopButton_cb>
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_MspInit+0x38>)
{
 8001eca:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	699a      	ldr	r2, [r3, #24]
{
 8001ed6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	f002 0201 	and.w	r2, r2, #1
 8001edc:	9200      	str	r2, [sp, #0]
 8001ede:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ee6:	61da      	str	r2, [r3, #28]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ef0:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ef4:	f001 fbea 	bl	80036cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef8:	b003      	add	sp, #12
 8001efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f04:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001f06:	6803      	ldr	r3, [r0, #0]
{
 8001f08:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	9404      	str	r4, [sp, #16]
 8001f12:	9403      	str	r4, [sp, #12]
 8001f14:	9405      	str	r4, [sp, #20]
 8001f16:	9406      	str	r4, [sp, #24]
 8001f18:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 8001f1a:	d001      	beq.n	8001f20 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f1c:	b009      	add	sp, #36	; 0x24
 8001f1e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f20:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001f24:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f28:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2c:	4815      	ldr	r0, [pc, #84]	; (8001f84 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001f3a:	9200      	str	r2, [sp, #0]
 8001f3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001f4c:	9201      	str	r2, [sp, #4]
 8001f4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f56:	615a      	str	r2, [r3, #20]
 8001f58:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f62:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8001f64:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8001f68:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f001 fc5d 	bl	8003828 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	a903      	add	r1, sp, #12
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8001f74:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f001 fc55 	bl	8003828 <HAL_GPIO_Init>
}
 8001f7e:	b009      	add	sp, #36	; 0x24
 8001f80:	bd30      	pop	{r4, r5, pc}
 8001f82:	bf00      	nop
 8001f84:	48000800 	.word	0x48000800

08001f88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f88:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8001f8a:	6801      	ldr	r1, [r0, #0]
 8001f8c:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_DAC_MspInit+0x60>)
{
 8001f8e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8001f92:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	9304      	str	r3, [sp, #16]
 8001f96:	9303      	str	r3, [sp, #12]
 8001f98:	9305      	str	r3, [sp, #20]
 8001f9a:	9306      	str	r3, [sp, #24]
 8001f9c:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 8001f9e:	d001      	beq.n	8001fa4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001fa0:	b008      	add	sp, #32
 8001fa2:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fa8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8001fac:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001fb4:	61da      	str	r2, [r3, #28]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001fbc:	9201      	str	r2, [sp, #4]
 8001fbe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8001fd0:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8001fda:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fdc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f001 fc23 	bl	8003828 <HAL_GPIO_Init>
}
 8001fe2:	b008      	add	sp, #32
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40007400 	.word	0x40007400

08001fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fec:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001fee:	6801      	ldr	r1, [r0, #0]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_TIM_Base_MspInit+0x68>)
{
 8001ff2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8001ff6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	9304      	str	r3, [sp, #16]
 8001ffa:	9303      	str	r3, [sp, #12]
 8001ffc:	9305      	str	r3, [sp, #20]
 8001ffe:	9306      	str	r3, [sp, #24]
 8002000:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002004:	b008      	add	sp, #32
 8002006:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800200c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002010:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002018:	619a      	str	r2, [r3, #24]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002020:	9201      	str	r2, [sp, #4]
 8002022:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800202a:	615a      	str	r2, [r3, #20]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002034:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8002036:	230c      	movs	r3, #12
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002038:	f44f 6500 	mov.w	r5, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2402      	movs	r4, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002044:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002048:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800204a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800204c:	f001 fbec 	bl	8003828 <HAL_GPIO_Init>
}
 8002050:	b008      	add	sp, #32
 8002052:	bd70      	pop	{r4, r5, r6, pc}
 8002054:	40012c00 	.word	0x40012c00

08002058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002058:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800205a:	6801      	ldr	r1, [r0, #0]
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_TIM_MspPostInit+0x58>)
{
 800205e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002062:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	9302      	str	r3, [sp, #8]
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	9303      	str	r3, [sp, #12]
 800206a:	9304      	str	r3, [sp, #16]
 800206c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800206e:	d001      	beq.n	8002074 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002070:	b006      	add	sp, #24
 8002072:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002078:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800208e:	2206      	movs	r2, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002092:	f44f 65e0 	mov.w	r5, #1792	; 0x700
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002096:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	9e00      	ldr	r6, [sp, #0]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800209e:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020a6:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f001 fbbe 	bl	8003828 <HAL_GPIO_Init>
}
 80020ac:	b006      	add	sp, #24
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	40012c00 	.word	0x40012c00

080020b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80020b6:	6801      	ldr	r1, [r0, #0]
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_UART_MspInit+0x64>)
{
 80020ba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80020be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	9303      	str	r3, [sp, #12]
 80020c4:	9305      	str	r3, [sp, #20]
 80020c6:	9306      	str	r3, [sp, #24]
 80020c8:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020cc:	b009      	add	sp, #36	; 0x24
 80020ce:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020e0:	61da      	str	r2, [r3, #28]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80020e8:	9201      	str	r2, [sp, #4]
 80020ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020fe:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002100:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002108:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f001 fb8b 	bl	8003828 <HAL_GPIO_Init>
}
 8002112:	b009      	add	sp, #36	; 0x24
 8002114:	bd30      	pop	{r4, r5, pc}
 8002116:	bf00      	nop
 8002118:	40004400 	.word	0x40004400

0800211c <UI_TaskInit>:
  (void*)(&UI_SetCurrentReferences)
};

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002120:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;      
      pDAC->_Super = UI_Params;
 8002122:	4d2d      	ldr	r5, [pc, #180]	; (80021d8 <UI_TaskInit+0xbc>)
{
 8002124:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002126:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 8002128:	462c      	mov	r4, r5
{
 800212a:	4682      	mov	sl, r0
 800212c:	460f      	mov	r7, r1
 800212e:	4690      	mov	r8, r2
 8002130:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;      
 8002134:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80021f0 <UI_TaskInit+0xd4>
 8002138:	4e28      	ldr	r6, [pc, #160]	; (80021dc <UI_TaskInit+0xc0>)
      UI_SetDAC(&pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B);

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 800213a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80021f4 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;      
 800213e:	f8c6 c000 	str.w	ip, [r6]
      pDAC->_Super = UI_Params;
 8002142:	46e6      	mov	lr, ip
 8002144:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800214e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init(&pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg); /* Init UI and link MC obj */
 8002152:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 8002156:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
      UI_Init(&pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg); /* Init UI and link MC obj */
 800215a:	464b      	mov	r3, r9
 800215c:	4660      	mov	r0, ip
 800215e:	4642      	mov	r2, r8
 8002160:	4639      	mov	r1, r7
 8002162:	f000 f895 	bl	8002290 <UI_Init>
      UI_DACInit(&pDAC->_Super); /* Init DAC */
 8002166:	6830      	ldr	r0, [r6, #0]
 8002168:	f000 fd8c 	bl	8002c84 <UI_DACInit>
      UI_SetDAC(&pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A);
 800216c:	6830      	ldr	r0, [r6, #0]
 800216e:	2223      	movs	r2, #35	; 0x23
 8002170:	2100      	movs	r1, #0
 8002172:	f000 fd8f 	bl	8002c94 <UI_SetDAC>
      UI_SetDAC(&pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B);
 8002176:	6830      	ldr	r0, [r6, #0]
 8002178:	2224      	movs	r2, #36	; 0x24
 800217a:	2101      	movs	r1, #1
 800217c:	f000 fd8a 	bl	8002c94 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 8002180:	46ac      	mov	ip, r5
 8002182:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8002186:	f8df e070 	ldr.w	lr, [pc, #112]	; 80021f8 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 800218a:	4675      	mov	r5, lr
 800218c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002194:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8002198:	4c11      	ldr	r4, [pc, #68]	; (80021e0 <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 800219a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 800219e:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 80021a0:	f8c4 e000 	str.w	lr, [r4]
    UFCP_Init( & pUSART );
 80021a4:	f004 ff9c 	bl	80070e0 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 80021a8:	6832      	ldr	r2, [r6, #0]
 80021aa:	9905      	ldr	r1, [sp, #20]
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <UI_TaskInit+0xc8>)
 80021ae:	6820      	ldr	r0, [r4, #0]
 80021b0:	9102      	str	r1, [sp, #8]
 80021b2:	9201      	str	r2, [sp, #4]
 80021b4:	4659      	mov	r1, fp
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <UI_TaskInit+0xcc>)
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <UI_TaskInit+0xd0>)
 80021bc:	f7ff fc0e 	bl	80019dc <MCP_Init>
    UI_Init(&pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg); /* Initialize UI and link MC components */
 80021c0:	6820      	ldr	r0, [r4, #0]
 80021c2:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80021c6:	464b      	mov	r3, r9
 80021c8:	4642      	mov	r2, r8
 80021ca:	4639      	mov	r1, r7

}
 80021cc:	b007      	add	sp, #28
 80021ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init(&pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg); /* Initialize UI and link MC components */
 80021d2:	f000 b85d 	b.w	8002290 <UI_Init>
 80021d6:	bf00      	nop
 80021d8:	200005bc 	.word	0x200005bc
 80021dc:	2000079c 	.word	0x2000079c
 80021e0:	200007a0 	.word	0x200007a0
 80021e4:	08007399 	.word	0x08007399
 80021e8:	0800727d 	.word	0x0800727d
 80021ec:	08007259 	.word	0x08007259
 80021f0:	200000b4 	.word	0x200000b4
 80021f4:	2000061c 	.word	0x2000061c
 80021f8:	200009e0 	.word	0x200009e0

080021fc <UI_Scheduler>:

void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <UI_Scheduler+0x38>)
 80021fe:	8813      	ldrh	r3, [r2, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	b11b      	cbz	r3, 800220c <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002204:	8813      	ldrh	r3, [r2, #0]
 8002206:	3b01      	subs	r3, #1
 8002208:	b29b      	uxth	r3, r3
 800220a:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <UI_Scheduler+0x3c>)
 800220e:	8813      	ldrh	r3, [r2, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d903      	bls.n	800221e <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002216:	8813      	ldrh	r3, [r2, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	b29b      	uxth	r3, r3
 800221c:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <UI_Scheduler+0x40>)
 8002220:	8813      	ldrh	r3, [r2, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d903      	bls.n	8002230 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002228:	8813      	ldrh	r3, [r2, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	b29b      	uxth	r3, r3
 800222e:	8013      	strh	r3, [r2, #0]
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000079a 	.word	0x2000079a
 8002238:	20000798 	.word	0x20000798
 800223c:	2000075e 	.word	0x2000075e

08002240 <UI_DACUpdate>:
  }
}

void UI_DACUpdate(uint8_t bMotorNbr)
{
 8002240:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002242:	4c06      	ldr	r4, [pc, #24]	; (800225c <UI_DACUpdate+0x1c>)
{
 8002244:	4605      	mov	r5, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002246:	6820      	ldr	r0, [r4, #0]
 8002248:	f000 f82e 	bl	80022a8 <UI_GetSelectedMC>
 800224c:	42a8      	cmp	r0, r5
 800224e:	d000      	beq.n	8002252 <UI_DACUpdate+0x12>
 8002250:	bd38      	pop	{r3, r4, r5, pc}
  {  
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002252:	6820      	ldr	r0, [r4, #0]
  }
}
 8002254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002258:	f000 bd18 	b.w	8002c8c <UI_DACExec>
 800225c:	2000079c 	.word	0x2000079c

08002260 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002260:	4b01      	ldr	r3, [pc, #4]	; (8002268 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	4770      	bx	lr
 8002268:	20000798 	.word	0x20000798

0800226c <UI_SerialCommunicationTimeOutStart>:
}

void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 800226c:	4b01      	ldr	r3, [pc, #4]	; (8002274 <UI_SerialCommunicationTimeOutStart+0x8>)
 800226e:	224f      	movs	r2, #79	; 0x4f
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	4770      	bx	lr
 8002274:	20000798 	.word	0x20000798

08002278 <UI_HandleStartStopButton_cb>:
}

void UI_HandleStartStopButton_cb (void)
{
 8002278:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 800227a:	f7fe f9ad 	bl	80005d8 <MC_GetSTMStateMotor1>
 800227e:	b118      	cbz	r0, 8002288 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002284:	f7fe b9a2 	b.w	80005cc <MC_StopMotor1>
}
 8002288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 800228c:	f7fe b998 	b.w	80005c0 <MC_StartMotor1>

08002290 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  *  @retval none.
  */
void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002290:	b430      	push	{r4, r5}
 8002292:	9c02      	ldr	r4, [sp, #8]

  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002294:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8002296:	2500      	movs	r5, #0
 8002298:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->bDriveNum = bMCNum;
 800229c:	7701      	strb	r1, [r0, #28]
  pHandle->pMCI = pMCI;
 800229e:	6202      	str	r2, [r0, #32]
  pHandle->pMCT = pMCT;
 80022a0:	6243      	str	r3, [r0, #36]	; 0x24
}
 80022a2:	bc30      	pop	{r4, r5}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <UI_GetSelectedMC>:
  *  @retval Return the currently selected MC, zero based, on which UI operates.
  */
uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80022a8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	4614      	mov	r4, r2
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80022b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80022b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80022ba:	6a02      	ldr	r2, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80022bc:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80022c0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
{
 80022c4:	b084      	sub	sp, #16

  bool retVal = true;
  switch (bRegID)
 80022c6:	295b      	cmp	r1, #91	; 0x5b
 80022c8:	f200 8161 	bhi.w	800258e <UI_SetReg+0x2de>
 80022cc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80022d0:	015f011f 	.word	0x015f011f
 80022d4:	0117015f 	.word	0x0117015f
 80022d8:	0111015f 	.word	0x0111015f
 80022dc:	0105010b 	.word	0x0105010b
 80022e0:	00f300f9 	.word	0x00f300f9
 80022e4:	015900ed 	.word	0x015900ed
 80022e8:	012d014d 	.word	0x012d014d
 80022ec:	00e70127 	.word	0x00e70127
 80022f0:	013300cc 	.word	0x013300cc
 80022f4:	015f015f 	.word	0x015f015f
 80022f8:	009600b1 	.word	0x009600b1
 80022fc:	015f015f 	.word	0x015f015f
 8002300:	015f015f 	.word	0x015f015f
 8002304:	015f015f 	.word	0x015f015f
 8002308:	015f015f 	.word	0x015f015f
 800230c:	015f015f 	.word	0x015f015f
 8002310:	015f015f 	.word	0x015f015f
 8002314:	015f015f 	.word	0x015f015f
 8002318:	015f015f 	.word	0x015f015f
 800231c:	015f015f 	.word	0x015f015f
 8002320:	015f015f 	.word	0x015f015f
 8002324:	015f015f 	.word	0x015f015f
 8002328:	015f015f 	.word	0x015f015f
 800232c:	015f015f 	.word	0x015f015f
 8002330:	015f015f 	.word	0x015f015f
 8002334:	015f015f 	.word	0x015f015f
 8002338:	015f015f 	.word	0x015f015f
 800233c:	015f015f 	.word	0x015f015f
 8002340:	015f015f 	.word	0x015f015f
 8002344:	015f015f 	.word	0x015f015f
 8002348:	015f015f 	.word	0x015f015f
 800234c:	015f015f 	.word	0x015f015f
 8002350:	0090015f 	.word	0x0090015f
 8002354:	015f015f 	.word	0x015f015f
 8002358:	015f015f 	.word	0x015f015f
 800235c:	00760083 	.word	0x00760083
 8002360:	015f0069 	.word	0x015f0069
 8002364:	015f015f 	.word	0x015f015f
 8002368:	015f015f 	.word	0x015f015f
 800236c:	015f015f 	.word	0x015f015f
 8002370:	015f015f 	.word	0x015f015f
 8002374:	015f015f 	.word	0x015f015f
 8002378:	015f015f 	.word	0x015f015f
 800237c:	015f015f 	.word	0x015f015f
 8002380:	015f015f 	.word	0x015f015f
 8002384:	005c015f 	.word	0x005c015f
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
    }
    break;
  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)(wValue/6),0);
 8002388:	4995      	ldr	r1, [pc, #596]	; (80025e0 <UI_SetReg+0x330>)
 800238a:	fb81 3104 	smull	r3, r1, r1, r4
 800238e:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002392:	4630      	mov	r0, r6
 8002394:	b209      	sxth	r1, r1
 8002396:	2200      	movs	r2, #0
 8002398:	f002 fe0a 	bl	8004fb0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800239c:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 800239e:	b004      	add	sp, #16
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
      sNewConstants = FF_GetFFConstants(pMCT->pFF);
 80023a2:	ae01      	add	r6, sp, #4
 80023a4:	4630      	mov	r0, r6
 80023a6:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80023a8:	f005 f9ce 	bl	8007748 <FF_GetFFConstants>
      sNewConstants.wConst_2 = wValue;
 80023ac:	9403      	str	r4, [sp, #12]
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
 80023ae:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80023b0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80023b4:	f005 f9ba 	bl	800772c <FF_SetFFConstants>
  bool retVal = true;
 80023b8:	2001      	movs	r0, #1
    break;
 80023ba:	e7f0      	b.n	800239e <UI_SetReg+0xee>
      sNewConstants = FF_GetFFConstants(pMCT->pFF);
 80023bc:	ae01      	add	r6, sp, #4
 80023be:	4630      	mov	r0, r6
 80023c0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80023c2:	f005 f9c1 	bl	8007748 <FF_GetFFConstants>
      sNewConstants.wConst_1D = wValue;
 80023c6:	9401      	str	r4, [sp, #4]
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
 80023c8:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80023ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80023ce:	f005 f9ad 	bl	800772c <FF_SetFFConstants>
  bool retVal = true;
 80023d2:	2001      	movs	r0, #1
    break;
 80023d4:	e7e3      	b.n	800239e <UI_SetReg+0xee>
      sNewConstants = FF_GetFFConstants(pMCT->pFF);
 80023d6:	ae01      	add	r6, sp, #4
 80023d8:	4630      	mov	r0, r6
 80023da:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80023dc:	f005 f9b4 	bl	8007748 <FF_GetFFConstants>
      sNewConstants.wConst_1Q = wValue;
 80023e0:	9402      	str	r4, [sp, #8]
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
 80023e2:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80023e4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80023e8:	f005 f9a0 	bl	800772c <FF_SetFFConstants>
  bool retVal = true;
 80023ec:	2001      	movs	r0, #1
    break;
 80023ee:	e7d6      	b.n	800239e <UI_SetReg+0xee>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80023f0:	4630      	mov	r0, r6
 80023f2:	b221      	sxth	r1, r4
 80023f4:	f002 fec8 	bl	8005188 <MCI_SetIdref>
  bool retVal = true;
 80023f8:	2001      	movs	r0, #1
    break;
 80023fa:	e7d0      	b.n	800239e <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80023fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002402:	0f1a      	lsrs	r2, r3, #28
 8002404:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002406:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800240a:	f000 80cc 	beq.w	80025a6 <UI_SetReg+0x2f6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800240e:	2b09      	cmp	r3, #9
 8002410:	d17a      	bne.n	8002508 <UI_SetReg+0x258>
        pSPD = pMCT->pSpeedSensorAux;
 8002412:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002414:	2e00      	cmp	r6, #0
 8002416:	d077      	beq.n	8002508 <UI_SetReg+0x258>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002418:	aa01      	add	r2, sp, #4
 800241a:	f10d 0102 	add.w	r1, sp, #2
 800241e:	4630      	mov	r0, r6
 8002420:	f005 fc88 	bl	8007d34 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002424:	b221      	sxth	r1, r4
 8002426:	4630      	mov	r0, r6
 8002428:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800242c:	f005 fc90 	bl	8007d50 <STO_SetPLLGains>
 8002430:	e06a      	b.n	8002508 <UI_SetReg+0x258>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002432:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002438:	0f1a      	lsrs	r2, r3, #28
 800243a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800243c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002440:	f000 80b6 	beq.w	80025b0 <UI_SetReg+0x300>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002444:	2b09      	cmp	r3, #9
 8002446:	d15f      	bne.n	8002508 <UI_SetReg+0x258>
        pSPD = pMCT->pSpeedSensorAux;
 8002448:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800244a:	2e00      	cmp	r6, #0
 800244c:	d05c      	beq.n	8002508 <UI_SetReg+0x258>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800244e:	aa01      	add	r2, sp, #4
 8002450:	f10d 0102 	add.w	r1, sp, #2
 8002454:	4630      	mov	r0, r6
 8002456:	f005 fc6d 	bl	8007d34 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 800245a:	b222      	sxth	r2, r4
 800245c:	4630      	mov	r0, r6
 800245e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002462:	f005 fc75 	bl	8007d50 <STO_SetPLLGains>
 8002466:	e04f      	b.n	8002508 <UI_SetReg+0x258>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002468:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800246e:	0f1a      	lsrs	r2, r3, #28
 8002470:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002472:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002476:	f000 80a0 	beq.w	80025ba <UI_SetReg+0x30a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800247a:	2b09      	cmp	r3, #9
 800247c:	d144      	bne.n	8002508 <UI_SetReg+0x258>
        pSPD = pMCT->pSpeedSensorAux;
 800247e:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002480:	2e00      	cmp	r6, #0
 8002482:	d041      	beq.n	8002508 <UI_SetReg+0x258>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002484:	aa01      	add	r2, sp, #4
 8002486:	f10d 0102 	add.w	r1, sp, #2
 800248a:	4630      	mov	r0, r6
 800248c:	f005 fc46 	bl	8007d1c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002490:	b221      	sxth	r1, r4
 8002492:	4630      	mov	r0, r6
 8002494:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002498:	f005 fc48 	bl	8007d2c <STO_PLL_SetObserverGains>
 800249c:	e034      	b.n	8002508 <UI_SetReg+0x258>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800249e:	68a8      	ldr	r0, [r5, #8]
 80024a0:	b221      	sxth	r1, r4
 80024a2:	f003 f857 	bl	8005554 <PID_SetKD>
  bool retVal = true;
 80024a6:	2001      	movs	r0, #1
    break;
 80024a8:	e779      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80024aa:	6868      	ldr	r0, [r5, #4]
 80024ac:	b221      	sxth	r1, r4
 80024ae:	f003 f841 	bl	8005534 <PID_SetKI>
  bool retVal = true;
 80024b2:	2001      	movs	r0, #1
    break;
 80024b4:	e773      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80024b6:	6868      	ldr	r0, [r5, #4]
 80024b8:	b221      	sxth	r1, r4
 80024ba:	f003 f839 	bl	8005530 <PID_SetKP>
  bool retVal = true;
 80024be:	2001      	movs	r0, #1
    break;
 80024c0:	e76d      	b.n	800239e <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 80024c2:	4630      	mov	r0, r6
 80024c4:	f002 fe40 	bl	8005148 <MCI_GetIqdref>
 80024c8:	9001      	str	r0, [sp, #4]
      currComp.qI_Component1 = (int16_t)wValue;
 80024ca:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80024ce:	4630      	mov	r0, r6
 80024d0:	9901      	ldr	r1, [sp, #4]
 80024d2:	f002 fd81 	bl	8004fd8 <MCI_SetCurrentReferences>
  bool retVal = true;
 80024d6:	2001      	movs	r0, #1
    break;
 80024d8:	e761      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80024da:	6828      	ldr	r0, [r5, #0]
 80024dc:	b221      	sxth	r1, r4
 80024de:	f003 f839 	bl	8005554 <PID_SetKD>
  bool retVal = true;
 80024e2:	2001      	movs	r0, #1
    break;
 80024e4:	e75b      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80024e6:	6828      	ldr	r0, [r5, #0]
 80024e8:	b221      	sxth	r1, r4
 80024ea:	f003 f823 	bl	8005534 <PID_SetKI>
  bool retVal = true;
 80024ee:	2001      	movs	r0, #1
    break;
 80024f0:	e755      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80024f2:	6828      	ldr	r0, [r5, #0]
 80024f4:	b221      	sxth	r1, r4
 80024f6:	f003 f81b 	bl	8005530 <PID_SetKP>
  bool retVal = true;
 80024fa:	2001      	movs	r0, #1
    break;
 80024fc:	e74f      	b.n	800239e <UI_SetReg+0xee>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80024fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002502:	d046      	beq.n	8002592 <UI_SetReg+0x2e2>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002504:	2c01      	cmp	r4, #1
 8002506:	d061      	beq.n	80025cc <UI_SetReg+0x31c>
  bool retVal = true;
 8002508:	2001      	movs	r0, #1
}
 800250a:	b004      	add	sp, #16
 800250c:	bd70      	pop	{r4, r5, r6, pc}
  if (bSelectMC  >= pHandle->bDriveNum)
 800250e:	7f03      	ldrb	r3, [r0, #28]
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002510:	b2e4      	uxtb	r4, r4
  if (bSelectMC  >= pHandle->bDriveNum)
 8002512:	42a3      	cmp	r3, r4
 8002514:	d93b      	bls.n	800258e <UI_SetReg+0x2de>
    pHandle->bSelectedDrive = bSelectMC;
 8002516:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  bool retVal = true;
 800251a:	2001      	movs	r0, #1
 800251c:	e73f      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800251e:	68a8      	ldr	r0, [r5, #8]
 8002520:	b221      	sxth	r1, r4
 8002522:	f003 f807 	bl	8005534 <PID_SetKI>
  bool retVal = true;
 8002526:	2001      	movs	r0, #1
    break;
 8002528:	e739      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 800252a:	68a8      	ldr	r0, [r5, #8]
 800252c:	b221      	sxth	r1, r4
 800252e:	f002 ffff 	bl	8005530 <PID_SetKP>
  bool retVal = true;
 8002532:	2001      	movs	r0, #1
    break;
 8002534:	e733      	b.n	800239e <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002536:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800253c:	0f1a      	lsrs	r2, r3, #28
 800253e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002540:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002544:	d03e      	beq.n	80025c4 <UI_SetReg+0x314>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002546:	2b09      	cmp	r3, #9
 8002548:	d1de      	bne.n	8002508 <UI_SetReg+0x258>
        pSPD = pMCT->pSpeedSensorAux;
 800254a:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800254c:	2e00      	cmp	r6, #0
 800254e:	d0db      	beq.n	8002508 <UI_SetReg+0x258>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002550:	aa01      	add	r2, sp, #4
 8002552:	f10d 0102 	add.w	r1, sp, #2
 8002556:	4630      	mov	r0, r6
 8002558:	f005 fbe0 	bl	8007d1c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 800255c:	b222      	sxth	r2, r4
 800255e:	4630      	mov	r0, r6
 8002560:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002564:	f005 fbe2 	bl	8007d2c <STO_PLL_SetObserverGains>
 8002568:	e7ce      	b.n	8002508 <UI_SetReg+0x258>
      currComp = MCI_GetIqdref(pMCI);
 800256a:	4630      	mov	r0, r6
 800256c:	f002 fdec 	bl	8005148 <MCI_GetIqdref>
 8002570:	9001      	str	r0, [sp, #4]
      currComp.qI_Component2 = (int16_t)wValue;
 8002572:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002576:	4630      	mov	r0, r6
 8002578:	9901      	ldr	r1, [sp, #4]
 800257a:	f002 fd2d 	bl	8004fd8 <MCI_SetCurrentReferences>
  bool retVal = true;
 800257e:	2001      	movs	r0, #1
    break;
 8002580:	e70d      	b.n	800239e <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002582:	6868      	ldr	r0, [r5, #4]
 8002584:	b221      	sxth	r1, r4
 8002586:	f002 ffe5 	bl	8005554 <PID_SetKD>
  bool retVal = true;
 800258a:	2001      	movs	r0, #1
    break;
 800258c:	e707      	b.n	800239e <UI_SetReg+0xee>
    retVal = false;
 800258e:	2000      	movs	r0, #0
 8002590:	e705      	b.n	800239e <UI_SetReg+0xee>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002592:	4630      	mov	r0, r6
 8002594:	f002 fdf4 	bl	8005180 <MCI_GetTeref>
 8002598:	4622      	mov	r2, r4
 800259a:	4601      	mov	r1, r0
 800259c:	4630      	mov	r0, r6
 800259e:	f002 fd0f 	bl	8004fc0 <MCI_ExecTorqueRamp>
  bool retVal = true;
 80025a2:	2001      	movs	r0, #1
 80025a4:	e6fb      	b.n	800239e <UI_SetReg+0xee>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025a6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025a8:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025aa:	f47f af33 	bne.w	8002414 <UI_SetReg+0x164>
 80025ae:	e730      	b.n	8002412 <UI_SetReg+0x162>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025b0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025b2:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025b4:	f47f af49 	bne.w	800244a <UI_SetReg+0x19a>
 80025b8:	e746      	b.n	8002448 <UI_SetReg+0x198>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025ba:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025bc:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025be:	f47f af5f 	bne.w	8002480 <UI_SetReg+0x1d0>
 80025c2:	e75c      	b.n	800247e <UI_SetReg+0x1ce>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025c4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025c6:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025c8:	d1c0      	bne.n	800254c <UI_SetReg+0x29c>
 80025ca:	e7be      	b.n	800254a <UI_SetReg+0x29a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRef01Hz(pMCI),0);
 80025cc:	4630      	mov	r0, r6
 80025ce:	f002 fd9f 	bl	8005110 <MCI_GetMecSpeedRef01Hz>
 80025d2:	2200      	movs	r2, #0
 80025d4:	4601      	mov	r1, r0
 80025d6:	4630      	mov	r0, r6
 80025d8:	f002 fcea 	bl	8004fb0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80025dc:	4620      	mov	r0, r4
 80025de:	e6de      	b.n	800239e <UI_SetReg+0xee>
 80025e0:	2aaaaaab 	.word	0x2aaaaaab

080025e4 <UI_GetReg>:
  * @param  bRegID: Code of register to read. 
  *         See MC_PROTOCOL_REG_xxx values for code definition.
  *  @retval Register value read.
  */
int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID)
{
 80025e4:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025e6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80025ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025ec:	6a04      	ldr	r4, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025ee:	b21a      	sxth	r2, r3
{
 80025f0:	b09f      	sub	sp, #124	; 0x7c
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025f2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025f6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]

  int32_t bRetVal = (int32_t)GUI_ERROR_CODE;
  switch (bRegID)
 80025fa:	2981      	cmp	r1, #129	; 0x81
 80025fc:	f200 825f 	bhi.w	8002abe <UI_GetReg+0x4da>
 8002600:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002604:	024d0090 	.word	0x024d0090
 8002608:	00c30240 	.word	0x00c30240
 800260c:	00b800bc 	.word	0x00b800bc
 8002610:	00b000b4 	.word	0x00b000b4
 8002614:	00aa0088 	.word	0x00aa0088
 8002618:	00a200a6 	.word	0x00a200a6
 800261c:	009c0082 	.word	0x009c0082
 8002620:	00940098 	.word	0x00940098
 8002624:	01330146 	.word	0x01330146
 8002628:	025d025d 	.word	0x025d025d
 800262c:	00ea00fd 	.word	0x00ea00fd
 8002630:	025d025d 	.word	0x025d025d
 8002634:	00e2025d 	.word	0x00e2025d
 8002638:	00e600de 	.word	0x00e600de
 800263c:	00d000d7 	.word	0x00d000d7
 8002640:	011f00c9 	.word	0x011f00c9
 8002644:	025d011a 	.word	0x025d011a
 8002648:	01110116 	.word	0x01110116
 800264c:	023b0181 	.word	0x023b0181
 8002650:	011f0248 	.word	0x011f0248
 8002654:	0088011a 	.word	0x0088011a
 8002658:	01290082 	.word	0x01290082
 800265c:	012e0124 	.word	0x012e0124
 8002660:	025d01fd 	.word	0x025d01fd
 8002664:	01ec025d 	.word	0x01ec025d
 8002668:	015a016e 	.word	0x015a016e
 800266c:	01c601da 	.word	0x01c601da
 8002670:	025d01b2 	.word	0x025d01b2
 8002674:	025d025d 	.word	0x025d025d
 8002678:	025d025d 	.word	0x025d025d
 800267c:	01ac025d 	.word	0x01ac025d
 8002680:	01a5008d 	.word	0x01a5008d
 8002684:	0082019e 	.word	0x0082019e
 8002688:	022b018a 	.word	0x022b018a
 800268c:	025d025d 	.word	0x025d025d
 8002690:	021f0225 	.word	0x021f0225
 8002694:	02140219 	.word	0x02140219
 8002698:	020a020f 	.word	0x020a020f
 800269c:	025d0202 	.word	0x025d0202
 80026a0:	025d025d 	.word	0x025d025d
 80026a4:	025d025d 	.word	0x025d025d
 80026a8:	025d025d 	.word	0x025d025d
 80026ac:	025d025d 	.word	0x025d025d
 80026b0:	025d025d 	.word	0x025d025d
 80026b4:	025d025d 	.word	0x025d025d
 80026b8:	0251025d 	.word	0x0251025d
 80026bc:	025d025d 	.word	0x025d025d
 80026c0:	025d025d 	.word	0x025d025d
 80026c4:	025d025d 	.word	0x025d025d
 80026c8:	025d025d 	.word	0x025d025d
 80026cc:	025d025d 	.word	0x025d025d
 80026d0:	025d025d 	.word	0x025d025d
 80026d4:	025d025d 	.word	0x025d025d
 80026d8:	025d025d 	.word	0x025d025d
 80026dc:	025d025d 	.word	0x025d025d
 80026e0:	01860244 	.word	0x01860244
 80026e4:	025d0092 	.word	0x025d0092
 80026e8:	00a000c7 	.word	0x00a000c7
 80026ec:	025d025d 	.word	0x025d025d
 80026f0:	025d025d 	.word	0x025d025d
 80026f4:	025d025d 	.word	0x025d025d
 80026f8:	025d025d 	.word	0x025d025d
 80026fc:	025d025d 	.word	0x025d025d
 8002700:	025d025d 	.word	0x025d025d
 8002704:	00ae025d 	.word	0x00ae025d
        bRetVal = MCI_GetIqdref(pMCI).qI_Component1;
      }
      break;
    case MC_PROTOCOL_REG_I_D_REF:
      {
        bRetVal = MCI_GetIqdref(pMCI).qI_Component2;
 8002708:	4620      	mov	r0, r4
 800270a:	f002 fd1d 	bl	8005148 <MCI_GetIqdref>
 800270e:	1400      	asrs	r0, r0, #16

  default:
    break;
  }
  return bRetVal;
}
 8002710:	b01f      	add	sp, #124	; 0x7c
 8002712:	bd30      	pop	{r4, r5, pc}
        bRetVal = MCI_GetIqdref(pMCI).qI_Component1;
 8002714:	4620      	mov	r0, r4
 8002716:	f002 fd17 	bl	8005148 <MCI_GetIqdref>
 800271a:	b200      	sxth	r0, r0
      break;
 800271c:	e7f8      	b.n	8002710 <UI_GetReg+0x12c>
        if (pHandle->pFctDACGetUserChannelValue)
 800271e:	6903      	ldr	r3, [r0, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d143      	bne.n	80027ac <UI_GetReg+0x1c8>
          bRetVal = 0;
 8002724:	4618      	mov	r0, r3
 8002726:	e7f3      	b.n	8002710 <UI_GetReg+0x12c>
      bRetVal = (int32_t)(MC_UID);
 8002728:	48ba      	ldr	r0, [pc, #744]	; (8002a14 <UI_GetReg+0x430>)
 800272a:	e7f1      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800272c:	68a8      	ldr	r0, [r5, #8]
 800272e:	f002 ff13 	bl	8005558 <PID_GetKD>
      break;
 8002732:	e7ed      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002734:	68a8      	ldr	r0, [r5, #8]
 8002736:	f002 ff03 	bl	8005540 <PID_GetKI>
      break;
 800273a:	e7e9      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800273c:	68a8      	ldr	r0, [r5, #8]
 800273e:	f002 fefb 	bl	8005538 <PID_GetKP>
      break;
 8002742:	e7e5      	b.n	8002710 <UI_GetReg+0x12c>
      bRetVal = PWBDID;
 8002744:	2002      	movs	r0, #2
    break;
 8002746:	e7e3      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002748:	6868      	ldr	r0, [r5, #4]
 800274a:	f002 ff05 	bl	8005558 <PID_GetKD>
      break;
 800274e:	e7df      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002750:	6868      	ldr	r0, [r5, #4]
 8002752:	f002 fef5 	bl	8005540 <PID_GetKI>
      break;
 8002756:	e7db      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002758:	6868      	ldr	r0, [r5, #4]
 800275a:	f002 feed 	bl	8005538 <PID_GetKP>
      break;
 800275e:	e7d7      	b.n	8002710 <UI_GetReg+0x12c>
      bRetVal = 0;
 8002760:	2000      	movs	r0, #0
    break;
 8002762:	e7d5      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002764:	6828      	ldr	r0, [r5, #0]
 8002766:	f002 fef7 	bl	8005558 <PID_GetKD>
      break;
 800276a:	e7d1      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800276c:	6828      	ldr	r0, [r5, #0]
 800276e:	f002 fee7 	bl	8005540 <PID_GetKI>
      break;
 8002772:	e7cd      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002774:	6828      	ldr	r0, [r5, #0]
 8002776:	f002 fedf 	bl	8005538 <PID_GetKP>
      break;
 800277a:	e7c9      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)(MCI_GetMecSpeedRef01Hz(pMCI) * 6);
 800277c:	4620      	mov	r0, r4
 800277e:	f002 fcc7 	bl	8005110 <MCI_GetMecSpeedRef01Hz>
 8002782:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002786:	0040      	lsls	r0, r0, #1
      break;
 8002788:	e7c2      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 800278a:	4620      	mov	r0, r4
 800278c:	f002 fc88 	bl	80050a0 <MCI_GetControlMode>
      break;
 8002790:	e7be      	b.n	8002710 <UI_GetReg+0x12c>
      bRetVal = CTRBDID;
 8002792:	2001      	movs	r0, #1
    break;
 8002794:	e7bc      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)(MCI_GetAvrgMecSpeed01Hz(pMCI) * 6);
 8002796:	4620      	mov	r0, r4
 8002798:	f002 fcb2 	bl	8005100 <MCI_GetAvrgMecSpeed01Hz>
 800279c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80027a0:	0040      	lsls	r0, r0, #1
      break;
 80027a2:	e7b5      	b.n	8002710 <UI_GetReg+0x12c>
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 80027a4:	6883      	ldr	r3, [r0, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 818c 	beq.w	8002ac4 <UI_GetReg+0x4e0>
          bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 80027ac:	2101      	movs	r1, #1
 80027ae:	4798      	blx	r3
 80027b0:	e7ae      	b.n	8002710 <UI_GetReg+0x12c>
  if (pHandle->pFctDACGetChannelConfig)
 80027b2:	6883      	ldr	r3, [r0, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8185 	beq.w	8002ac4 <UI_GetReg+0x4e0>
          bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 80027ba:	2100      	movs	r1, #0
 80027bc:	4798      	blx	r3
 80027be:	e7a7      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80027c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80027c2:	f002 fe97 	bl	80054f4 <NTC_GetAvTemp_C>
      break;
 80027c6:	e7a3      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80027c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027ca:	f002 fb31 	bl	8004e30 <VBS_GetAvBusVoltage_V>
      break;
 80027ce:	e79f      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80027d0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80027d2:	f002 fe51 	bl	8005478 <MPM_GetAvrgElMotorPowerW>
      break;
 80027d6:	e79b      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80027da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027de:	0f1a      	lsrs	r2, r3, #28
 80027e0:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027e2:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027e6:	f000 8192 	beq.w	8002b0e <UI_GetReg+0x52a>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d161      	bne.n	80028b2 <UI_GetReg+0x2ce>
          pSPD = pMCT->pSpeedSensorAux;
 80027ee:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d05e      	beq.n	80028b2 <UI_GetReg+0x2ce>
          STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80027f4:	aa1b      	add	r2, sp, #108	; 0x6c
 80027f6:	a918      	add	r1, sp, #96	; 0x60
 80027f8:	f005 fa9c 	bl	8007d34 <STO_GetPLLGains>
 80027fc:	e059      	b.n	80028b2 <UI_GetReg+0x2ce>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002804:	0f1a      	lsrs	r2, r3, #28
 8002806:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002808:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800280c:	f000 8161 	beq.w	8002ad2 <UI_GetReg+0x4ee>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002810:	2b09      	cmp	r3, #9
 8002812:	d105      	bne.n	8002820 <UI_GetReg+0x23c>
          pSPD = pMCT->pSpeedSensorAux;
 8002814:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002816:	b118      	cbz	r0, 8002820 <UI_GetReg+0x23c>
          STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002818:	aa1b      	add	r2, sp, #108	; 0x6c
 800281a:	a918      	add	r1, sp, #96	; 0x60
 800281c:	f005 fa8a 	bl	8007d34 <STO_GetPLLGains>
        bRetVal = (int32_t)hIgain;
 8002820:	f9bd 006c 	ldrsh.w	r0, [sp, #108]	; 0x6c
      break;
 8002824:	e774      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetIab(pMCI).qI_Component1;
 8002826:	4620      	mov	r0, r4
 8002828:	f002 fc76 	bl	8005118 <MCI_GetIab>
 800282c:	b200      	sxth	r0, r0
      break;
 800282e:	e76f      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002830:	6968      	ldr	r0, [r5, #20]
 8002832:	f005 fbad 	bl	8007f90 <RUC_GetNumberOfPhases>
      break;
 8002836:	e76b      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetIqd(pMCI).qI_Component2;
 8002838:	4620      	mov	r0, r4
 800283a:	f002 fc7d 	bl	8005138 <MCI_GetIqd>
 800283e:	1400      	asrs	r0, r0, #16
      break;
 8002840:	e766      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetIqd(pMCI).qI_Component1;
 8002842:	4620      	mov	r0, r4
 8002844:	f002 fc78 	bl	8005138 <MCI_GetIqd>
 8002848:	b200      	sxth	r0, r0
      break;
 800284a:	e761      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetVqd(pMCI).qV_Component2;
 800284c:	4620      	mov	r0, r4
 800284e:	f002 fc83 	bl	8005158 <MCI_GetVqd>
 8002852:	1400      	asrs	r0, r0, #16
      break;
 8002854:	e75c      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetVqd(pMCI).qV_Component1;
 8002856:	4620      	mov	r0, r4
 8002858:	f002 fc7e 	bl	8005158 <MCI_GetVqd>
 800285c:	b200      	sxth	r0, r0
      break;
 800285e:	e757      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetValphabeta(pMCI).qV_Component1;
 8002860:	4620      	mov	r0, r4
 8002862:	f002 fc83 	bl	800516c <MCI_GetValphabeta>
 8002866:	b200      	sxth	r0, r0
      break;
 8002868:	e752      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800286a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002870:	0f1a      	lsrs	r2, r3, #28
 8002872:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002874:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002878:	f000 8126 	beq.w	8002ac8 <UI_GetReg+0x4e4>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800287c:	2b09      	cmp	r3, #9
 800287e:	d1cf      	bne.n	8002820 <UI_GetReg+0x23c>
          pSPD = pMCT->pSpeedSensorAux;
 8002880:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002882:	2800      	cmp	r0, #0
 8002884:	d0cc      	beq.n	8002820 <UI_GetReg+0x23c>
          STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002886:	aa1b      	add	r2, sp, #108	; 0x6c
 8002888:	a918      	add	r1, sp, #96	; 0x60
 800288a:	f005 fa47 	bl	8007d1c <STO_PLL_GetObserverGains>
 800288e:	e7c7      	b.n	8002820 <UI_GetReg+0x23c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002890:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002896:	0f1a      	lsrs	r2, r3, #28
 8002898:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800289a:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800289e:	f000 8131 	beq.w	8002b04 <UI_GetReg+0x520>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028a2:	2b09      	cmp	r3, #9
 80028a4:	d105      	bne.n	80028b2 <UI_GetReg+0x2ce>
          pSPD = pMCT->pSpeedSensorAux;
 80028a6:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80028a8:	b118      	cbz	r0, 80028b2 <UI_GetReg+0x2ce>
          STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80028aa:	aa1b      	add	r2, sp, #108	; 0x6c
 80028ac:	a918      	add	r1, sp, #96	; 0x60
 80028ae:	f005 fa35 	bl	8007d1c <STO_PLL_GetObserverGains>
        bRetVal = (int32_t)hPgain;
 80028b2:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
      break;
 80028b6:	e72b      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80028b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028be:	0f1a      	lsrs	r2, r3, #28
 80028c0:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028c2:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028c6:	f000 8113 	beq.w	8002af0 <UI_GetReg+0x50c>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	f040 80f7 	bne.w	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 80028d0:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80028d2:	2800      	cmp	r0, #0
 80028d4:	f000 80f3 	beq.w	8002abe <UI_GetReg+0x4da>
          bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).qI_Component1;
 80028d8:	f005 fa0c 	bl	8007cf4 <STO_PLL_GetEstimatedCurrent>
 80028dc:	b200      	sxth	r0, r0
 80028de:	e717      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80028e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028e6:	0f1a      	lsrs	r2, r3, #28
 80028e8:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028ea:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028ee:	f000 811d 	beq.w	8002b2c <UI_GetReg+0x548>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028f2:	2b09      	cmp	r3, #9
 80028f4:	f040 80e3 	bne.w	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 80028f8:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80028fa:	2800      	cmp	r0, #0
 80028fc:	f000 80df 	beq.w	8002abe <UI_GetReg+0x4da>
          bRetVal = SPD_GetS16Speed(pSPD);
 8002900:	f004 fa5a 	bl	8006db8 <SPD_GetS16Speed>
 8002904:	e704      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetIab(pMCI).qI_Component2;
 8002906:	4620      	mov	r0, r4
 8002908:	f002 fc06 	bl	8005118 <MCI_GetIab>
 800290c:	1400      	asrs	r0, r0, #16
      break;
 800290e:	e6ff      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002910:	6828      	ldr	r0, [r5, #0]
 8002912:	f002 fe1d 	bl	8005550 <PID_GetKIDivisor>
      break;
 8002916:	e6fb      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002918:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800291e:	0f1a      	lsrs	r2, r3, #28
 8002920:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002922:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002926:	f000 80d9 	beq.w	8002adc <UI_GetReg+0x4f8>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800292a:	2b09      	cmp	r3, #9
 800292c:	f040 80c7 	bne.w	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 8002930:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002932:	2800      	cmp	r0, #0
 8002934:	f000 80c3 	beq.w	8002abe <UI_GetReg+0x4da>
          bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002938:	f005 fa22 	bl	8007d80 <STO_PLL_GetEstimatedBemfLevel>
 800293c:	1400      	asrs	r0, r0, #16
 800293e:	e6e7      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = STC_GetMinAppNegativeMecSpeed01Hz(pMCT->pSpeednTorqueCtrl) * 6;
 8002940:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002942:	f004 faf3 	bl	8006f2c <STC_GetMinAppNegativeMecSpeed01Hz>
 8002946:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800294a:	0040      	lsls	r0, r0, #1
      break;
 800294c:	e6e0      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = STC_GetMaxAppPositiveMecSpeed01Hz(pMCT->pSpeednTorqueCtrl) * 6;
 800294e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002950:	f004 faea 	bl	8006f28 <STC_GetMaxAppPositiveMecSpeed01Hz>
 8002954:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002958:	0040      	lsls	r0, r0, #1
      break;
 800295a:	e6d9      	b.n	8002710 <UI_GetReg+0x12c>
        if (pHandle->pFctDACGetUserChannelValue)
 800295c:	6903      	ldr	r3, [r0, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f47f af2b 	bne.w	80027ba <UI_GetReg+0x1d6>
          bRetVal = 0;
 8002964:	4618      	mov	r0, r3
 8002966:	e6d3      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002968:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800296a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800296e:	0f1a      	lsrs	r2, r3, #28
 8002970:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002972:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002976:	f000 80b6 	beq.w	8002ae6 <UI_GetReg+0x502>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800297a:	2b09      	cmp	r3, #9
 800297c:	f040 809f 	bne.w	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 8002980:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002982:	2800      	cmp	r0, #0
 8002984:	f000 809b 	beq.w	8002abe <UI_GetReg+0x4da>
          bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).qV_Component2;
 8002988:	f005 f9a8 	bl	8007cdc <STO_PLL_GetEstimatedBemf>
 800298c:	1400      	asrs	r0, r0, #16
 800298e:	e6bf      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002990:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002996:	0f1a      	lsrs	r2, r3, #28
 8002998:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800299a:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800299e:	f000 80c0 	beq.w	8002b22 <UI_GetReg+0x53e>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	f040 808b 	bne.w	8002abe <UI_GetReg+0x4da>
          pSPD =  pMCT->pSpeedSensorAux;
 80029a8:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80029aa:	2800      	cmp	r0, #0
 80029ac:	f000 8087 	beq.w	8002abe <UI_GetReg+0x4da>
          bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).qV_Component1;
 80029b0:	f005 f994 	bl	8007cdc <STO_PLL_GetEstimatedBemf>
 80029b4:	b200      	sxth	r0, r0
 80029b6:	e6ab      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029be:	0f1a      	lsrs	r2, r3, #28
 80029c0:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029c2:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029c6:	f000 8098 	beq.w	8002afa <UI_GetReg+0x516>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d177      	bne.n	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 80029ce:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d074      	beq.n	8002abe <UI_GetReg+0x4da>
          bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).qI_Component2;
 80029d4:	f005 f98e 	bl	8007cf4 <STO_PLL_GetEstimatedCurrent>
 80029d8:	1400      	asrs	r0, r0, #16
 80029da:	e699      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029e2:	0f1a      	lsrs	r2, r3, #28
 80029e4:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029e6:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ea:	f000 8095 	beq.w	8002b18 <UI_GetReg+0x534>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ee:	2b09      	cmp	r3, #9
 80029f0:	d165      	bne.n	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 80029f2:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d062      	beq.n	8002abe <UI_GetReg+0x4da>
          bRetVal = SPD_GetElAngle(pSPD);
 80029f8:	f004 f9a6 	bl	8006d48 <SPD_GetElAngle>
 80029fc:	e688      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetValphabeta(pMCI).qV_Component2;
 80029fe:	4620      	mov	r0, r4
 8002a00:	f002 fbb4 	bl	800516c <MCI_GetValphabeta>
 8002a04:	1400      	asrs	r0, r0, #16
      break;
 8002a06:	e683      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = FF_GetVqdAvPIout(pMCT->pFF).qV_Component2;
 8002a08:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002a0a:	f004 feb3 	bl	8007774 <FF_GetVqdAvPIout>
 8002a0e:	1400      	asrs	r0, r0, #16
      break;
 8002a10:	e67e      	b.n	8002710 <UI_GetReg+0x12c>
 8002a12:	bf00      	nop
 8002a14:	34a6847a 	.word	0x34a6847a
        bRetVal = FF_GetVqdAvPIout(pMCT->pFF).qV_Component1;
 8002a18:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002a1a:	f004 feab 	bl	8007774 <FF_GetVqdAvPIout>
 8002a1e:	b200      	sxth	r0, r0
      break;
 8002a20:	e676      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = FF_GetVqdff(pMCT->pFF).qV_Component2;
 8002a22:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002a24:	f004 fe9a 	bl	800775c <FF_GetVqdff>
 8002a28:	1400      	asrs	r0, r0, #16
      break;
 8002a2a:	e671      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = FF_GetVqdff(pMCT->pFF).qV_Component1;
 8002a2c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002a2e:	f004 fe95 	bl	800775c <FF_GetVqdff>
 8002a32:	b200      	sxth	r0, r0
      break;
 8002a34:	e66c      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = FF_GetFFConstants(pMCT->pFF).wConst_2;
 8002a36:	a81b      	add	r0, sp, #108	; 0x6c
 8002a38:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002a3a:	f004 fe85 	bl	8007748 <FF_GetFFConstants>
 8002a3e:	981d      	ldr	r0, [sp, #116]	; 0x74
      break;
 8002a40:	e666      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = FF_GetFFConstants(pMCT->pFF).wConst_1D;
 8002a42:	a818      	add	r0, sp, #96	; 0x60
 8002a44:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002a46:	f004 fe7f 	bl	8007748 <FF_GetFFConstants>
 8002a4a:	9818      	ldr	r0, [sp, #96]	; 0x60
      break;
 8002a4c:	e660      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = FF_GetFFConstants(pMCT->pFF).wConst_1Q;
 8002a4e:	a815      	add	r0, sp, #84	; 0x54
 8002a50:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002a52:	f004 fe79 	bl	8007748 <FF_GetFFConstants>
 8002a56:	9816      	ldr	r0, [sp, #88]	; 0x58
      break;
 8002a58:	e65a      	b.n	8002710 <UI_GetReg+0x12c>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a60:	0f1a      	lsrs	r2, r3, #28
 8002a62:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a64:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a68:	d065      	beq.n	8002b36 <UI_GetReg+0x552>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	d127      	bne.n	8002abe <UI_GetReg+0x4da>
          pSPD = pMCT->pSpeedSensorAux;
 8002a6e:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002a70:	b328      	cbz	r0, 8002abe <UI_GetReg+0x4da>
          bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002a72:	f005 f989 	bl	8007d88 <STO_PLL_GetObservedBemfLevel>
 8002a76:	1400      	asrs	r0, r0, #16
 8002a78:	e64a      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetIalphabeta(pMCI).qI_Component1;
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f002 fb54 	bl	8005128 <MCI_GetIalphabeta>
 8002a80:	b200      	sxth	r0, r0
      break;
 8002a82:	e645      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002a84:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002a86:	f004 fb17 	bl	80070b8 <STM_GetState>
      break;
 8002a8a:	e641      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002a8c:	6828      	ldr	r0, [r5, #0]
 8002a8e:	f002 fd5d 	bl	800554c <PID_GetKPDivisor>
      break;
 8002a92:	e63d      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = MCI_GetIalphabeta(pMCI).qI_Component2;
 8002a94:	4620      	mov	r0, r4
 8002a96:	f002 fb47 	bl	8005128 <MCI_GetIalphabeta>
 8002a9a:	1400      	asrs	r0, r0, #16
      break;
 8002a9c:	e638      	b.n	8002710 <UI_GetReg+0x12c>
        bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002a9e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002aa0:	f004 fb18 	bl	80070d4 <STM_GetFaultState>
      break;
 8002aa4:	e634      	b.n	8002710 <UI_GetReg+0x12c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f002 fafa 	bl	80050a0 <MCI_GetControlMode>
 8002aac:	2801      	cmp	r0, #1
        bRetVal = (int32_t)(MCI_GetLastRampFinalSpeed(pMCI) * 6);
 8002aae:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002ab0:	d045      	beq.n	8002b3e <UI_GetReg+0x55a>
        bRetVal = (int32_t)(MCI_GetMecSpeedRef01Hz(pMCI) * 6);
 8002ab2:	f002 fb2d 	bl	8005110 <MCI_GetMecSpeedRef01Hz>
 8002ab6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002aba:	0040      	lsls	r0, r0, #1
 8002abc:	e628      	b.n	8002710 <UI_GetReg+0x12c>
  int32_t bRetVal = (int32_t)GUI_ERROR_CODE;
 8002abe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac2:	e625      	b.n	8002710 <UI_GetReg+0x12c>
  if (pHandle->pFctDACGetChannelConfig)
 8002ac4:	2083      	movs	r0, #131	; 0x83
      break;
 8002ac6:	e623      	b.n	8002710 <UI_GetReg+0x12c>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ac8:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002aca:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002acc:	f47f aed9 	bne.w	8002882 <UI_GetReg+0x29e>
 8002ad0:	e6d6      	b.n	8002880 <UI_GetReg+0x29c>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ad2:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002ad4:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ad6:	f47f ae9e 	bne.w	8002816 <UI_GetReg+0x232>
 8002ada:	e69b      	b.n	8002814 <UI_GetReg+0x230>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002adc:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002ade:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ae0:	f47f af27 	bne.w	8002932 <UI_GetReg+0x34e>
 8002ae4:	e724      	b.n	8002930 <UI_GetReg+0x34c>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ae6:	2b09      	cmp	r3, #9
         pSPD = pMCT->pSpeedSensorMain;
 8002ae8:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aea:	f47f af4a 	bne.w	8002982 <UI_GetReg+0x39e>
 8002aee:	e747      	b.n	8002980 <UI_GetReg+0x39c>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002af0:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002af2:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002af4:	f47f aeed 	bne.w	80028d2 <UI_GetReg+0x2ee>
 8002af8:	e6ea      	b.n	80028d0 <UI_GetReg+0x2ec>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002afa:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002afc:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002afe:	f47f af67 	bne.w	80029d0 <UI_GetReg+0x3ec>
 8002b02:	e764      	b.n	80029ce <UI_GetReg+0x3ea>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b04:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002b06:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b08:	f47f aece 	bne.w	80028a8 <UI_GetReg+0x2c4>
 8002b0c:	e6cb      	b.n	80028a6 <UI_GetReg+0x2c2>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b0e:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002b10:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b12:	f47f ae6d 	bne.w	80027f0 <UI_GetReg+0x20c>
 8002b16:	e66a      	b.n	80027ee <UI_GetReg+0x20a>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b18:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002b1a:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b1c:	f47f af6a 	bne.w	80029f4 <UI_GetReg+0x410>
 8002b20:	e767      	b.n	80029f2 <UI_GetReg+0x40e>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b22:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002b24:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b26:	f47f af40 	bne.w	80029aa <UI_GetReg+0x3c6>
 8002b2a:	e73d      	b.n	80029a8 <UI_GetReg+0x3c4>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b2c:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002b2e:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b30:	f47f aee3 	bne.w	80028fa <UI_GetReg+0x316>
 8002b34:	e6e0      	b.n	80028f8 <UI_GetReg+0x314>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b36:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002b38:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b3a:	d199      	bne.n	8002a70 <UI_GetReg+0x48c>
 8002b3c:	e797      	b.n	8002a6e <UI_GetReg+0x48a>
        bRetVal = (int32_t)(MCI_GetLastRampFinalSpeed(pMCI) * 6);
 8002b3e:	f002 fad3 	bl	80050e8 <MCI_GetLastRampFinalSpeed>
 8002b42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b46:	0040      	lsls	r0, r0, #1
 8002b48:	e5e2      	b.n	8002710 <UI_GetReg+0x12c>
 8002b4a:	bf00      	nop

08002b4c <UI_ExecCmd>:
{
 8002b4c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b4e:	6a03      	ldr	r3, [r0, #32]
 8002b50:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
  switch (bCmdID)
 8002b54:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b56:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002b5a:	290d      	cmp	r1, #13
 8002b5c:	d82c      	bhi.n	8002bb8 <UI_ExecCmd+0x6c>
 8002b5e:	e8df f001 	tbb	[pc, r1]
 8002b62:	1217      	.short	0x1217
 8002b64:	0e0c0c07 	.word	0x0e0c0c07
 8002b68:	2b21261c 	.word	0x2b21261c
 8002b6c:	122b2b2b 	.word	0x122b2b2b
      if (MCI_GetSTMState(pMCI) == RUN)
 8002b70:	4620      	mov	r0, r4
 8002b72:	f002 fa91 	bl	8005098 <MCI_GetSTMState>
 8002b76:	2806      	cmp	r0, #6
 8002b78:	d020      	beq.n	8002bbc <UI_ExecCmd+0x70>
  bool retVal = true;
 8002b7a:	2001      	movs	r0, #1
}
 8002b7c:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f002 fa8a 	bl	8005098 <MCI_GetSTMState>
 8002b84:	b120      	cbz	r0, 8002b90 <UI_ExecCmd+0x44>
        MCI_StopMotor(pMCI);
 8002b86:	4620      	mov	r0, r4
 8002b88:	f002 fa3e 	bl	8005008 <MCI_StopMotor>
  bool retVal = true;
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002b90:	4620      	mov	r0, r4
 8002b92:	f002 fa2f 	bl	8004ff4 <MCI_StartMotor>
  bool retVal = true;
 8002b96:	2001      	movs	r0, #1
 8002b98:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f002 fa38 	bl	8005010 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002ba0:	2001      	movs	r0, #1
    break;
 8002ba2:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f002 faf3 	bl	8005190 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002baa:	2001      	movs	r0, #1
    break;
 8002bac:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f002 fa32 	bl	8005018 <MCI_EncoderAlign>
  bool retVal = true;
 8002bb4:	2001      	movs	r0, #1
    break;
 8002bb6:	bd10      	pop	{r4, pc}
    retVal = false;
 8002bb8:	2000      	movs	r0, #0
 8002bba:	bd10      	pop	{r4, pc}
        MCI_StopSpeedRamp(pMCI);
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f002 fa9b 	bl	80050f8 <MCI_StopSpeedRamp>
  bool retVal = true;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	bf00      	nop

08002bc8 <UI_ExecSpeedRamp>:
{
 8002bc8:	b510      	push	{r4, lr}
  MCI_ExecSpeedRamp(pMCI,(int16_t)(wFinalMecSpeedRPM/6),hDurationms);
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002bcc:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002bd0:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)(wFinalMecSpeedRPM/6),hDurationms);
 8002bd2:	fb83 e301 	smull	lr, r3, r3, r1
 8002bd6:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002bda:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002bde:	b209      	sxth	r1, r1
 8002be0:	f002 f9e6 	bl	8004fb0 <MCI_ExecSpeedRamp>
}
 8002be4:	2001      	movs	r0, #1
 8002be6:	bd10      	pop	{r4, pc}
 8002be8:	2aaaaaab 	.word	0x2aaaaaab

08002bec <UI_GetRevupData>:
{
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002bee:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002bf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002bf4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002bf8:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002bfa:	b194      	cbz	r4, 8002c22 <UI_GetRevupData+0x36>
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	461e      	mov	r6, r3
 8002c00:	4617      	mov	r7, r2
 8002c02:	460d      	mov	r5, r1
 8002c04:	f005 f9ae 	bl	8007f64 <RUC_GetPhaseDurationms>
    *pFinalMecSpeed01Hz = RUC_GetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage);
 8002c08:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002c0a:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeed01Hz = RUC_GetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage);
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f005 f9af 	bl	8007f70 <RUC_GetPhaseFinalMecSpeed01Hz>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002c12:	4629      	mov	r1, r5
    *pFinalMecSpeed01Hz = RUC_GetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage);
 8002c14:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f005 f9b2 	bl	8007f80 <RUC_GetPhaseFinalTorque>
 8002c1c:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 8002c1e:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002c20:	8018      	strh	r0, [r3, #0]
}
 8002c22:	4620      	mov	r0, r4
 8002c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c26:	bf00      	nop

08002c28 <UI_SetRevupData>:
{
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c2c:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002c30:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002c32:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002c3a:	695c      	ldr	r4, [r3, #20]
{
 8002c3c:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f005 f97e 	bl	8007f40 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage, hFinalMecSpeed01Hz);
 8002c44:	463a      	mov	r2, r7
 8002c46:	4629      	mov	r1, r5
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f005 f97f 	bl	8007f4c <RUC_SetPhaseFinalMecSpeed01Hz>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4632      	mov	r2, r6
 8002c52:	4629      	mov	r1, r5
 8002c54:	f005 f980 	bl	8007f58 <RUC_SetPhaseFinalTorque>
}
 8002c58:	2001      	movs	r0, #1
 8002c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c5c <UI_SetCurrentReferences>:
{
 8002c5c:	b500      	push	{lr}
 8002c5e:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c60:	6a03      	ldr	r3, [r0, #32]
  currComp.qI_Component1 = hIqRef;
 8002c62:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c66:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
  currComp.qI_Component2 = hIdRef;
 8002c6a:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c6e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c72:	9901      	ldr	r1, [sp, #4]
 8002c74:	f002 f9b0 	bl	8004fd8 <MCI_SetCurrentReferences>
}
 8002c78:	b003      	add	sp, #12
 8002c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c7e:	bf00      	nop

08002c80 <UI_GetMPInfo>:
}
 8002c80:	2000      	movs	r0, #0
 8002c82:	4770      	bx	lr

08002c84 <UI_DACInit>:
  if (pHandle->pFct_DACInit)
 8002c84:	6943      	ldr	r3, [r0, #20]
 8002c86:	b103      	cbz	r3, 8002c8a <UI_DACInit+0x6>
	  pHandle->pFct_DACInit(pHandle);
 8002c88:	4718      	bx	r3
 8002c8a:	4770      	bx	lr

08002c8c <UI_DACExec>:
  if (pHandle->pFct_DACExec)
 8002c8c:	6983      	ldr	r3, [r0, #24]
 8002c8e:	b103      	cbz	r3, 8002c92 <UI_DACExec+0x6>
    pHandle->pFct_DACExec(pHandle);
 8002c90:	4718      	bx	r3
 8002c92:	4770      	bx	lr

08002c94 <UI_SetDAC>:
  if (pHandle->pFctDACSetChannelConfig)
 8002c94:	6843      	ldr	r3, [r0, #4]
 8002c96:	b103      	cbz	r3, 8002c9a <UI_SetDAC+0x6>
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002c98:	4718      	bx	r3
 8002c9a:	4770      	bx	lr

08002c9c <UI_GetDAC>:
  if (pHandle->pFctDACGetChannelConfig)
 8002c9c:	6883      	ldr	r3, [r0, #8]
 8002c9e:	b103      	cbz	r3, 8002ca2 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002ca0:	4718      	bx	r3
  }
  return retVal;
}
 8002ca2:	2083      	movs	r0, #131	; 0x83
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	4917      	ldr	r1, [pc, #92]	; (8002d08 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002cae:	4819      	ldr	r0, [pc, #100]	; (8002d14 <SystemInit+0x6c>)
{
 8002cb0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb2:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8002cb6:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8002cba:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8002cbe:	681c      	ldr	r4, [r3, #0]
 8002cc0:	f044 0401 	orr.w	r4, r4, #1
 8002cc4:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8002cc6:	685c      	ldr	r4, [r3, #4]
 8002cc8:	4022      	ands	r2, r4
 8002cca:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cd6:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cde:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002ce6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cea:	f022 020f 	bic.w	r2, r2, #15
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002cf2:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002cf4:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002cfa:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8002cfc:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cfe:	608a      	str	r2, [r1, #8]
#endif
}
 8002d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	f87fc00c 	.word	0xf87fc00c
 8002d14:	ff00fccc 	.word	0xff00fccc

08002d18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d18:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_InitTick+0x3c>)
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_InitTick+0x40>)
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
{
 8002d22:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d28:	fbb0 f0f2 	udiv	r0, r0, r2
 8002d2c:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d30:	f000 fd20 	bl	8003774 <HAL_SYSTICK_Config>
 8002d34:	b908      	cbnz	r0, 8002d3a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	2d0f      	cmp	r5, #15
 8002d38:	d901      	bls.n	8002d3e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
 8002d3e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	4602      	mov	r2, r0
 8002d42:	4629      	mov	r1, r5
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 fcd2 	bl	80036f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_InitTick+0x44>)
 8002d4e:	4620      	mov	r0, r4
 8002d50:	601d      	str	r5, [r3, #0]
 8002d52:	bd38      	pop	{r3, r4, r5, pc}
 8002d54:	20000764 	.word	0x20000764
 8002d58:	20000760 	.word	0x20000760
 8002d5c:	20000768 	.word	0x20000768

08002d60 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_Init+0x20>)
{
 8002d62:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	6813      	ldr	r3, [r2, #0]
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	f000 fcad 	bl	80036cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d72:	2004      	movs	r0, #4
 8002d74:	f7ff ffd0 	bl	8002d18 <HAL_InitTick>
  HAL_MspInit();
 8002d78:	f7ff f8a6 	bl	8001ec8 <HAL_MspInit>
}
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	bd08      	pop	{r3, pc}
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d84:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <HAL_IncTick+0x10>)
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_IncTick+0x14>)
 8002d88:	6811      	ldr	r1, [r2, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	440b      	add	r3, r1
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000aac 	.word	0x20000aac
 8002d98:	20000764 	.word	0x20000764

08002d9c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002d9c:	4b01      	ldr	r3, [pc, #4]	; (8002da4 <HAL_GetTick+0x8>)
 8002d9e:	6818      	ldr	r0, [r3, #0]
}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000aac 	.word	0x20000aac

08002da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002db0:	2800      	cmp	r0, #0
 8002db2:	f000 808d 	beq.w	8002ed0 <HAL_ADC_Init+0x128>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002db6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002db8:	f013 0310 	ands.w	r3, r3, #16
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	d116      	bne.n	8002dee <HAL_ADC_Init+0x46>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	d077      	beq.n	8002eb6 <HAL_ADC_Init+0x10e>
 8002dc6:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002dc8:	6891      	ldr	r1, [r2, #8]
 8002dca:	00c9      	lsls	r1, r1, #3
 8002dcc:	d567      	bpl.n	8002e9e <HAL_ADC_Init+0xf6>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002dce:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002dd0:	008f      	lsls	r7, r1, #2
 8002dd2:	d464      	bmi.n	8002e9e <HAL_ADC_Init+0xf6>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dd4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002dd6:	06ce      	lsls	r6, r1, #27
 8002dd8:	d400      	bmi.n	8002ddc <HAL_ADC_Init+0x34>
 8002dda:	b163      	cbz	r3, 8002df6 <HAL_ADC_Init+0x4e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dde:	f023 0312 	bic.w	r3, r3, #18
 8002de2:	f043 0310 	orr.w	r3, r3, #16
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002de6:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8002de8:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 8002dea:	b003      	add	sp, #12
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002df0:	06db      	lsls	r3, r3, #27
 8002df2:	d4f3      	bmi.n	8002ddc <HAL_ADC_Init+0x34>
 8002df4:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002df6:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002df8:	f010 0004 	ands.w	r0, r0, #4
 8002dfc:	d1ee      	bne.n	8002ddc <HAL_ADC_Init+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002e00:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002e04:	f041 0102 	orr.w	r1, r1, #2
 8002e08:	6461      	str	r1, [r4, #68]	; 0x44
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e0a:	6893      	ldr	r3, [r2, #8]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f000 809d 	beq.w	8002f50 <HAL_ADC_Init+0x1a8>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002e16:	496e      	ldr	r1, [pc, #440]	; (8002fd0 <HAL_ADC_Init+0x228>)
 8002e18:	6865      	ldr	r5, [r4, #4]
 8002e1a:	688b      	ldr	r3, [r1, #8]
 8002e1c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e20:	432b      	orrs	r3, r5
 8002e22:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8002e24:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002e26:	68e1      	ldr	r1, [r4, #12]
 8002e28:	68a3      	ldr	r3, [r4, #8]
 8002e2a:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8002e2e:	2f01      	cmp	r7, #1
 8002e30:	ea43 0301 	orr.w	r3, r3, r1
 8002e34:	bf18      	it	ne
 8002e36:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002e3a:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e3e:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8002e40:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e44:	d07c      	beq.n	8002f40 <HAL_ADC_Init+0x198>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e48:	2901      	cmp	r1, #1
 8002e4a:	d002      	beq.n	8002e52 <HAL_ADC_Init+0xaa>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002e4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e4e:	4301      	orrs	r1, r0
 8002e50:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e52:	6891      	ldr	r1, [r2, #8]
 8002e54:	f011 0f0c 	tst.w	r1, #12
 8002e58:	d10b      	bne.n	8002e72 <HAL_ADC_Init+0xca>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e5a:	68d0      	ldr	r0, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5e:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e60:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002e64:	0049      	lsls	r1, r1, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e66:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002e6a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e6e:	60d0      	str	r0, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002e70:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8002e72:	68d5      	ldr	r5, [r2, #12]
 8002e74:	4957      	ldr	r1, [pc, #348]	; (8002fd4 <HAL_ADC_Init+0x22c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e76:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8002e78:	4029      	ands	r1, r5
 8002e7a:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e7c:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8002e7e:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e80:	d056      	beq.n	8002f30 <HAL_ADC_Init+0x188>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002e84:	f023 030f 	bic.w	r3, r3, #15
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8002e8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ea0:	f023 0312 	bic.w	r3, r3, #18
 8002ea4:	f043 0310 	orr.w	r3, r3, #16
 8002ea8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002eb4:	e792      	b.n	8002ddc <HAL_ADC_Init+0x34>
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8002eb8:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8002eba:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8002ebc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8002ec0:	f7ff f820 	bl	8001f04 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	6893      	ldr	r3, [r2, #8]
 8002ec8:	00de      	lsls	r6, r3, #3
 8002eca:	d504      	bpl.n	8002ed6 <HAL_ADC_Init+0x12e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e77b      	b.n	8002dc8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8002ed0:	2001      	movs	r0, #1
}
 8002ed2:	b003      	add	sp, #12
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ed6:	6893      	ldr	r3, [r2, #8]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d047      	beq.n	8002f70 <HAL_ADC_Init+0x1c8>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ee2:	06d8      	lsls	r0, r3, #27
 8002ee4:	d4f2      	bmi.n	8002ecc <HAL_ADC_Init+0x124>
          ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	6c61      	ldr	r1, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <HAL_ADC_Init+0x230>)
 8002eea:	483c      	ldr	r0, [pc, #240]	; (8002fdc <HAL_ADC_Init+0x234>)
 8002eec:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002eee:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002ef2:	f021 0102 	bic.w	r1, r1, #2
 8002ef6:	f041 0102 	orr.w	r1, r1, #2
 8002efa:	6461      	str	r1, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002efc:	6891      	ldr	r1, [r2, #8]
 8002efe:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002f02:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f04:	fba0 1303 	umull	r1, r3, r0, r3
 8002f08:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002f0a:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f10:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002f12:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002f16:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f18:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002f1a:	9b01      	ldr	r3, [sp, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f43f af53 	beq.w	8002dc8 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8002f22:	9b01      	ldr	r3, [sp, #4]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002f28:	9b01      	ldr	r3, [sp, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f9      	bne.n	8002f22 <HAL_ADC_Init+0x17a>
 8002f2e:	e74b      	b.n	8002dc8 <HAL_ADC_Init+0x20>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002f30:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f32:	6a23      	ldr	r3, [r4, #32]
 8002f34:	f021 010f 	bic.w	r1, r1, #15
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	e7a4      	b.n	8002e8a <HAL_ADC_Init+0xe2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f40:	b95e      	cbnz	r6, 8002f5a <HAL_ADC_Init+0x1b2>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002f42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f44:	3901      	subs	r1, #1
 8002f46:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	e77a      	b.n	8002e46 <HAL_ADC_Init+0x9e>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f50:	6813      	ldr	r3, [r2, #0]
 8002f52:	07dd      	lsls	r5, r3, #31
 8002f54:	f57f af5f 	bpl.w	8002e16 <HAL_ADC_Init+0x6e>
 8002f58:	e764      	b.n	8002e24 <HAL_ADC_Init+0x7c>
        ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f5c:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8002f60:	f041 0120 	orr.w	r1, r1, #32
 8002f64:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f68:	f041 0101 	orr.w	r1, r1, #1
 8002f6c:	64a1      	str	r1, [r4, #72]	; 0x48
 8002f6e:	e76a      	b.n	8002e46 <HAL_ADC_Init+0x9e>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	07dd      	lsls	r5, r3, #31
 8002f74:	d5b4      	bpl.n	8002ee0 <HAL_ADC_Init+0x138>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f76:	6893      	ldr	r3, [r2, #8]
 8002f78:	f003 030d 	and.w	r3, r3, #13
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d00a      	beq.n	8002f96 <HAL_ADC_Init+0x1ee>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f80:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	f043 0310 	orr.w	r3, r3, #16
 8002f86:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f92:	2301      	movs	r3, #1
 8002f94:	e718      	b.n	8002dc8 <HAL_ADC_Init+0x20>
      __HAL_ADC_DISABLE(hadc);
 8002f96:	6893      	ldr	r3, [r2, #8]
 8002f98:	2103      	movs	r1, #3
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	6093      	str	r3, [r2, #8]
 8002fa0:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002fa2:	f7ff fefb 	bl	8002d9c <HAL_GetTick>
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_Init+0x20c>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002faa:	f7ff fef7 	bl	8002d9c <HAL_GetTick>
 8002fae:	1b40      	subs	r0, r0, r5
 8002fb0:	2802      	cmp	r0, #2
 8002fb2:	d809      	bhi.n	8002fc8 <HAL_ADC_Init+0x220>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	6893      	ldr	r3, [r2, #8]
 8002fb8:	f013 0301 	ands.w	r3, r3, #1
 8002fbc:	d1f5      	bne.n	8002faa <HAL_ADC_Init+0x202>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fbe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002fc0:	06c9      	lsls	r1, r1, #27
 8002fc2:	f53f af01 	bmi.w	8002dc8 <HAL_ADC_Init+0x20>
 8002fc6:	e78e      	b.n	8002ee6 <HAL_ADC_Init+0x13e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	e7d9      	b.n	8002f82 <HAL_ADC_Init+0x1da>
 8002fce:	bf00      	nop
 8002fd0:	50000300 	.word	0x50000300
 8002fd4:	fff0c007 	.word	0xfff0c007
 8002fd8:	20000760 	.word	0x20000760
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <HAL_ADC_ConfigChannel>:
{
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8002fe6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 8002fea:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8002fec:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8002fee:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002ff0:	d047      	beq.n	8003082 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ff2:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ff4:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ff6:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 8002ff8:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ffa:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8002ffc:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003000:	d508      	bpl.n	8003014 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003010:	b003      	add	sp, #12
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8003014:	6848      	ldr	r0, [r1, #4]
 8003016:	2804      	cmp	r0, #4
 8003018:	d936      	bls.n	8003088 <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 800301a:	2809      	cmp	r0, #9
 800301c:	d870      	bhi.n	8003100 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->SQR2,
 800301e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003022:	0040      	lsls	r0, r0, #1
 8003024:	381e      	subs	r0, #30
 8003026:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003028:	680d      	ldr	r5, [r1, #0]
 800302a:	271f      	movs	r7, #31
 800302c:	4087      	lsls	r7, r0
 800302e:	ea26 0607 	bic.w	r6, r6, r7
 8003032:	fa05 f000 	lsl.w	r0, r5, r0
 8003036:	4330      	orrs	r0, r6
 8003038:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800303a:	6890      	ldr	r0, [r2, #8]
 800303c:	f010 0f0c 	tst.w	r0, #12
 8003040:	d133      	bne.n	80030aa <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003042:	2d09      	cmp	r5, #9
 8003044:	d94e      	bls.n	80030e4 <HAL_ADC_ConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003046:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800304a:	3f1e      	subs	r7, #30
 800304c:	6990      	ldr	r0, [r2, #24]
 800304e:	688e      	ldr	r6, [r1, #8]
 8003050:	f04f 0e07 	mov.w	lr, #7
 8003054:	fa0e fe07 	lsl.w	lr, lr, r7
 8003058:	ea20 000e 	bic.w	r0, r0, lr
 800305c:	40be      	lsls	r6, r7
 800305e:	4330      	orrs	r0, r6
 8003060:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003062:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8003064:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003066:	694f      	ldr	r7, [r1, #20]
 8003068:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800306c:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800306e:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003070:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8003074:	2e03      	cmp	r6, #3
 8003076:	f200 80f2 	bhi.w	800325e <HAL_ADC_ConfigChannel+0x27e>
 800307a:	e8df f006 	tbb	[pc, r6]
 800307e:	737d      	.short	0x737d
 8003080:	5f69      	.short	0x5f69
  __HAL_LOCK(hadc);
 8003082:	2002      	movs	r0, #2
}
 8003084:	b003      	add	sp, #12
 8003086:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 8003088:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800308c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800308e:	680d      	ldr	r5, [r1, #0]
 8003090:	0040      	lsls	r0, r0, #1
 8003092:	271f      	movs	r7, #31
 8003094:	4087      	lsls	r7, r0
 8003096:	ea26 0607 	bic.w	r6, r6, r7
 800309a:	fa05 f000 	lsl.w	r0, r5, r0
 800309e:	4330      	orrs	r0, r6
 80030a0:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030a2:	6890      	ldr	r0, [r2, #8]
 80030a4:	f010 0f0c 	tst.w	r0, #12
 80030a8:	d0cb      	beq.n	8003042 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030aa:	6890      	ldr	r0, [r2, #8]
 80030ac:	f000 0003 	and.w	r0, r0, #3
 80030b0:	2801      	cmp	r0, #1
 80030b2:	d013      	beq.n	80030dc <HAL_ADC_ConfigChannel+0xfc>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030b4:	2c01      	cmp	r4, #1
 80030b6:	f000 80a4 	beq.w	8003202 <HAL_ADC_ConfigChannel+0x222>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80030ba:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80030be:	2001      	movs	r0, #1
 80030c0:	40a8      	lsls	r0, r5
 80030c2:	ea21 0100 	bic.w	r1, r1, r0
 80030c6:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030ca:	2d10      	cmp	r5, #16
 80030cc:	d072      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x1d4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030ce:	2d11      	cmp	r5, #17
 80030d0:	f000 80ae 	beq.w	8003230 <HAL_ADC_ConfigChannel+0x250>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030d4:	2d12      	cmp	r5, #18
 80030d6:	d059      	beq.n	800318c <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d8:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80030da:	e796      	b.n	800300a <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030dc:	6810      	ldr	r0, [r2, #0]
 80030de:	07c0      	lsls	r0, r0, #31
 80030e0:	d5e8      	bpl.n	80030b4 <HAL_ADC_ConfigChannel+0xd4>
 80030e2:	e7f9      	b.n	80030d8 <HAL_ADC_ConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030e4:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80030e8:	6950      	ldr	r0, [r2, #20]
 80030ea:	688e      	ldr	r6, [r1, #8]
 80030ec:	2707      	movs	r7, #7
 80030ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80030f2:	ea20 0007 	bic.w	r0, r0, r7
 80030f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80030fa:	4330      	orrs	r0, r6
 80030fc:	6150      	str	r0, [r2, #20]
 80030fe:	e7b0      	b.n	8003062 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 8003100:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003102:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003106:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 800310a:	d80b      	bhi.n	8003124 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800310c:	383c      	subs	r0, #60	; 0x3c
 800310e:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8003110:	680d      	ldr	r5, [r1, #0]
 8003112:	271f      	movs	r7, #31
 8003114:	4087      	lsls	r7, r0
 8003116:	ea26 0607 	bic.w	r6, r6, r7
 800311a:	fa05 f000 	lsl.w	r0, r5, r0
 800311e:	4330      	orrs	r0, r6
 8003120:	6390      	str	r0, [r2, #56]	; 0x38
 8003122:	e78a      	b.n	800303a <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003124:	385a      	subs	r0, #90	; 0x5a
 8003126:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8003128:	680d      	ldr	r5, [r1, #0]
 800312a:	271f      	movs	r7, #31
 800312c:	4087      	lsls	r7, r0
 800312e:	ea26 0607 	bic.w	r6, r6, r7
 8003132:	fa05 f000 	lsl.w	r0, r5, r0
 8003136:	4330      	orrs	r0, r6
 8003138:	63d0      	str	r0, [r2, #60]	; 0x3c
 800313a:	e77e      	b.n	800303a <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800313c:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 800313e:	4e6a      	ldr	r6, [pc, #424]	; (80032e8 <HAL_ADC_ConfigChannel+0x308>)
 8003140:	403e      	ands	r6, r7
 8003142:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003146:	4330      	orrs	r0, r6
 8003148:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 800314c:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 800314e:	e7ac      	b.n	80030aa <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003150:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8003152:	4e65      	ldr	r6, [pc, #404]	; (80032e8 <HAL_ADC_ConfigChannel+0x308>)
 8003154:	403e      	ands	r6, r7
 8003156:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800315a:	4330      	orrs	r0, r6
 800315c:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8003160:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8003162:	e7a2      	b.n	80030aa <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003164:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8003166:	4e60      	ldr	r6, [pc, #384]	; (80032e8 <HAL_ADC_ConfigChannel+0x308>)
 8003168:	403e      	ands	r6, r7
 800316a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800316e:	4330      	orrs	r0, r6
 8003170:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8003174:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8003176:	e798      	b.n	80030aa <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003178:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800317a:	4e5b      	ldr	r6, [pc, #364]	; (80032e8 <HAL_ADC_ConfigChannel+0x308>)
 800317c:	403e      	ands	r6, r7
 800317e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003182:	4330      	orrs	r0, r6
 8003184:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8003188:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 800318a:	e78e      	b.n	80030aa <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800318c:	4957      	ldr	r1, [pc, #348]	; (80032ec <HAL_ADC_ConfigChannel+0x30c>)
 800318e:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003190:	024d      	lsls	r5, r1, #9
 8003192:	d4a1      	bmi.n	80030d8 <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003194:	6891      	ldr	r1, [r2, #8]
 8003196:	f001 0103 	and.w	r1, r1, #3
 800319a:	2901      	cmp	r1, #1
 800319c:	f040 809c 	bne.w	80032d8 <HAL_ADC_ConfigChannel+0x2f8>
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	07d0      	lsls	r0, r2, #31
 80031a4:	f140 8098 	bpl.w	80032d8 <HAL_ADC_ConfigChannel+0x2f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031aa:	f042 0220 	orr.w	r2, r2, #32
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80031b0:	2001      	movs	r0, #1
 80031b2:	e72a      	b.n	800300a <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031b4:	494d      	ldr	r1, [pc, #308]	; (80032ec <HAL_ADC_ConfigChannel+0x30c>)
 80031b6:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031b8:	020f      	lsls	r7, r1, #8
 80031ba:	d48d      	bmi.n	80030d8 <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80031bc:	6891      	ldr	r1, [r2, #8]
 80031be:	f001 0103 	and.w	r1, r1, #3
 80031c2:	2901      	cmp	r1, #1
 80031c4:	f000 8083 	beq.w	80032ce <HAL_ADC_ConfigChannel+0x2ee>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031c8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80031cc:	d184      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031ce:	4947      	ldr	r1, [pc, #284]	; (80032ec <HAL_ADC_ConfigChannel+0x30c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031d0:	4c47      	ldr	r4, [pc, #284]	; (80032f0 <HAL_ADC_ConfigChannel+0x310>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031d2:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031d4:	4847      	ldr	r0, [pc, #284]	; (80032f4 <HAL_ADC_ConfigChannel+0x314>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031da:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031dc:	6822      	ldr	r2, [r4, #0]
 80031de:	fba0 1202 	umull	r1, r2, r0, r2
 80031e2:	0c92      	lsrs	r2, r2, #18
 80031e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80031e8:	0052      	lsls	r2, r2, #1
 80031ea:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80031ec:	9a01      	ldr	r2, [sp, #4]
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	f43f af72 	beq.w	80030d8 <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 80031f4:	9a01      	ldr	r2, [sp, #4]
 80031f6:	3a01      	subs	r2, #1
 80031f8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80031fa:	9a01      	ldr	r2, [sp, #4]
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	d1f9      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x214>
 8003200:	e76a      	b.n	80030d8 <HAL_ADC_ConfigChannel+0xf8>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003202:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8003206:	40ac      	lsls	r4, r5
 8003208:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800320a:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800320c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003210:	d940      	bls.n	8003294 <HAL_ADC_ConfigChannel+0x2b4>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003212:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8003216:	688e      	ldr	r6, [r1, #8]
 8003218:	6994      	ldr	r4, [r2, #24]
 800321a:	f1a0 011b 	sub.w	r1, r0, #27
 800321e:	2707      	movs	r7, #7
 8003220:	408f      	lsls	r7, r1
 8003222:	fa06 f001 	lsl.w	r0, r6, r1
 8003226:	ea24 0107 	bic.w	r1, r4, r7
 800322a:	4301      	orrs	r1, r0
 800322c:	6191      	str	r1, [r2, #24]
 800322e:	e74c      	b.n	80030ca <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003230:	492e      	ldr	r1, [pc, #184]	; (80032ec <HAL_ADC_ConfigChannel+0x30c>)
 8003232:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003234:	01ce      	lsls	r6, r1, #7
 8003236:	f53f af4f 	bmi.w	80030d8 <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800323a:	6891      	ldr	r1, [r2, #8]
 800323c:	f001 0103 	and.w	r1, r1, #3
 8003240:	2901      	cmp	r1, #1
 8003242:	d102      	bne.n	800324a <HAL_ADC_ConfigChannel+0x26a>
 8003244:	6811      	ldr	r1, [r2, #0]
 8003246:	07c9      	lsls	r1, r1, #31
 8003248:	d4ae      	bmi.n	80031a8 <HAL_ADC_ConfigChannel+0x1c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800324a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800324e:	f47f af43 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003252:	4926      	ldr	r1, [pc, #152]	; (80032ec <HAL_ADC_ConfigChannel+0x30c>)
 8003254:	688a      	ldr	r2, [r1, #8]
 8003256:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800325a:	608a      	str	r2, [r1, #8]
 800325c:	e73c      	b.n	80030d8 <HAL_ADC_ConfigChannel+0xf8>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800325e:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8003260:	06a8      	lsls	r0, r5, #26
 8003262:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003266:	4286      	cmp	r6, r0
 8003268:	d02c      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x2e4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800326a:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800326c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003270:	42b0      	cmp	r0, r6
 8003272:	d022      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x2da>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003274:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8003276:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800327a:	42b0      	cmp	r0, r6
 800327c:	d018      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x2d0>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800327e:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8003280:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003284:	42b0      	cmp	r0, r6
 8003286:	f47f af10 	bne.w	80030aa <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800328a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800328c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003290:	66d0      	str	r0, [r2, #108]	; 0x6c
 8003292:	e70a      	b.n	80030aa <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003294:	1c68      	adds	r0, r5, #1
 8003296:	688e      	ldr	r6, [r1, #8]
 8003298:	6954      	ldr	r4, [r2, #20]
 800329a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800329e:	2707      	movs	r7, #7
 80032a0:	408f      	lsls	r7, r1
 80032a2:	fa06 f001 	lsl.w	r0, r6, r1
 80032a6:	ea24 0107 	bic.w	r1, r4, r7
 80032aa:	4301      	orrs	r1, r0
 80032ac:	6151      	str	r1, [r2, #20]
 80032ae:	e70e      	b.n	80030ce <HAL_ADC_ConfigChannel+0xee>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80032b0:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80032b2:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80032b6:	6696      	str	r6, [r2, #104]	; 0x68
 80032b8:	e7e1      	b.n	800327e <HAL_ADC_ConfigChannel+0x29e>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80032ba:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80032bc:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80032c0:	6656      	str	r6, [r2, #100]	; 0x64
 80032c2:	e7d7      	b.n	8003274 <HAL_ADC_ConfigChannel+0x294>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80032c4:	6e16      	ldr	r6, [r2, #96]	; 0x60
 80032c6:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80032ca:	6616      	str	r6, [r2, #96]	; 0x60
 80032cc:	e7cd      	b.n	800326a <HAL_ADC_ConfigChannel+0x28a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032ce:	6811      	ldr	r1, [r2, #0]
 80032d0:	07cc      	lsls	r4, r1, #31
 80032d2:	f53f af69 	bmi.w	80031a8 <HAL_ADC_ConfigChannel+0x1c8>
 80032d6:	e777      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80032d8:	4904      	ldr	r1, [pc, #16]	; (80032ec <HAL_ADC_ConfigChannel+0x30c>)
 80032da:	688a      	ldr	r2, [r1, #8]
 80032dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80032e0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e2:	2000      	movs	r0, #0
 80032e4:	e691      	b.n	800300a <HAL_ADC_ConfigChannel+0x2a>
 80032e6:	bf00      	nop
 80032e8:	83fff000 	.word	0x83fff000
 80032ec:	50000300 	.word	0x50000300
 80032f0:	20000760 	.word	0x20000760
 80032f4:	431bde83 	.word	0x431bde83

080032f8 <HAL_ADCEx_InjectedConfigChannel>:
{
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	4602      	mov	r2, r0
 80032fc:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 80032fe:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 8003302:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003304:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8003306:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003308:	f000 80a0 	beq.w	800344c <HAL_ADCEx_InjectedConfigChannel+0x154>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800330c:	6913      	ldr	r3, [r2, #16]
  __HAL_LOCK(hadc);
 800330e:	2001      	movs	r0, #1
 8003310:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003314:	2b00      	cmp	r3, #0
 8003316:	d14c      	bne.n	80033b2 <HAL_ADCEx_InjectedConfigChannel+0xba>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003318:	684b      	ldr	r3, [r1, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	f000 813f 	beq.w	800359e <HAL_ADCEx_InjectedConfigChannel+0x2a6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003320:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	f040 0020 	orr.w	r0, r0, #32
 8003328:	6450      	str	r0, [r2, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800332a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800332c:	689c      	ldr	r4, [r3, #8]
 800332e:	0725      	lsls	r5, r4, #28
 8003330:	d40d      	bmi.n	800334e <HAL_ADCEx_InjectedConfigChannel+0x56>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003332:	6a0c      	ldr	r4, [r1, #32]
 8003334:	2c00      	cmp	r4, #0
 8003336:	f040 809b 	bne.w	8003470 <HAL_ADCEx_InjectedConfigChannel+0x178>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800333a:	69cc      	ldr	r4, [r1, #28]
 800333c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800333e:	68dd      	ldr	r5, [r3, #12]
 8003340:	0524      	lsls	r4, r4, #20
 8003342:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003346:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800334a:	432c      	orrs	r4, r5
 800334c:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800334e:	689c      	ldr	r4, [r3, #8]
 8003350:	f014 0f0c 	tst.w	r4, #12
 8003354:	d15a      	bne.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x114>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003356:	6a8c      	ldr	r4, [r1, #40]	; 0x28
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003358:	6a0d      	ldr	r5, [r1, #32]
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800335a:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800335c:	68dc      	ldr	r4, [r3, #12]
 800335e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003362:	f000 8147 	beq.w	80035f4 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003366:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003368:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800336a:	f000 810d 	beq.w	8003588 <HAL_ADCEx_InjectedConfigChannel+0x290>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800336e:	680c      	ldr	r4, [r1, #0]
 8003370:	2c09      	cmp	r4, #9
 8003372:	d86e      	bhi.n	8003452 <HAL_ADCEx_InjectedConfigChannel+0x15a>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003374:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003378:	695d      	ldr	r5, [r3, #20]
 800337a:	688e      	ldr	r6, [r1, #8]
 800337c:	2707      	movs	r7, #7
 800337e:	fa07 f70e 	lsl.w	r7, r7, lr
 8003382:	ea25 0507 	bic.w	r5, r5, r7
 8003386:	fa06 f60e 	lsl.w	r6, r6, lr
 800338a:	4335      	orrs	r5, r6
 800338c:	615d      	str	r5, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800338e:	68dd      	ldr	r5, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8003390:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003392:	694f      	ldr	r7, [r1, #20]
 8003394:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8003398:	006d      	lsls	r5, r5, #1
    switch (sConfigInjected->InjectedOffsetNumber)
 800339a:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800339c:	fa07 f505 	lsl.w	r5, r7, r5
    switch (sConfigInjected->InjectedOffsetNumber)
 80033a0:	2e03      	cmp	r6, #3
 80033a2:	f200 813e 	bhi.w	8003622 <HAL_ADCEx_InjectedConfigChannel+0x32a>
 80033a6:	e8df f016 	tbh	[pc, r6, lsl #1]
 80033aa:	00cc      	.short	0x00cc
 80033ac:	002600c0 	.word	0x002600c0
 80033b0:	00b4      	.short	0x00b4
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80033b2:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80033b4:	4284      	cmp	r4, r0
 80033b6:	d0af      	beq.n	8003318 <HAL_ADCEx_InjectedConfigChannel+0x20>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80033b8:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d169      	bne.n	8003492 <HAL_ADCEx_InjectedConfigChannel+0x19a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80033be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80033c0:	6514      	str	r4, [r2, #80]	; 0x50
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80033c2:	2b01      	cmp	r3, #1
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80033c4:	64d0      	str	r0, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80033c6:	f000 8166 	beq.w	8003696 <HAL_ADCEx_InjectedConfigChannel+0x39e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80033ca:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80033cc:	3c01      	subs	r4, #1
 80033ce:	4303      	orrs	r3, r0
 80033d0:	4323      	orrs	r3, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80033d2:	684d      	ldr	r5, [r1, #4]
 80033d4:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 80033d6:	6514      	str	r4, [r2, #80]	; 0x50
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80033d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033dc:	0068      	lsls	r0, r5, #1
 80033de:	3002      	adds	r0, #2
 80033e0:	241f      	movs	r4, #31
 80033e2:	4084      	lsls	r4, r0
 80033e4:	ea23 0304 	bic.w	r3, r3, r4
 80033e8:	fa06 f000 	lsl.w	r0, r6, r0
 80033ec:	4303      	orrs	r3, r0
 80033ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f0:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f2:	2000      	movs	r0, #0
 80033f4:	e79a      	b.n	800332c <HAL_ADCEx_InjectedConfigChannel+0x34>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80033f6:	f8d3 e068 	ldr.w	lr, [r3, #104]	; 0x68
 80033fa:	4eaf      	ldr	r6, [pc, #700]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80033fc:	06a7      	lsls	r7, r4, #26
 80033fe:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003402:	ea0e 0606 	and.w	r6, lr, r6
 8003406:	4337      	orrs	r7, r6
 8003408:	433d      	orrs	r5, r7
 800340a:	669d      	str	r5, [r3, #104]	; 0x68
  if (ADC_IS_ENABLE(hadc) == RESET)
 800340c:	689c      	ldr	r4, [r3, #8]
 800340e:	f004 0403 	and.w	r4, r4, #3
 8003412:	2c01      	cmp	r4, #1
 8003414:	f000 80be 	beq.w	8003594 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003418:	68cc      	ldr	r4, [r1, #12]
 800341a:	2c01      	cmp	r4, #1
 800341c:	f000 80d0 	beq.w	80035c0 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003420:	680d      	ldr	r5, [r1, #0]
 8003422:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003426:	2401      	movs	r4, #1
 8003428:	40ac      	lsls	r4, r5
 800342a:	ea21 0104 	bic.w	r1, r1, r4
 800342e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003432:	2d10      	cmp	r5, #16
 8003434:	d047      	beq.n	80034c6 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003436:	2d11      	cmp	r5, #17
 8003438:	f000 808f 	beq.w	800355a <HAL_ADCEx_InjectedConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800343c:	2d12      	cmp	r5, #18
 800343e:	f000 80dd 	beq.w	80035fc <HAL_ADCEx_InjectedConfigChannel+0x304>
  __HAL_UNLOCK(hadc);
 8003442:	2300      	movs	r3, #0
 8003444:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8003448:	b003      	add	sp, #12
 800344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800344c:	2002      	movs	r0, #2
}
 800344e:	b003      	add	sp, #12
 8003450:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003452:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8003456:	3f1e      	subs	r7, #30
 8003458:	699d      	ldr	r5, [r3, #24]
 800345a:	688e      	ldr	r6, [r1, #8]
 800345c:	f04f 0e07 	mov.w	lr, #7
 8003460:	fa0e fe07 	lsl.w	lr, lr, r7
 8003464:	ea25 050e 	bic.w	r5, r5, lr
 8003468:	40be      	lsls	r6, r7
 800346a:	4335      	orrs	r5, r6
 800346c:	619d      	str	r5, [r3, #24]
 800346e:	e78e      	b.n	800338e <HAL_ADCEx_InjectedConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003470:	68dc      	ldr	r4, [r3, #12]
 8003472:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003474:	69cd      	ldr	r5, [r1, #28]
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003476:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 800347a:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800347e:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003480:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003482:	f47f af64 	bne.w	800334e <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003486:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003488:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 800348c:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348e:	6454      	str	r4, [r2, #68]	; 0x44
 8003490:	e75d      	b.n	800334e <HAL_ADCEx_InjectedConfigChannel+0x56>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003492:	684b      	ldr	r3, [r1, #4]
 8003494:	680e      	ldr	r6, [r1, #0]
 8003496:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8003498:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	3302      	adds	r3, #2
 80034a0:	241f      	movs	r4, #31
 80034a2:	409c      	lsls	r4, r3
 80034a4:	ea25 0504 	bic.w	r5, r5, r4
 80034a8:	fa06 f303 	lsl.w	r3, r6, r3
 80034ac:	3801      	subs	r0, #1
 80034ae:	431d      	orrs	r5, r3
 80034b0:	64d5      	str	r5, [r2, #76]	; 0x4c
      hadc->InjectionConfig.ChannelCount --;
 80034b2:	6510      	str	r0, [r2, #80]	; 0x50
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d19b      	bne.n	80033f0 <HAL_ADCEx_InjectedConfigChannel+0xf8>
        MODIFY_REG(hadc->Instance->JSQR              ,
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	4c80      	ldr	r4, [pc, #512]	; (80036bc <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 80034bc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80034be:	4026      	ands	r6, r4
 80034c0:	4335      	orrs	r5, r6
 80034c2:	64dd      	str	r5, [r3, #76]	; 0x4c
 80034c4:	e732      	b.n	800332c <HAL_ADCEx_InjectedConfigChannel+0x34>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80034c6:	497e      	ldr	r1, [pc, #504]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80034c8:	6889      	ldr	r1, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80034ca:	020f      	lsls	r7, r1, #8
 80034cc:	d4b9      	bmi.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	f001 0103 	and.w	r1, r1, #3
 80034d4:	2901      	cmp	r1, #1
 80034d6:	f000 80e4 	beq.w	80036a2 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034de:	d1b0      	bne.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034e0:	4977      	ldr	r1, [pc, #476]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e2:	4d78      	ldr	r5, [pc, #480]	; (80036c4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034e4:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e6:	4c78      	ldr	r4, [pc, #480]	; (80036c8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ec:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ee:	682b      	ldr	r3, [r5, #0]
 80034f0:	fba4 1303 	umull	r1, r3, r4, r3
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d09e      	beq.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
            wait_loop_index--;
 8003504:	9b01      	ldr	r3, [sp, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800350a:	9b01      	ldr	r3, [sp, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f9      	bne.n	8003504 <HAL_ADCEx_InjectedConfigChannel+0x20c>
 8003510:	e797      	b.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003512:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8003516:	4e68      	ldr	r6, [pc, #416]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8003518:	06a7      	lsls	r7, r4, #26
 800351a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800351e:	ea0e 0606 	and.w	r6, lr, r6
 8003522:	4337      	orrs	r7, r6
 8003524:	433d      	orrs	r5, r7
 8003526:	66dd      	str	r5, [r3, #108]	; 0x6c
      break;
 8003528:	e770      	b.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 800352a:	f8d3 e064 	ldr.w	lr, [r3, #100]	; 0x64
 800352e:	4e62      	ldr	r6, [pc, #392]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8003530:	06a7      	lsls	r7, r4, #26
 8003532:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003536:	ea0e 0606 	and.w	r6, lr, r6
 800353a:	4337      	orrs	r7, r6
 800353c:	433d      	orrs	r5, r7
 800353e:	665d      	str	r5, [r3, #100]	; 0x64
      break;
 8003540:	e764      	b.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003542:	f8d3 e060 	ldr.w	lr, [r3, #96]	; 0x60
 8003546:	4e5c      	ldr	r6, [pc, #368]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8003548:	06a7      	lsls	r7, r4, #26
 800354a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800354e:	ea0e 0606 	and.w	r6, lr, r6
 8003552:	4337      	orrs	r7, r6
 8003554:	433d      	orrs	r5, r7
 8003556:	661d      	str	r5, [r3, #96]	; 0x60
      break;
 8003558:	e758      	b.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x114>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800355a:	4959      	ldr	r1, [pc, #356]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 800355c:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800355e:	01ce      	lsls	r6, r1, #7
 8003560:	f53f af6f 	bmi.w	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	f001 0103 	and.w	r1, r1, #3
 800356a:	2901      	cmp	r1, #1
 800356c:	d102      	bne.n	8003574 <HAL_ADCEx_InjectedConfigChannel+0x27c>
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	07cc      	lsls	r4, r1, #31
 8003572:	d450      	bmi.n	8003616 <HAL_ADCEx_InjectedConfigChannel+0x31e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003578:	f47f af63 	bne.w	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800357c:	4950      	ldr	r1, [pc, #320]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 800357e:	688b      	ldr	r3, [r1, #8]
 8003580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003584:	608b      	str	r3, [r1, #8]
 8003586:	e75c      	b.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003588:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800358a:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 800358e:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003590:	6454      	str	r4, [r2, #68]	; 0x44
 8003592:	e6ec      	b.n	800336e <HAL_ADCEx_InjectedConfigChannel+0x76>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003594:	681c      	ldr	r4, [r3, #0]
 8003596:	07e4      	lsls	r4, r4, #31
 8003598:	f53f af53 	bmi.w	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
 800359c:	e73c      	b.n	8003418 <HAL_ADCEx_InjectedConfigChannel+0x120>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800359e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d07b      	beq.n	800369c <HAL_ADCEx_InjectedConfigChannel+0x3a4>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80035a4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80035a6:	680c      	ldr	r4, [r1, #0]
 80035a8:	4303      	orrs	r3, r0
 80035aa:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	4d42      	ldr	r5, [pc, #264]	; (80036bc <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 80035b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035b4:	4028      	ands	r0, r5
 80035b6:	4320      	orrs	r0, r4
 80035b8:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ba:	2000      	movs	r0, #0
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80035bc:	64d4      	str	r4, [r2, #76]	; 0x4c
 80035be:	e6b5      	b.n	800332c <HAL_ADCEx_InjectedConfigChannel+0x34>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80035c0:	680d      	ldr	r5, [r1, #0]
 80035c2:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 80035c6:	40ac      	lsls	r4, r5
 80035c8:	4334      	orrs	r4, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80035ca:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80035cc:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80035d0:	d942      	bls.n	8003658 <HAL_ADCEx_InjectedConfigChannel+0x360>
        MODIFY_REG(hadc->Instance->SMPR2,
 80035d2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80035d6:	688f      	ldr	r7, [r1, #8]
 80035d8:	699e      	ldr	r6, [r3, #24]
 80035da:	f1a4 011b 	sub.w	r1, r4, #27
 80035de:	f04f 0e07 	mov.w	lr, #7
 80035e2:	fa0e fe01 	lsl.w	lr, lr, r1
 80035e6:	fa07 f401 	lsl.w	r4, r7, r1
 80035ea:	ea26 010e 	bic.w	r1, r6, lr
 80035ee:	4321      	orrs	r1, r4
 80035f0:	6199      	str	r1, [r3, #24]
 80035f2:	e71e      	b.n	8003432 <HAL_ADCEx_InjectedConfigChannel+0x13a>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80035f4:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 80035f8:	60dc      	str	r4, [r3, #12]
 80035fa:	e6b8      	b.n	800336e <HAL_ADCEx_InjectedConfigChannel+0x76>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80035fc:	4930      	ldr	r1, [pc, #192]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80035fe:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003600:	024d      	lsls	r5, r1, #9
 8003602:	f53f af1e 	bmi.w	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	f001 0103 	and.w	r1, r1, #3
 800360c:	2901      	cmp	r1, #1
 800360e:	d14c      	bne.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0x3b2>
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	07db      	lsls	r3, r3, #31
 8003614:	d549      	bpl.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0x3b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003616:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003618:	f043 0320 	orr.w	r3, r3, #32
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800361e:	2001      	movs	r0, #1
 8003620:	e70f      	b.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003622:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8003624:	06a4      	lsls	r4, r4, #26
 8003626:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800362a:	42a5      	cmp	r5, r4
 800362c:	d024      	beq.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0x380>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800362e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8003630:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003634:	42ac      	cmp	r4, r5
 8003636:	d029      	beq.n	800368c <HAL_ADCEx_InjectedConfigChannel+0x394>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003638:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800363a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800363e:	42ac      	cmp	r4, r5
 8003640:	d01f      	beq.n	8003682 <HAL_ADCEx_InjectedConfigChannel+0x38a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003642:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8003644:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003648:	42ac      	cmp	r4, r5
 800364a:	f47f aedf 	bne.w	800340c <HAL_ADCEx_InjectedConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800364e:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003650:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003654:	66dc      	str	r4, [r3, #108]	; 0x6c
 8003656:	e6d9      	b.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x114>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003658:	1c6c      	adds	r4, r5, #1
 800365a:	688f      	ldr	r7, [r1, #8]
 800365c:	695e      	ldr	r6, [r3, #20]
 800365e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8003662:	f04f 0e07 	mov.w	lr, #7
 8003666:	fa0e fe01 	lsl.w	lr, lr, r1
 800366a:	fa07 f401 	lsl.w	r4, r7, r1
 800366e:	ea26 010e 	bic.w	r1, r6, lr
 8003672:	4321      	orrs	r1, r4
 8003674:	6159      	str	r1, [r3, #20]
 8003676:	e6de      	b.n	8003436 <HAL_ADCEx_InjectedConfigChannel+0x13e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003678:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800367a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800367e:	661d      	str	r5, [r3, #96]	; 0x60
 8003680:	e7d5      	b.n	800362e <HAL_ADCEx_InjectedConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003682:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8003684:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003688:	669d      	str	r5, [r3, #104]	; 0x68
 800368a:	e7da      	b.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x34a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800368c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800368e:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003692:	665d      	str	r5, [r3, #100]	; 0x64
 8003694:	e7d0      	b.n	8003638 <HAL_ADCEx_InjectedConfigChannel+0x340>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8003696:	1e63      	subs	r3, r4, #1
 8003698:	461c      	mov	r4, r3
 800369a:	e69a      	b.n	80033d2 <HAL_ADCEx_InjectedConfigChannel+0xda>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800369c:	680c      	ldr	r4, [r1, #0]
 800369e:	0224      	lsls	r4, r4, #8
 80036a0:	e785      	b.n	80035ae <HAL_ADCEx_InjectedConfigChannel+0x2b6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	07c9      	lsls	r1, r1, #31
 80036a6:	d4b6      	bmi.n	8003616 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80036a8:	e717      	b.n	80034da <HAL_ADCEx_InjectedConfigChannel+0x1e2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80036aa:	4905      	ldr	r1, [pc, #20]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80036ac:	688b      	ldr	r3, [r1, #8]
 80036ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036b2:	608b      	str	r3, [r1, #8]
 80036b4:	e6c5      	b.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x14a>
 80036b6:	bf00      	nop
 80036b8:	83fff000 	.word	0x83fff000
 80036bc:	82082000 	.word	0x82082000
 80036c0:	50000300 	.word	0x50000300
 80036c4:	20000760 	.word	0x20000760
 80036c8:	431bde83 	.word	0x431bde83

080036cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80036ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80036d4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80036d6:	0200      	lsls	r0, r0, #8
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80036e4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80036e6:	60d3      	str	r3, [r2, #12]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f2:	b470      	push	{r4, r5, r6}
 80036f4:	68dc      	ldr	r4, [r3, #12]
 80036f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036fa:	f1c4 0607 	rsb	r6, r4, #7
 80036fe:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003700:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	bf28      	it	cs
 8003706:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003708:	2b06      	cmp	r3, #6
 800370a:	d917      	bls.n	800373c <HAL_NVIC_SetPriority+0x4c>
 800370c:	3c03      	subs	r4, #3
 800370e:	2501      	movs	r5, #1
 8003710:	40a5      	lsls	r5, r4
 8003712:	3d01      	subs	r5, #1
 8003714:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003716:	2301      	movs	r3, #1
 8003718:	40b3      	lsls	r3, r6
 800371a:	3b01      	subs	r3, #1
 800371c:	4019      	ands	r1, r3
 800371e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8003720:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003722:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8003726:	db0c      	blt.n	8003742 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800372c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003730:	0109      	lsls	r1, r1, #4
 8003732:	b2c9      	uxtb	r1, r1
 8003734:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003738:	bc70      	pop	{r4, r5, r6}
 800373a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373c:	2200      	movs	r2, #0
 800373e:	4614      	mov	r4, r2
 8003740:	e7e9      	b.n	8003716 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_NVIC_SetPriority+0x68>)
 8003744:	f000 000f 	and.w	r0, r0, #15
 8003748:	0109      	lsls	r1, r1, #4
 800374a:	4403      	add	r3, r0
 800374c:	b2c9      	uxtb	r1, r1
 800374e:	7619      	strb	r1, [r3, #24]
 8003750:	bc70      	pop	{r4, r5, r6}
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00
 8003758:	e000ecfc 	.word	0xe000ecfc

0800375c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800375c:	f000 011f 	and.w	r1, r0, #31
 8003760:	2301      	movs	r3, #1
 8003762:	0940      	lsrs	r0, r0, #5
 8003764:	4a02      	ldr	r2, [pc, #8]	; (8003770 <HAL_NVIC_EnableIRQ+0x14>)
 8003766:	408b      	lsls	r3, r1
 8003768:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003774:	3801      	subs	r0, #1
 8003776:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800377a:	d20e      	bcs.n	800379a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003780:	4c08      	ldr	r4, [pc, #32]	; (80037a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003782:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	20f0      	movs	r0, #240	; 0xf0
 8003786:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800378c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800378e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003798:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800379a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <HAL_SYSTICK_IRQHandler>:
{
 80037ac:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80037ae:	f7ff fffb 	bl	80037a8 <HAL_SYSTICK_Callback>
 80037b2:	bd08      	pop	{r3, pc}

080037b4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80037b4:	b188      	cbz	r0, 80037da <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80037b6:	7903      	ldrb	r3, [r0, #4]
{ 
 80037b8:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 80037ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037be:	4604      	mov	r4, r0
 80037c0:	b13b      	cbz	r3, 80037d2 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037c2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80037c4:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037c6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80037c8:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80037ca:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037cc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80037ce:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 80037d0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80037d2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80037d4:	f7fe fbd8 	bl	8001f88 <HAL_DAC_MspInit>
 80037d8:	e7f3      	b.n	80037c2 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 80037da:	2001      	movs	r0, #1
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80037e0:	7943      	ldrb	r3, [r0, #5]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d01d      	beq.n	8003822 <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037e6:	2302      	movs	r3, #2
{
 80037e8:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ea:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037ec:	6804      	ldr	r4, [r0, #0]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037ee:	e891 0048 	ldmia.w	r1, {r3, r6}
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037f2:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 80037f6:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037f8:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037fa:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037fc:	ea21 0105 	bic.w	r1, r1, r5
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003800:	4093      	lsls	r3, r2
 8003802:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003804:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	21c0      	movs	r1, #192	; 0xc0
 800380a:	fa01 f202 	lsl.w	r2, r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800380e:	2501      	movs	r5, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003810:	2100      	movs	r1, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003812:	ea23 0202 	bic.w	r2, r3, r2
 8003816:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003818:	7105      	strb	r5, [r0, #4]
  __HAL_UNLOCK(hdac);
 800381a:	7141      	strb	r1, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 800381c:	bc70      	pop	{r4, r5, r6}
 800381e:	4608      	mov	r0, r1
 8003820:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003822:	2302      	movs	r3, #2
}
 8003824:	4618      	mov	r0, r3
 8003826:	4770      	bx	lr

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800382a:	6809      	ldr	r1, [r1, #0]
 800382c:	2900      	cmp	r1, #0
 800382e:	f000 80d9 	beq.w	80039e4 <HAL_GPIO_Init+0x1bc>
{
 8003832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003836:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 80039f8 <HAL_GPIO_Init+0x1d0>
{
 800383a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 800383c:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800383e:	f04f 0801 	mov.w	r8, #1
 8003842:	e079      	b.n	8003938 <HAL_GPIO_Init+0x110>
 8003844:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003848:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800384a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	fa03 f309 	lsl.w	r3, r3, r9
 8003852:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003854:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003858:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385c:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003860:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003864:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003868:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800386c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800386e:	f240 8098 	bls.w	80039a2 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8003872:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003874:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003878:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800387a:	fa02 f209 	lsl.w	r2, r2, r9
 800387e:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003880:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8003882:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003884:	d554      	bpl.n	8003930 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <HAL_GPIO_Init+0x1c0>)
 8003888:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <HAL_GPIO_Init+0x1c0>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6193      	str	r3, [r2, #24]
 8003892:	6993      	ldr	r3, [r2, #24]
 8003894:	f025 0603 	bic.w	r6, r5, #3
 8003898:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80038a4:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80038a6:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038aa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80038ac:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	f04f 090f 	mov.w	r9, #15
 80038b4:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038b8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80038bc:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038c0:	f000 8086 	beq.w	80039d0 <HAL_GPIO_Init+0x1a8>
 80038c4:	4a49      	ldr	r2, [pc, #292]	; (80039ec <HAL_GPIO_Init+0x1c4>)
 80038c6:	4290      	cmp	r0, r2
 80038c8:	f000 8084 	beq.w	80039d4 <HAL_GPIO_Init+0x1ac>
 80038cc:	4a48      	ldr	r2, [pc, #288]	; (80039f0 <HAL_GPIO_Init+0x1c8>)
 80038ce:	4290      	cmp	r0, r2
 80038d0:	f000 8083 	beq.w	80039da <HAL_GPIO_Init+0x1b2>
 80038d4:	4a47      	ldr	r2, [pc, #284]	; (80039f4 <HAL_GPIO_Init+0x1cc>)
 80038d6:	4290      	cmp	r0, r2
 80038d8:	bf0b      	itete	eq
 80038da:	f04f 0903 	moveq.w	r9, #3
 80038de:	2205      	movne	r2, #5
 80038e0:	fa09 f303 	lsleq.w	r3, r9, r3
 80038e4:	fa02 f303 	lslne.w	r3, r2, r3
 80038e8:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 80038ec:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 80038ee:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f4:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 80038f6:	bf54      	ite	pl
 80038f8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80038fa:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 80038fc:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003900:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003904:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8003906:	bf54      	ite	pl
 8003908:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800390a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 800390c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003910:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003914:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8003916:	bf54      	ite	pl
 8003918:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800391a:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 800391c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003920:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003924:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8003926:	bf54      	ite	pl
 8003928:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800392a:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 800392c:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8003930:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003932:	fa31 f305 	lsrs.w	r3, r1, r5
 8003936:	d048      	beq.n	80039ca <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003938:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 800393c:	ea12 0701 	ands.w	r7, r2, r1
 8003940:	d0f6      	beq.n	8003930 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003942:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003946:	f024 0a10 	bic.w	sl, r4, #16
 800394a:	f1ba 0f02 	cmp.w	sl, #2
 800394e:	f47f af79 	bne.w	8003844 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8003952:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8003956:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395a:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 800395e:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f04f 0a0f 	mov.w	sl, #15
 8003968:	fa0a fb03 	lsl.w	fp, sl, r3
 800396c:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003970:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8003974:	fa06 f303 	lsl.w	r3, r6, r3
 8003978:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 800397c:	f8c9 3020 	str.w	r3, [r9, #32]
 8003980:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003984:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8003986:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	fa03 f309 	lsl.w	r3, r3, r9
 800398e:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003990:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003994:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003998:	fa06 f609 	lsl.w	r6, r6, r9
 800399c:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80039a0:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80039a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a4:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80039ac:	fa06 f609 	lsl.w	r6, r6, r9
 80039b0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80039b4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80039b6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039ba:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039be:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039c2:	40ae      	lsls	r6, r5
 80039c4:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80039c6:	6046      	str	r6, [r0, #4]
 80039c8:	e753      	b.n	8003872 <HAL_GPIO_Init+0x4a>
  }
}
 80039ca:	b003      	add	sp, #12
 80039cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d0:	2300      	movs	r3, #0
 80039d2:	e789      	b.n	80038e8 <HAL_GPIO_Init+0xc0>
 80039d4:	fa08 f303 	lsl.w	r3, r8, r3
 80039d8:	e786      	b.n	80038e8 <HAL_GPIO_Init+0xc0>
 80039da:	f04f 0902 	mov.w	r9, #2
 80039de:	fa09 f303 	lsl.w	r3, r9, r3
 80039e2:	e781      	b.n	80038e8 <HAL_GPIO_Init+0xc0>
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	48000400 	.word	0x48000400
 80039f0:	48000800 	.word	0x48000800
 80039f4:	48000c00 	.word	0x48000c00
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	b90a      	cbnz	r2, 8003a02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fe:	6281      	str	r1, [r0, #40]	; 0x28
 8003a00:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a02:	6181      	str	r1, [r0, #24]
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop

08003a08 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f000 82cb 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x59c>
{
 8003a0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	6803      	ldr	r3, [r0, #0]
 8003a14:	07d9      	lsls	r1, r3, #31
{
 8003a16:	b083      	sub	sp, #12
 8003a18:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	d543      	bpl.n	8003aa4 <HAL_RCC_OscConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a1c:	49b7      	ldr	r1, [pc, #732]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003a1e:	684a      	ldr	r2, [r1, #4]
 8003a20:	f002 020c 	and.w	r2, r2, #12
 8003a24:	2a04      	cmp	r2, #4
 8003a26:	f000 81b0 	beq.w	8003d8a <HAL_RCC_OscConfig+0x382>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a2a:	684a      	ldr	r2, [r1, #4]
 8003a2c:	f002 020c 	and.w	r2, r2, #12
 8003a30:	2a08      	cmp	r2, #8
 8003a32:	f000 81a6 	beq.w	8003d82 <HAL_RCC_OscConfig+0x37a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	f000 8218 	beq.w	8003e70 <HAL_RCC_OscConfig+0x468>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8161 	beq.w	8003d08 <HAL_RCC_OscConfig+0x300>
 8003a46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4a:	f000 829e 	beq.w	8003f8a <HAL_RCC_OscConfig+0x582>
 8003a4e:	4bab      	ldr	r3, [pc, #684]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a5e:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a60:	4da6      	ldr	r5, [pc, #664]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003a62:	68a2      	ldr	r2, [r4, #8]
 8003a64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a66:	f023 030f 	bic.w	r3, r3, #15
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7ff f995 	bl	8002d9c <HAL_GetTick>
 8003a72:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003a76:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a78:	2601      	movs	r6, #1
 8003a7a:	e005      	b.n	8003a88 <HAL_RCC_OscConfig+0x80>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7ff f98e 	bl	8002d9c <HAL_GetTick>
 8003a80:	1bc0      	subs	r0, r0, r7
 8003a82:	2864      	cmp	r0, #100	; 0x64
 8003a84:	f200 8179 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003a88:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8c:	682a      	ldr	r2, [r5, #0]
 8003a8e:	fa98 f3a8 	rbit	r3, r8
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	fa06 f303 	lsl.w	r3, r6, r3
 8003a9e:	4213      	tst	r3, r2
 8003aa0:	d0ec      	beq.n	8003a7c <HAL_RCC_OscConfig+0x74>
 8003aa2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa4:	079f      	lsls	r7, r3, #30
 8003aa6:	d542      	bpl.n	8003b2e <HAL_RCC_OscConfig+0x126>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003aa8:	4a94      	ldr	r2, [pc, #592]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003aaa:	6851      	ldr	r1, [r2, #4]
 8003aac:	f011 0f0c 	tst.w	r1, #12
 8003ab0:	f000 80c9 	beq.w	8003c46 <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ab4:	6851      	ldr	r1, [r2, #4]
 8003ab6:	f001 010c 	and.w	r1, r1, #12
 8003aba:	2908      	cmp	r1, #8
 8003abc:	f000 80bf 	beq.w	8003c3e <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac0:	6922      	ldr	r2, [r4, #16]
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	f000 81ae 	beq.w	8003e24 <HAL_RCC_OscConfig+0x41c>
 8003ac8:	2201      	movs	r2, #1
 8003aca:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ada:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8003ade:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ae0:	f7ff f95c 	bl	8002d9c <HAL_GetTick>
 8003ae4:	f04f 0802 	mov.w	r8, #2
 8003ae8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4d84      	ldr	r5, [pc, #528]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003aec:	e005      	b.n	8003afa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aee:	f7ff f955 	bl	8002d9c <HAL_GetTick>
 8003af2:	1bc0      	subs	r0, r0, r7
 8003af4:	2802      	cmp	r0, #2
 8003af6:	f200 8140 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003afa:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	682a      	ldr	r2, [r5, #0]
 8003b00:	fa98 f3a8 	rbit	r3, r8
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa06 f303 	lsl.w	r3, r6, r3
 8003b10:	4213      	tst	r3, r2
 8003b12:	d0ec      	beq.n	8003aee <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	6829      	ldr	r1, [r5, #0]
 8003b16:	22f8      	movs	r2, #248	; 0xf8
 8003b18:	fa92 f2a2 	rbit	r2, r2
 8003b1c:	6963      	ldr	r3, [r4, #20]
 8003b1e:	fab2 f282 	clz	r2, r2
 8003b22:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8003b26:	4093      	lsls	r3, r2
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	071d      	lsls	r5, r3, #28
 8003b30:	d421      	bmi.n	8003b76 <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b32:	0758      	lsls	r0, r3, #29
 8003b34:	d54d      	bpl.n	8003bd2 <HAL_RCC_OscConfig+0x1ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b71      	ldr	r3, [pc, #452]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	00d1      	lsls	r1, r2, #3
 8003b3c:	f140 80c1 	bpl.w	8003cc2 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8003b40:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4d6e      	ldr	r5, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x2f8>)
 8003b46:	682b      	ldr	r3, [r5, #0]
 8003b48:	05da      	lsls	r2, r3, #23
 8003b4a:	f140 8106 	bpl.w	8003d5a <HAL_RCC_OscConfig+0x352>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4e:	68e3      	ldr	r3, [r4, #12]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f000 8193 	beq.w	8003e7c <HAL_RCC_OscConfig+0x474>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 812e 	beq.w	8003db8 <HAL_RCC_OscConfig+0x3b0>
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	f000 81b5 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x4c8>
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	621a      	str	r2, [r3, #32]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	621a      	str	r2, [r3, #32]
 8003b74:	e187      	b.n	8003e86 <HAL_RCC_OscConfig+0x47e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b76:	69a2      	ldr	r2, [r4, #24]
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d07b      	beq.n	8003c74 <HAL_RCC_OscConfig+0x26c>
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8003b82:	4b60      	ldr	r3, [pc, #384]	; (8003d04 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b84:	4e5d      	ldr	r6, [pc, #372]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_ENABLE();
 8003b86:	fab1 f181 	clz	r1, r1
 8003b8a:	440b      	add	r3, r1
 8003b8c:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8003b90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b92:	f7ff f903 	bl	8002d9c <HAL_GetTick>
 8003b96:	f04f 0802 	mov.w	r8, #2
 8003b9a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9c:	e005      	b.n	8003baa <HAL_RCC_OscConfig+0x1a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7ff f8fd 	bl	8002d9c <HAL_GetTick>
 8003ba2:	1bc0      	subs	r0, r0, r7
 8003ba4:	2802      	cmp	r0, #2
 8003ba6:	f200 80e8 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003baa:	fa98 f3a8 	rbit	r3, r8
 8003bae:	fa98 f3a8 	rbit	r3, r8
 8003bb2:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003bb8:	fa98 f3a8 	rbit	r3, r8
 8003bbc:	fab3 f383 	clz	r3, r3
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	fa05 f303 	lsl.w	r3, r5, r3
 8003bc8:	4213      	tst	r3, r2
 8003bca:	d0e8      	beq.n	8003b9e <HAL_RCC_OscConfig+0x196>
 8003bcc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bce:	0758      	lsls	r0, r3, #29
 8003bd0:	d4b1      	bmi.n	8003b36 <HAL_RCC_OscConfig+0x12e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd2:	69e3      	ldr	r3, [r4, #28]
 8003bd4:	b37b      	cbz	r3, 8003c36 <HAL_RCC_OscConfig+0x22e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd6:	4d49      	ldr	r5, [pc, #292]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003bd8:	686a      	ldr	r2, [r5, #4]
 8003bda:	f002 020c 	and.w	r2, r2, #12
 8003bde:	2a08      	cmp	r2, #8
 8003be0:	d044      	beq.n	8003c6c <HAL_RCC_OscConfig+0x264>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be8:	f000 817a 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x4d8>
 8003bec:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7ff f8cb 	bl	8002d9c <HAL_GetTick>
 8003c06:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003c0a:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0c:	2601      	movs	r6, #1
 8003c0e:	e005      	b.n	8003c1c <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c10:	f7ff f8c4 	bl	8002d9c <HAL_GetTick>
 8003c14:	1bc0      	subs	r0, r0, r7
 8003c16:	2802      	cmp	r0, #2
 8003c18:	f200 80af 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003c1c:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c20:	682a      	ldr	r2, [r5, #0]
 8003c22:	fa94 f3a4 	rbit	r3, r4
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	fa06 f303 	lsl.w	r3, r6, r3
 8003c32:	4213      	tst	r3, r2
 8003c34:	d1ec      	bne.n	8003c10 <HAL_RCC_OscConfig+0x208>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003c36:	2000      	movs	r0, #0
}
 8003c38:	b003      	add	sp, #12
 8003c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c3e:	6852      	ldr	r2, [r2, #4]
 8003c40:	03d6      	lsls	r6, r2, #15
 8003c42:	f53f af3d 	bmi.w	8003ac0 <HAL_RCC_OscConfig+0xb8>
 8003c46:	2202      	movs	r2, #2
 8003c48:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4c:	492b      	ldr	r1, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003c4e:	6808      	ldr	r0, [r1, #0]
 8003c50:	fa92 f2a2 	rbit	r2, r2
 8003c54:	fab2 f282 	clz	r2, r2
 8003c58:	f002 021f 	and.w	r2, r2, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4202      	tst	r2, r0
 8003c64:	d039      	beq.n	8003cda <HAL_RCC_OscConfig+0x2d2>
 8003c66:	6922      	ldr	r2, [r4, #16]
 8003c68:	428a      	cmp	r2, r1
 8003c6a:	d036      	beq.n	8003cda <HAL_RCC_OscConfig+0x2d2>
    return HAL_ERROR;
 8003c6c:	2001      	movs	r0, #1
}
 8003c6e:	b003      	add	sp, #12
 8003c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c74:	2501      	movs	r5, #1
 8003c76:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8003c7a:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4e1f      	ldr	r6, [pc, #124]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_DISABLE();
 8003c7e:	fab1 f181 	clz	r1, r1
 8003c82:	440b      	add	r3, r1
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	f04f 0802 	mov.w	r8, #2
 8003c8a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003c8c:	f7ff f886 	bl	8002d9c <HAL_GetTick>
 8003c90:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c92:	e004      	b.n	8003c9e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c94:	f7ff f882 	bl	8002d9c <HAL_GetTick>
 8003c98:	1bc0      	subs	r0, r0, r7
 8003c9a:	2802      	cmp	r0, #2
 8003c9c:	d86d      	bhi.n	8003d7a <HAL_RCC_OscConfig+0x372>
 8003c9e:	fa98 f3a8 	rbit	r3, r8
 8003ca2:	fa98 f3a8 	rbit	r3, r8
 8003ca6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003caa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003cac:	fa98 f3a8 	rbit	r3, r8
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	fa05 f303 	lsl.w	r3, r5, r3
 8003cbc:	4213      	tst	r3, r2
 8003cbe:	d1e9      	bne.n	8003c94 <HAL_RCC_OscConfig+0x28c>
 8003cc0:	e784      	b.n	8003bcc <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003cd4:	f04f 0801 	mov.w	r8, #1
 8003cd8:	e734      	b.n	8003b44 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4d08      	ldr	r5, [pc, #32]	; (8003cfc <HAL_RCC_OscConfig+0x2f4>)
 8003cdc:	21f8      	movs	r1, #248	; 0xf8
 8003cde:	6828      	ldr	r0, [r5, #0]
 8003ce0:	fa91 f1a1 	rbit	r1, r1
 8003ce4:	6962      	ldr	r2, [r4, #20]
 8003ce6:	fab1 f181 	clz	r1, r1
 8003cea:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003cee:	408a      	lsls	r2, r1
 8003cf0:	4302      	orrs	r2, r0
 8003cf2:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf4:	071d      	lsls	r5, r3, #28
 8003cf6:	f57f af1c 	bpl.w	8003b32 <HAL_RCC_OscConfig+0x12a>
 8003cfa:	e73c      	b.n	8003b76 <HAL_RCC_OscConfig+0x16e>
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
 8003d04:	10908120 	.word	0x10908120
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d08:	4da7      	ldr	r5, [pc, #668]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d18:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d1c:	68a2      	ldr	r2, [r4, #8]
 8003d1e:	f023 030f 	bic.w	r3, r3, #15
 8003d22:	4313      	orrs	r3, r2
 8003d24:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8003d26:	f7ff f839 	bl	8002d9c <HAL_GetTick>
 8003d2a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003d2e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d30:	2601      	movs	r6, #1
 8003d32:	e004      	b.n	8003d3e <HAL_RCC_OscConfig+0x336>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7ff f832 	bl	8002d9c <HAL_GetTick>
 8003d38:	1bc0      	subs	r0, r0, r7
 8003d3a:	2864      	cmp	r0, #100	; 0x64
 8003d3c:	d81d      	bhi.n	8003d7a <HAL_RCC_OscConfig+0x372>
 8003d3e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	682a      	ldr	r2, [r5, #0]
 8003d44:	fa98 f3a8 	rbit	r3, r8
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	fa06 f303 	lsl.w	r3, r6, r3
 8003d54:	4213      	tst	r3, r2
 8003d56:	d1ed      	bne.n	8003d34 <HAL_RCC_OscConfig+0x32c>
 8003d58:	e6a3      	b.n	8003aa2 <HAL_RCC_OscConfig+0x9a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d62:	f7ff f81b 	bl	8002d9c <HAL_GetTick>
 8003d66:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	05db      	lsls	r3, r3, #23
 8003d6c:	f53f aeef 	bmi.w	8003b4e <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7ff f814 	bl	8002d9c <HAL_GetTick>
 8003d74:	1b80      	subs	r0, r0, r6
 8003d76:	2864      	cmp	r0, #100	; 0x64
 8003d78:	d9f6      	bls.n	8003d68 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8003d7a:	2003      	movs	r0, #3
}
 8003d7c:	b003      	add	sp, #12
 8003d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d82:	684a      	ldr	r2, [r1, #4]
 8003d84:	03d2      	lsls	r2, r2, #15
 8003d86:	f57f ae56 	bpl.w	8003a36 <HAL_RCC_OscConfig+0x2e>
 8003d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d8e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d92:	4985      	ldr	r1, [pc, #532]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003d94:	6808      	ldr	r0, [r1, #0]
 8003d96:	fa92 f2a2 	rbit	r2, r2
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f202 	lsl.w	r2, r1, r2
 8003da8:	4202      	tst	r2, r0
 8003daa:	f43f ae7b 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x9c>
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	f47f ae77 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x9c>
 8003db6:	e759      	b.n	8003c6c <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	4d7b      	ldr	r5, [pc, #492]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003dba:	6a2b      	ldr	r3, [r5, #32]
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	622b      	str	r3, [r5, #32]
 8003dc2:	6a2b      	ldr	r3, [r5, #32]
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003dca:	f7fe ffe7 	bl	8002d9c <HAL_GetTick>
 8003dce:	f04f 0902 	mov.w	r9, #2
 8003dd2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	2601      	movs	r6, #1
 8003dd6:	e013      	b.n	8003e00 <HAL_RCC_OscConfig+0x3f8>
 8003dd8:	fa99 f3a9 	rbit	r3, r9
 8003ddc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003dde:	fa99 f3a9 	rbit	r3, r9
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	fa06 f303 	lsl.w	r3, r6, r3
 8003dee:	4213      	tst	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe ffd3 	bl	8002d9c <HAL_GetTick>
 8003df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dfa:	1bc0      	subs	r0, r0, r7
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	d8bc      	bhi.n	8003d7a <HAL_RCC_OscConfig+0x372>
 8003e00:	fa99 f3a9 	rbit	r3, r9
 8003e04:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0e5      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x3d0>
 8003e0c:	6a2a      	ldr	r2, [r5, #32]
 8003e0e:	e7e6      	b.n	8003dde <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8003e10:	f1b8 0f00 	cmp.w	r8, #0
 8003e14:	f43f aedd 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4a63      	ldr	r2, [pc, #396]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003e1a:	69d3      	ldr	r3, [r2, #28]
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	61d3      	str	r3, [r2, #28]
 8003e22:	e6d6      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1ca>
 8003e24:	2501      	movs	r5, #1
 8003e26:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f04f 0802 	mov.w	r8, #2
 8003e3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e3e:	f7fe ffad 	bl	8002d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	4e59      	ldr	r6, [pc, #356]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8003e44:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e004      	b.n	8003e52 <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fe ffa8 	bl	8002d9c <HAL_GetTick>
 8003e4c:	1bc0      	subs	r0, r0, r7
 8003e4e:	2802      	cmp	r0, #2
 8003e50:	d893      	bhi.n	8003d7a <HAL_RCC_OscConfig+0x372>
 8003e52:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	6832      	ldr	r2, [r6, #0]
 8003e58:	fa98 f3a8 	rbit	r3, r8
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa05 f303 	lsl.w	r3, r5, r3
 8003e68:	4213      	tst	r3, r2
 8003e6a:	d1ed      	bne.n	8003e48 <HAL_RCC_OscConfig+0x440>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	e65e      	b.n	8003b2e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	4a4d      	ldr	r2, [pc, #308]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e5f1      	b.n	8003a60 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003e7e:	6a13      	ldr	r3, [r2, #32]
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003e86:	f7fe ff89 	bl	8002d9c <HAL_GetTick>
 8003e8a:	f04f 0902 	mov.w	r9, #2
 8003e8e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4e45      	ldr	r6, [pc, #276]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
 8003e92:	2501      	movs	r5, #1
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
 8003e96:	fa99 f3a9 	rbit	r3, r9
 8003e9a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003e9c:	fa99 f3a9 	rbit	r3, r9
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa05 f303 	lsl.w	r3, r5, r3
 8003eac:	4213      	tst	r3, r2
 8003eae:	d1af      	bne.n	8003e10 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fe ff74 	bl	8002d9c <HAL_GetTick>
 8003eb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eb8:	1bc0      	subs	r0, r0, r7
 8003eba:	4298      	cmp	r0, r3
 8003ebc:	f63f af5d 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003ec0:	fa99 f3a9 	rbit	r3, r9
 8003ec4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0e4      	beq.n	8003e96 <HAL_RCC_OscConfig+0x48e>
 8003ecc:	6a32      	ldr	r2, [r6, #32]
 8003ece:	e7e5      	b.n	8003e9c <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	f042 0204 	orr.w	r2, r2, #4
 8003ed4:	621a      	str	r2, [r3, #32]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	621a      	str	r2, [r3, #32]
 8003ede:	e7d2      	b.n	8003e86 <HAL_RCC_OscConfig+0x47e>
 8003ee0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ef6:	f7fe ff51 	bl	8002d9c <HAL_GetTick>
 8003efa:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003efe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	2601      	movs	r6, #1
 8003f02:	e005      	b.n	8003f10 <HAL_RCC_OscConfig+0x508>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe ff4a 	bl	8002d9c <HAL_GetTick>
 8003f08:	1bc0      	subs	r0, r0, r7
 8003f0a:	2802      	cmp	r0, #2
 8003f0c:	f63f af35 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003f10:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	682a      	ldr	r2, [r5, #0]
 8003f16:	fa98 f3a8 	rbit	r3, r8
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	fa06 f303 	lsl.w	r3, r6, r3
 8003f26:	4213      	tst	r3, r2
 8003f28:	d1ec      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2a:	686a      	ldr	r2, [r5, #4]
 8003f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f2e:	6a21      	ldr	r1, [r4, #32]
 8003f30:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003f34:	430b      	orrs	r3, r1
 8003f36:	4313      	orrs	r3, r2
 8003f38:	606b      	str	r3, [r5, #4]
 8003f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f3e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003f54:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003f56:	f7fe ff21 	bl	8002d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f5a:	4e13      	ldr	r6, [pc, #76]	; (8003fa8 <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8003f5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f5e:	2501      	movs	r5, #1
 8003f60:	e005      	b.n	8003f6e <HAL_RCC_OscConfig+0x566>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fe ff1b 	bl	8002d9c <HAL_GetTick>
 8003f66:	1bc0      	subs	r0, r0, r7
 8003f68:	2802      	cmp	r0, #2
 8003f6a:	f63f af06 	bhi.w	8003d7a <HAL_RCC_OscConfig+0x372>
 8003f6e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f72:	6832      	ldr	r2, [r6, #0]
 8003f74:	fa94 f3a4 	rbit	r3, r4
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa05 f303 	lsl.w	r3, r5, r3
 8003f84:	4213      	tst	r3, r2
 8003f86:	d0ec      	beq.n	8003f62 <HAL_RCC_OscConfig+0x55a>
 8003f88:	e655      	b.n	8003c36 <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f8e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e55d      	b.n	8003a60 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
}
 8003fa6:	4770      	bx	lr
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fac:	b178      	cbz	r0, 8003fce <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fae:	4a65      	ldr	r2, [pc, #404]	; (8004144 <HAL_RCC_ClockConfig+0x198>)
 8003fb0:	6813      	ldr	r3, [r2, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	428b      	cmp	r3, r1
 8003fb8:	d20b      	bcs.n	8003fd2 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	f023 0307 	bic.w	r3, r3, #7
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	4299      	cmp	r1, r3
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003fce:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003fd0:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd2:	6803      	ldr	r3, [r0, #0]
{
 8003fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd8:	079f      	lsls	r7, r3, #30
 8003fda:	d506      	bpl.n	8003fea <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fdc:	4c5a      	ldr	r4, [pc, #360]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8003fde:	6885      	ldr	r5, [r0, #8]
 8003fe0:	6862      	ldr	r2, [r4, #4]
 8003fe2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003fe6:	432a      	orrs	r2, r5
 8003fe8:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	07de      	lsls	r6, r3, #31
 8003fec:	4604      	mov	r4, r0
 8003fee:	460d      	mov	r5, r1
 8003ff0:	d530      	bpl.n	8004054 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	6842      	ldr	r2, [r0, #4]
 8003ff4:	2a01      	cmp	r2, #1
 8003ff6:	f000 8093 	beq.w	8004120 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	2a02      	cmp	r2, #2
 8003ffc:	bf0c      	ite	eq
 8003ffe:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8004002:	2302      	movne	r3, #2
 8004004:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	494f      	ldr	r1, [pc, #316]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 800400a:	6808      	ldr	r0, [r1, #0]
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	4203      	tst	r3, r0
 8004020:	d028      	beq.n	8004074 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4e49      	ldr	r6, [pc, #292]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8004024:	6873      	ldr	r3, [r6, #4]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	4313      	orrs	r3, r2
 800402c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800402e:	f7fe feb5 	bl	8002d9c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004032:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004036:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004038:	e005      	b.n	8004046 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403a:	f7fe feaf 	bl	8002d9c <HAL_GetTick>
 800403e:	eba0 0008 	sub.w	r0, r0, r8
 8004042:	42b8      	cmp	r0, r7
 8004044:	d869      	bhi.n	800411a <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	6873      	ldr	r3, [r6, #4]
 8004048:	6862      	ldr	r2, [r4, #4]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004052:	d1f2      	bne.n	800403a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4a3b      	ldr	r2, [pc, #236]	; (8004144 <HAL_RCC_ClockConfig+0x198>)
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	429d      	cmp	r5, r3
 800405e:	d20c      	bcs.n	800407a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	432b      	orrs	r3, r5
 8004068:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	429d      	cmp	r5, r3
 8004072:	d002      	beq.n	800407a <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8004074:	2001      	movs	r0, #1
 8004076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	0758      	lsls	r0, r3, #29
 800407e:	d506      	bpl.n	800408e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4931      	ldr	r1, [pc, #196]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8004082:	68e0      	ldr	r0, [r4, #12]
 8004084:	684a      	ldr	r2, [r1, #4]
 8004086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800408a:	4302      	orrs	r2, r0
 800408c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408e:	0719      	lsls	r1, r3, #28
 8004090:	d507      	bpl.n	80040a2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004092:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8004094:	6921      	ldr	r1, [r4, #16]
 8004096:	6853      	ldr	r3, [r2, #4]
 8004098:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800409c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040a0:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80040a2:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 80040a4:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a6:	f002 010c 	and.w	r1, r2, #12
 80040aa:	2908      	cmp	r1, #8
 80040ac:	d016      	beq.n	80040dc <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4927      	ldr	r1, [pc, #156]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 80040b2:	22f0      	movs	r2, #240	; 0xf0
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	fa92 f2a2 	rbit	r2, r2
 80040ba:	fab2 f282 	clz	r2, r2
 80040be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c2:	40d3      	lsrs	r3, r2
 80040c4:	4822      	ldr	r0, [pc, #136]	; (8004150 <HAL_RCC_ClockConfig+0x1a4>)
 80040c6:	4a23      	ldr	r2, [pc, #140]	; (8004154 <HAL_RCC_ClockConfig+0x1a8>)
 80040c8:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 80040ca:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040cc:	fa21 f303 	lsr.w	r3, r1, r3
 80040d0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80040d2:	f7fe fe21 	bl	8002d18 <HAL_InitTick>
  return HAL_OK;
 80040d6:	2000      	movs	r0, #0
 80040d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040dc:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80040e0:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040e4:	fab1 f181 	clz	r1, r1
 80040e8:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80040ec:	40c8      	lsrs	r0, r1
 80040ee:	4c1a      	ldr	r4, [pc, #104]	; (8004158 <HAL_RCC_ClockConfig+0x1ac>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040f2:	5c23      	ldrb	r3, [r4, r0]
 80040f4:	200f      	movs	r0, #15
 80040f6:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040fa:	fab0 f080 	clz	r0, r0
 80040fe:	f001 010f 	and.w	r1, r1, #15
 8004102:	40c1      	lsrs	r1, r0
 8004104:	4815      	ldr	r0, [pc, #84]	; (800415c <HAL_RCC_ClockConfig+0x1b0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004106:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004108:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800410a:	bf4a      	itet	mi
 800410c:	490f      	ldrmi	r1, [pc, #60]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800410e:	4914      	ldrpl	r1, [pc, #80]	; (8004160 <HAL_RCC_ClockConfig+0x1b4>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004110:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8004114:	fb01 f103 	mul.w	r1, r1, r3
 8004118:	e7ca      	b.n	80040b0 <HAL_RCC_ClockConfig+0x104>
        return HAL_TIMEOUT;
 800411a:	2003      	movs	r0, #3
}
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004124:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004128:	4907      	ldr	r1, [pc, #28]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 800412a:	6809      	ldr	r1, [r1, #0]
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	420b      	tst	r3, r1
 800413e:	f47f af70 	bne.w	8004022 <HAL_RCC_ClockConfig+0x76>
 8004142:	e797      	b.n	8004074 <HAL_RCC_ClockConfig+0xc8>
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	007a1200 	.word	0x007a1200
 8004150:	0800807c 	.word	0x0800807c
 8004154:	20000760 	.word	0x20000760
 8004158:	08008094 	.word	0x08008094
 800415c:	080080a4 	.word	0x080080a4
 8004160:	003d0900 	.word	0x003d0900

08004164 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004164:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8004166:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004168:	f003 010c 	and.w	r1, r3, #12
 800416c:	2908      	cmp	r1, #8
 800416e:	d121      	bne.n	80041b4 <HAL_RCC_GetSysClockFreq+0x50>
 8004170:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8004174:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004178:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800417c:	fab1 f181 	clz	r1, r1
 8004180:	fa20 f101 	lsr.w	r1, r0, r1
 8004184:	480d      	ldr	r0, [pc, #52]	; (80041bc <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004186:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004188:	5c40      	ldrb	r0, [r0, r1]
 800418a:	210f      	movs	r1, #15
 800418c:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004190:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004192:	fab1 f181 	clz	r1, r1
 8004196:	f002 020f 	and.w	r2, r2, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800419a:	bf4c      	ite	mi
 800419c:	4b08      	ldrmi	r3, [pc, #32]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800419e:	4b09      	ldrpl	r3, [pc, #36]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041a0:	fa22 f201 	lsr.w	r2, r2, r1
 80041a4:	4908      	ldr	r1, [pc, #32]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x64>)
 80041a6:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80041a8:	bf48      	it	mi
 80041aa:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80041ae:	fb03 f000 	mul.w	r0, r3, r0
 80041b2:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80041b6:	4770      	bx	lr
 80041b8:	40021000 	.word	0x40021000
 80041bc:	08008094 	.word	0x08008094
 80041c0:	007a1200 	.word	0x007a1200
 80041c4:	003d0900 	.word	0x003d0900
 80041c8:	080080a4 	.word	0x080080a4

080041cc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80041cc:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000760 	.word	0x20000760

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fa92 f2a2 	rbit	r2, r2
 80041e4:	fab2 f282 	clz	r2, r2
 80041e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ec:	40d3      	lsrs	r3, r2
 80041ee:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80041f0:	4a04      	ldr	r2, [pc, #16]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	6810      	ldr	r0, [r2, #0]
}    
 80041f6:	40d8      	lsrs	r0, r3
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	0800808c 	.word	0x0800808c
 8004204:	20000760 	.word	0x20000760

08004208 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	fa92 f2a2 	rbit	r2, r2
 8004214:	fab2 f282 	clz	r2, r2
 8004218:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800421c:	40d3      	lsrs	r3, r2
 800421e:	4904      	ldr	r1, [pc, #16]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	6810      	ldr	r0, [r2, #0]
} 
 8004226:	40d8      	lsrs	r0, r3
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	0800808c 	.word	0x0800808c
 8004234:	20000760 	.word	0x20000760

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800423c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800423e:	6800      	ldr	r0, [r0, #0]
 8004240:	03c5      	lsls	r5, r0, #15
{
 8004242:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004244:	d53c      	bpl.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b79      	ldr	r3, [pc, #484]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	00d1      	lsls	r1, r2, #3
 800424c:	f140 80a1 	bpl.w	8004392 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	4d77      	ldr	r5, [pc, #476]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004252:	682b      	ldr	r3, [r5, #0]
 8004254:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8004256:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	f140 80aa 	bpl.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800425e:	4d73      	ldr	r5, [pc, #460]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004260:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004262:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004266:	d020      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004268:	6861      	ldr	r1, [r4, #4]
 800426a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800426e:	4293      	cmp	r3, r2
 8004270:	d01c      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004272:	6a29      	ldr	r1, [r5, #32]
 8004274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004278:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800427c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004280:	4f6c      	ldr	r7, [pc, #432]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004282:	fab2 f282 	clz	r2, r2
 8004286:	443a      	add	r2, r7
 8004288:	0092      	lsls	r2, r2, #2
 800428a:	f04f 0e01 	mov.w	lr, #1
 800428e:	f8c2 e000 	str.w	lr, [r2]
 8004292:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	443b      	add	r3, r7
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042a0:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a2:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80042a4:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042a6:	f100 809b 	bmi.w	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80042aa:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042ac:	4a5f      	ldr	r2, [pc, #380]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80042ae:	6a13      	ldr	r3, [r2, #32]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b8:	2e00      	cmp	r6, #0
 80042ba:	f040 808c 	bne.w	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80042be:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c0:	07c5      	lsls	r5, r0, #31
 80042c2:	d506      	bpl.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c4:	4a59      	ldr	r2, [pc, #356]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80042c6:	68a1      	ldr	r1, [r4, #8]
 80042c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	430b      	orrs	r3, r1
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d2:	0681      	lsls	r1, r0, #26
 80042d4:	d506      	bpl.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d6:	4a55      	ldr	r2, [pc, #340]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80042d8:	68e1      	ldr	r1, [r4, #12]
 80042da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042e4:	0382      	lsls	r2, r0, #14
 80042e6:	d506      	bpl.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042e8:	4a50      	ldr	r2, [pc, #320]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80042ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042ec:	6853      	ldr	r3, [r2, #4]
 80042ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042f2:	430b      	orrs	r3, r1
 80042f4:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042f6:	0643      	lsls	r3, r0, #25
 80042f8:	d506      	bpl.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042fa:	4a4c      	ldr	r2, [pc, #304]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80042fc:	6921      	ldr	r1, [r4, #16]
 80042fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004300:	f023 0320 	bic.w	r3, r3, #32
 8004304:	430b      	orrs	r3, r1
 8004306:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004308:	0407      	lsls	r7, r0, #16
 800430a:	d506      	bpl.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800430e:	6961      	ldr	r1, [r4, #20]
 8004310:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004316:	430b      	orrs	r3, r1
 8004318:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800431a:	0586      	lsls	r6, r0, #22
 800431c:	d506      	bpl.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800431e:	4a43      	ldr	r2, [pc, #268]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004320:	69e1      	ldr	r1, [r4, #28]
 8004322:	6853      	ldr	r3, [r2, #4]
 8004324:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004328:	430b      	orrs	r3, r1
 800432a:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800432c:	0605      	lsls	r5, r0, #24
 800432e:	d506      	bpl.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004330:	4a3e      	ldr	r2, [pc, #248]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004332:	69a1      	ldr	r1, [r4, #24]
 8004334:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004336:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800433a:	430b      	orrs	r3, r1
 800433c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800433e:	04c1      	lsls	r1, r0, #19
 8004340:	d506      	bpl.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004342:	4a3a      	ldr	r2, [pc, #232]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004344:	6a21      	ldr	r1, [r4, #32]
 8004346:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434c:	430b      	orrs	r3, r1
 800434e:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004350:	0342      	lsls	r2, r0, #13
 8004352:	d506      	bpl.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004354:	4a35      	ldr	r2, [pc, #212]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004356:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004358:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800435a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435e:	430b      	orrs	r3, r1
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004362:	0303      	lsls	r3, r0, #12
 8004364:	d40d      	bmi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004366:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800436a:	d007      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800436c:	4a2f      	ldr	r2, [pc, #188]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800436e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004370:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004376:	430b      	orrs	r3, r1
 8004378:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800437a:	2000      	movs	r0, #0
}
 800437c:	b003      	add	sp, #12
 800437e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004382:	4a2a      	ldr	r2, [pc, #168]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004384:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004386:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800438c:	430b      	orrs	r3, r1
 800438e:	6313      	str	r3, [r2, #48]	; 0x30
 8004390:	e7e9      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4d26      	ldr	r5, [pc, #152]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800439a:	61da      	str	r2, [r3, #28]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80043aa:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	f53f af56 	bmi.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80043ba:	f7fe fcef 	bl	8002d9c <HAL_GetTick>
 80043be:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	05db      	lsls	r3, r3, #23
 80043c4:	f53f af4b 	bmi.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c8:	f7fe fce8 	bl	8002d9c <HAL_GetTick>
 80043cc:	1bc0      	subs	r0, r0, r7
 80043ce:	2864      	cmp	r0, #100	; 0x64
 80043d0:	d9f6      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          return HAL_TIMEOUT;
 80043d2:	2003      	movs	r0, #3
 80043d4:	e7d2      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	69d3      	ldr	r3, [r2, #28]
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043dc:	61d3      	str	r3, [r2, #28]
 80043de:	e76e      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x86>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 80043e2:	f7fe fcdb 	bl	8002d9c <HAL_GetTick>
 80043e6:	f04f 0902 	mov.w	r9, #2
 80043ea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043ee:	fa99 f3a9 	rbit	r3, r9
 80043f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80043f4:	fa99 f3a9 	rbit	r3, r9
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa07 f303 	lsl.w	r3, r7, r3
 8004404:	4213      	tst	r3, r2
 8004406:	f47f af50 	bne.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe fcc7 	bl	8002d9c <HAL_GetTick>
 800440e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004412:	eba0 0008 	sub.w	r0, r0, r8
 8004416:	4298      	cmp	r0, r3
 8004418:	d8db      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800441a:	fa99 f3a9 	rbit	r3, r9
 800441e:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0e3      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004426:	6a2a      	ldr	r2, [r5, #32]
 8004428:	e7e4      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40007000 	.word	0x40007000
 8004434:	10908100 	.word	0x10908100

08004438 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004438:	2800      	cmp	r0, #0
 800443a:	d05b      	beq.n	80044f4 <HAL_TIM_Base_Init+0xbc>
{ 
 800443c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800443e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004442:	4604      	mov	r4, r0
 8004444:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004448:	2b00      	cmp	r3, #0
 800444a:	d035      	beq.n	80044b8 <HAL_TIM_Base_Init+0x80>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800444c:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800444e:	492a      	ldr	r1, [pc, #168]	; (80044f8 <HAL_TIM_Base_Init+0xc0>)
  htim->State= HAL_TIM_STATE_BUSY;
 8004450:	2202      	movs	r2, #2
 8004452:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004456:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004458:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445a:	d032      	beq.n	80044c2 <HAL_TIM_Base_Init+0x8a>
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004460:	d036      	beq.n	80044d0 <HAL_TIM_Base_Init+0x98>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004462:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8004466:	428b      	cmp	r3, r1
 8004468:	d016      	beq.n	8004498 <HAL_TIM_Base_Init+0x60>
 800446a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800446e:	428b      	cmp	r3, r1
 8004470:	d012      	beq.n	8004498 <HAL_TIM_Base_Init+0x60>
 8004472:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004476:	428b      	cmp	r3, r1
 8004478:	d00e      	beq.n	8004498 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	68e0      	ldr	r0, [r4, #12]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800447e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004484:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004486:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004488:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800448a:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	2201      	movs	r2, #1
 800448e:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8004490:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004492:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8004496:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004498:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800449c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a0:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a6:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80044a8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044aa:	68e2      	ldr	r2, [r4, #12]
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80044b2:	6962      	ldr	r2, [r4, #20]
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
 80044b6:	e7e9      	b.n	800448c <HAL_TIM_Base_Init+0x54>
    htim->Lock = HAL_UNLOCKED;
 80044b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044bc:	f7fd fd96 	bl	8001fec <HAL_TIM_Base_MspInit>
 80044c0:	e7c4      	b.n	800444c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80044c2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044cc:	432a      	orrs	r2, r5
 80044ce:	e7e5      	b.n	800449c <HAL_TIM_Base_Init+0x64>
 80044d0:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044da:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80044dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e0:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044e6:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80044e8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ea:	68e2      	ldr	r2, [r4, #12]
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80044ee:	6862      	ldr	r2, [r4, #4]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
 80044f2:	e7cb      	b.n	800448c <HAL_TIM_Base_Init+0x54>
    return HAL_ERROR;
 80044f4:	2001      	movs	r0, #1
 80044f6:	4770      	bx	lr
 80044f8:	40012c00 	.word	0x40012c00

080044fc <HAL_TIM_PWM_MspInit>:
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop

08004500 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8004500:	2800      	cmp	r0, #0
 8004502:	d05b      	beq.n	80045bc <HAL_TIM_PWM_Init+0xbc>
{
 8004504:	b538      	push	{r3, r4, r5, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8004506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800450a:	4604      	mov	r4, r0
 800450c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004510:	2b00      	cmp	r3, #0
 8004512:	d035      	beq.n	8004580 <HAL_TIM_PWM_Init+0x80>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004514:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004516:	492a      	ldr	r1, [pc, #168]	; (80045c0 <HAL_TIM_PWM_Init+0xc0>)
  htim->State= HAL_TIM_STATE_BUSY;
 8004518:	2202      	movs	r2, #2
 800451a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451e:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004520:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004522:	d032      	beq.n	800458a <HAL_TIM_PWM_Init+0x8a>
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d036      	beq.n	8004598 <HAL_TIM_PWM_Init+0x98>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800452e:	428b      	cmp	r3, r1
 8004530:	d016      	beq.n	8004560 <HAL_TIM_PWM_Init+0x60>
 8004532:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004536:	428b      	cmp	r3, r1
 8004538:	d012      	beq.n	8004560 <HAL_TIM_PWM_Init+0x60>
 800453a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800453e:	428b      	cmp	r3, r1
 8004540:	d00e      	beq.n	8004560 <HAL_TIM_PWM_Init+0x60>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004542:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004546:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800454e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004550:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004552:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004554:	2201      	movs	r2, #1
 8004556:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8004558:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800455a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 800455e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004560:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004562:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004564:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004568:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800456e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004570:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004572:	68e2      	ldr	r2, [r4, #12]
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800457a:	6962      	ldr	r2, [r4, #20]
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
 800457e:	e7e9      	b.n	8004554 <HAL_TIM_PWM_Init+0x54>
    htim->Lock = HAL_UNLOCKED;
 8004580:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004584:	f7ff ffba 	bl	80044fc <HAL_TIM_PWM_MspInit>
 8004588:	e7c4      	b.n	8004514 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800458a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004590:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004594:	432a      	orrs	r2, r5
 8004596:	e7e5      	b.n	8004564 <HAL_TIM_PWM_Init+0x64>
 8004598:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045a2:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a8:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ae:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80045b0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b2:	68e2      	ldr	r2, [r4, #12]
 80045b4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
 80045ba:	e7cb      	b.n	8004554 <HAL_TIM_PWM_Init+0x54>
    return HAL_ERROR;
 80045bc:	2001      	movs	r0, #1
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00

080045c4 <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 80045c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d102      	bne.n	80045d2 <HAL_TIM_SlaveConfigSynchronization+0xe>
 80045cc:	2302      	movs	r3, #2
} 
 80045ce:	4618      	mov	r0, r3
 80045d0:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80045d2:	2302      	movs	r3, #2
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d4:	6802      	ldr	r2, [r0, #0]
{
 80045d6:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045dc:	e891 0030 	ldmia.w	r1, {r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045e6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045f0:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045f2:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 80045f4:	f04f 0401 	mov.w	r4, #1
 80045f8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80045fc:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80045fe:	d043      	beq.n	8004688 <HAL_TIM_SlaveConfigSynchronization+0xc4>
 8004600:	d91f      	bls.n	8004642 <HAL_TIM_SlaveConfigSynchronization+0x7e>
 8004602:	2d60      	cmp	r5, #96	; 0x60
 8004604:	d02d      	beq.n	8004662 <HAL_TIM_SlaveConfigSynchronization+0x9e>
 8004606:	2d70      	cmp	r5, #112	; 0x70
 8004608:	d10a      	bne.n	8004620 <HAL_TIM_SlaveConfigSynchronization+0x5c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800460a:	68cb      	ldr	r3, [r1, #12]
 800460c:	688d      	ldr	r5, [r1, #8]
 800460e:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8004610:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004612:	432b      	orrs	r3, r5
 8004614:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004618:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800461c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461e:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004620:	68d3      	ldr	r3, [r2, #12]
 8004622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004626:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004628:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800462a:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);  
 800462c:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800462e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004632:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004634:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 8004638:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
} 
 800463c:	bcf0      	pop	{r4, r5, r6, r7}
 800463e:	4608      	mov	r0, r1
 8004640:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004642:	2d40      	cmp	r5, #64	; 0x40
 8004644:	d1ec      	bne.n	8004620 <HAL_TIM_SlaveConfigSynchronization+0x5c>
      tmpccer = htim->Instance->CCER;
 8004646:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004648:	6a14      	ldr	r4, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800464a:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800464c:	f024 0401 	bic.w	r4, r4, #1
 8004650:	6214      	str	r4, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8004652:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004658:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800465c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;                               
 800465e:	6215      	str	r5, [r2, #32]
 8004660:	e7de      	b.n	8004620 <HAL_TIM_SlaveConfigSynchronization+0x5c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004662:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004664:	688d      	ldr	r5, [r1, #8]
 8004666:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004668:	f024 0410 	bic.w	r4, r4, #16
 800466c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8004670:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004672:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800467e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004682:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004684:	6213      	str	r3, [r2, #32]
 8004686:	e7cb      	b.n	8004620 <HAL_TIM_SlaveConfigSynchronization+0x5c>
  tmpccer = TIMx->CCER;
 8004688:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468a:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468c:	688c      	ldr	r4, [r1, #8]
 800468e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004690:	f026 0601 	bic.w	r6, r6, #1
 8004694:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8004696:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004698:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800469c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80046a0:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80046a6:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80046a8:	6211      	str	r1, [r2, #32]
 80046aa:	e7b9      	b.n	8004620 <HAL_TIM_SlaveConfigSynchronization+0x5c>

080046ac <TIM_OC1_SetConfig>:
{
 80046ac:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ae:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 80046b0:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80046b2:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b4:	4d19      	ldr	r5, [pc, #100]	; (800471c <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b6:	f024 0401 	bic.w	r4, r4, #1
 80046ba:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80046bc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80046be:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80046c0:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80046c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046ce:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80046d0:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80046d4:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d8:	d012      	beq.n	8004700 <TIM_OC1_SetConfig+0x54>
 80046da:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80046de:	42a8      	cmp	r0, r5
 80046e0:	d00e      	beq.n	8004700 <TIM_OC1_SetConfig+0x54>
 80046e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046e6:	42a8      	cmp	r0, r5
 80046e8:	d00a      	beq.n	8004700 <TIM_OC1_SetConfig+0x54>
 80046ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046ee:	42a8      	cmp	r0, r5
 80046f0:	d006      	beq.n	8004700 <TIM_OC1_SetConfig+0x54>
  TIMx->CCR1 = OC_Config->Pulse;
 80046f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80046f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046f6:	6182      	str	r2, [r0, #24]
} 
 80046f8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80046fa:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80046fc:	6203      	str	r3, [r0, #32]
} 
 80046fe:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004700:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004702:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004704:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004708:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800470a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004710:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004712:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004716:	432c      	orrs	r4, r5
 8004718:	e7eb      	b.n	80046f2 <TIM_OC1_SetConfig+0x46>
 800471a:	bf00      	nop
 800471c:	40012c00 	.word	0x40012c00

08004720 <TIM_OC2_SetConfig>:
{
 8004720:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004722:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004724:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004726:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	4d19      	ldr	r5, [pc, #100]	; (8004790 <TIM_OC2_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472a:	f024 0410 	bic.w	r4, r4, #16
 800472e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004730:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8004732:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004734:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800473a:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800473e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004742:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004744:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800474c:	d010      	beq.n	8004770 <TIM_OC2_SetConfig+0x50>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	4d11      	ldr	r5, [pc, #68]	; (8004794 <TIM_OC2_SetConfig+0x74>)
 8004750:	42a8      	cmp	r0, r5
 8004752:	d014      	beq.n	800477e <TIM_OC2_SetConfig+0x5e>
 8004754:	4d10      	ldr	r5, [pc, #64]	; (8004798 <TIM_OC2_SetConfig+0x78>)
 8004756:	42a8      	cmp	r0, r5
 8004758:	d011      	beq.n	800477e <TIM_OC2_SetConfig+0x5e>
 800475a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800475e:	42a8      	cmp	r0, r5
 8004760:	d00d      	beq.n	800477e <TIM_OC2_SetConfig+0x5e>
  TIMx->CCR2 = OC_Config->Pulse;
 8004762:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004764:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004766:	6183      	str	r3, [r0, #24]
}
 8004768:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 800476a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 800476c:	6202      	str	r2, [r0, #32]
}
 800476e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004770:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004776:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800477a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800477e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004780:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004782:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004786:	4335      	orrs	r5, r6
 8004788:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800478c:	e7e9      	b.n	8004762 <TIM_OC2_SetConfig+0x42>
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400

0800479c <TIM_OC3_SetConfig>:
{
 800479c:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800479e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047a0:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80047a2:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a4:	4d19      	ldr	r5, [pc, #100]	; (800480c <TIM_OC3_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80047aa:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80047ac:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80047ae:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80047b0:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80047b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80047ba:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047be:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047c0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047c8:	d010      	beq.n	80047ec <TIM_OC3_SetConfig+0x50>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80047ca:	4d11      	ldr	r5, [pc, #68]	; (8004810 <TIM_OC3_SetConfig+0x74>)
 80047cc:	42a8      	cmp	r0, r5
 80047ce:	d014      	beq.n	80047fa <TIM_OC3_SetConfig+0x5e>
 80047d0:	4d10      	ldr	r5, [pc, #64]	; (8004814 <TIM_OC3_SetConfig+0x78>)
 80047d2:	42a8      	cmp	r0, r5
 80047d4:	d011      	beq.n	80047fa <TIM_OC3_SetConfig+0x5e>
 80047d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047da:	42a8      	cmp	r0, r5
 80047dc:	d00d      	beq.n	80047fa <TIM_OC3_SetConfig+0x5e>
  TIMx->CCR3 = OC_Config->Pulse;
 80047de:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80047e0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80047e2:	61c3      	str	r3, [r0, #28]
}
 80047e4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80047e6:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 80047e8:	6202      	str	r2, [r0, #32]
}
 80047ea:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047fa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fe:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004802:	4335      	orrs	r5, r6
 8004804:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004808:	e7e9      	b.n	80047de <TIM_OC3_SetConfig+0x42>
 800480a:	bf00      	nop
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400

08004818 <TIM_OC4_SetConfig>:
{
 8004818:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800481a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800481c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800481e:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	4d15      	ldr	r5, [pc, #84]	; (8004878 <TIM_OC4_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004822:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8004826:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004828:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800482a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800482c:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800482e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8004832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004836:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800483a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800483c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004844:	d012      	beq.n	800486c <TIM_OC4_SetConfig+0x54>
 8004846:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800484a:	42a8      	cmp	r0, r5
 800484c:	d00e      	beq.n	800486c <TIM_OC4_SetConfig+0x54>
 800484e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004852:	42a8      	cmp	r0, r5
 8004854:	d00a      	beq.n	800486c <TIM_OC4_SetConfig+0x54>
 8004856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800485a:	42a8      	cmp	r0, r5
 800485c:	d006      	beq.n	800486c <TIM_OC4_SetConfig+0x54>
  TIMx->CCR4 = OC_Config->Pulse;
 800485e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004860:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004862:	61c3      	str	r3, [r0, #28]
}
 8004864:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8004866:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 8004868:	6202      	str	r2, [r0, #32]
}
 800486a:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800486c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800486e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004872:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004876:	e7f2      	b.n	800485e <TIM_OC4_SetConfig+0x46>
 8004878:	40012c00 	.word	0x40012c00

0800487c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800487e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d057      	beq.n	8004936 <HAL_TIM_PWM_ConfigChannel+0xba>
 8004886:	460d      	mov	r5, r1
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800488a:	2101      	movs	r1, #1
 800488c:	4604      	mov	r4, r0
 800488e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004892:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    
  switch (Channel)
 8004896:	2a14      	cmp	r2, #20
 8004898:	d846      	bhi.n	8004928 <HAL_TIM_PWM_ConfigChannel+0xac>
 800489a:	e8df f002 	tbb	[pc, r2]
 800489e:	454e      	.short	0x454e
 80048a0:	45604545 	.word	0x45604545
 80048a4:	45734545 	.word	0x45734545
 80048a8:	45854545 	.word	0x45854545
 80048ac:	45984545 	.word	0x45984545
 80048b0:	4545      	.short	0x4545
 80048b2:	0b          	.byte	0x0b
 80048b3:	00          	.byte	0x00
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048b4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048b6:	f8d5 e008 	ldr.w	lr, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048ba:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048bc:	682f      	ldr	r7, [r5, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	4e65      	ldr	r6, [pc, #404]	; (8004a54 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048c0:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 80048c4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80048c6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80048c8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80048ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048d0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048d8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048da:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048e2:	f000 80b0 	beq.w	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80048e6:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 80048ea:	42b3      	cmp	r3, r6
 80048ec:	f000 80ab 	beq.w	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80048f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80048f4:	42b3      	cmp	r3, r6
 80048f6:	f000 80a6 	beq.w	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80048fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80048fe:	42b3      	cmp	r3, r6
 8004900:	f000 80a1 	beq.w	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1ca>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004904:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004906:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800490a:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800490c:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800490e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8004910:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004912:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004916:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800491a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800491e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8004920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004922:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
  htim->State = HAL_TIM_STATE_READY;
 8004928:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800492a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800492c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004930:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004936:	2002      	movs	r0, #2
}
 8004938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800493a:	4629      	mov	r1, r5
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f7ff feb5 	bl	80046ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004942:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004944:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004946:	6999      	ldr	r1, [r3, #24]
 8004948:	f041 0108 	orr.w	r1, r1, #8
 800494c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800494e:	6999      	ldr	r1, [r3, #24]
 8004950:	f021 0104 	bic.w	r1, r1, #4
 8004954:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	4302      	orrs	r2, r0
 800495a:	619a      	str	r2, [r3, #24]
    break;
 800495c:	e7e4      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800495e:	4629      	mov	r1, r5
 8004960:	6800      	ldr	r0, [r0, #0]
 8004962:	f7ff fedd 	bl	8004720 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004966:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004968:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800496a:	6999      	ldr	r1, [r3, #24]
 800496c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004970:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004972:	6999      	ldr	r1, [r3, #24]
 8004974:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004978:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004980:	619a      	str	r2, [r3, #24]
    break;
 8004982:	e7d1      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004984:	4629      	mov	r1, r5
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	f7ff ff08 	bl	800479c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800498c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800498e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004990:	69d9      	ldr	r1, [r3, #28]
 8004992:	f041 0108 	orr.w	r1, r1, #8
 8004996:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004998:	69d9      	ldr	r1, [r3, #28]
 800499a:	f021 0104 	bic.w	r1, r1, #4
 800499e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	4302      	orrs	r2, r0
 80049a4:	61da      	str	r2, [r3, #28]
    break;
 80049a6:	e7bf      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049a8:	4629      	mov	r1, r5
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	f7ff ff34 	bl	8004818 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80049b2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b4:	69d9      	ldr	r1, [r3, #28]
 80049b6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80049ba:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049bc:	69d9      	ldr	r1, [r3, #28]
 80049be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049c2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80049ca:	61da      	str	r2, [r3, #28]
    break;
 80049cc:	e7ac      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0xac>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049ce:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049d0:	f8d5 e008 	ldr.w	lr, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049d4:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80049d6:	682f      	ldr	r7, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	4e1e      	ldr	r6, [pc, #120]	; (8004a54 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049da:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80049de:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80049e0:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80049e2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80049e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80049ea:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049f4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	ea42 0207 	orr.w	r2, r2, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	d01d      	beq.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x1be>
 80049fe:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004a02:	42b3      	cmp	r3, r6
 8004a04:	d019      	beq.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x1be>
 8004a06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a0a:	42b3      	cmp	r3, r6
 8004a0c:	d015      	beq.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x1be>
 8004a0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a12:	42b3      	cmp	r3, r6
 8004a14:	d011      	beq.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CCR5 = OC_Config->Pulse;
 8004a16:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004a18:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004a1c:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8004a1e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a20:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004a22:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a24:	f041 0108 	orr.w	r1, r1, #8
 8004a28:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a2a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a2c:	f021 0104 	bic.w	r1, r1, #4
 8004a30:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004a32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a34:	4302      	orrs	r2, r0
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004a38:	e776      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0xac>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a3a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a3c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a40:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8004a44:	e7e7      	b.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x19a>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a46:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a48:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a4c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004a50:	e758      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x88>
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00

08004a58 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004a58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d016      	beq.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 = htim->Instance->CR2;
 8004a60:	6802      	ldr	r2, [r0, #0]
{
 8004a62:	b470      	push	{r4, r5, r6}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a64:	4d0e      	ldr	r5, [pc, #56]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8004a66:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a6a:	42aa      	cmp	r2, r5
 8004a6c:	d012      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6e:	680e      	ldr	r6, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a70:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a76:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7a:	4333      	orrs	r3, r6
  __HAL_UNLOCK(htim);
 8004a7c:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a7e:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8004a80:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004a82:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8004a84:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
} 
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bc70      	pop	{r4, r5, r6}
 8004a8c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a8e:	2302      	movs	r3, #2
} 
 8004a90:	4618      	mov	r0, r3
 8004a92:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a94:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a9a:	432b      	orrs	r3, r5
 8004a9c:	e7e7      	b.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x16>
 8004a9e:	bf00      	nop
 8004aa0:	40012c00 	.word	0x40012c00

08004aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004aa4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d029      	beq.n	8004b00 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
{
 8004aac:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aae:	e891 00e0 	ldmia.w	r1, {r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ab2:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ab4:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aba:	433b      	orrs	r3, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac6:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004acc:	4602      	mov	r2, r0
 8004ace:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ad0:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ad2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ad4:	4d12      	ldr	r5, [pc, #72]	; (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004ad6:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004adc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ade:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ae2:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ae4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004ae6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004aea:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8004aec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004af0:	d008      	beq.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_UNLOCK(htim);
 8004af2:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004af4:	6443      	str	r3, [r0, #68]	; 0x44
}
 8004af6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004af8:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8004afa:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8004afe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b00:	2002      	movs	r0, #2
 8004b02:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004b04:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b06:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b08:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b0e:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b16:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	e7e8      	b.n	8004af2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004b20:	40012c00 	.word	0x40012c00

08004b24 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b26:	07da      	lsls	r2, r3, #31
{
 8004b28:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b2a:	d506      	bpl.n	8004b3a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2c:	6801      	ldr	r1, [r0, #0]
 8004b2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004b30:	684a      	ldr	r2, [r1, #4]
 8004b32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004b36:	4322      	orrs	r2, r4
 8004b38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3a:	079c      	lsls	r4, r3, #30
 8004b3c:	d506      	bpl.n	8004b4c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3e:	6801      	ldr	r1, [r0, #0]
 8004b40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004b42:	684a      	ldr	r2, [r1, #4]
 8004b44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b48:	4322      	orrs	r2, r4
 8004b4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b4c:	0759      	lsls	r1, r3, #29
 8004b4e:	d506      	bpl.n	8004b5e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b50:	6801      	ldr	r1, [r0, #0]
 8004b52:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004b54:	684a      	ldr	r2, [r1, #4]
 8004b56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b5a:	4322      	orrs	r2, r4
 8004b5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b5e:	071a      	lsls	r2, r3, #28
 8004b60:	d506      	bpl.n	8004b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b62:	6801      	ldr	r1, [r0, #0]
 8004b64:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004b66:	684a      	ldr	r2, [r1, #4]
 8004b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b6c:	4322      	orrs	r2, r4
 8004b6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	06dc      	lsls	r4, r3, #27
 8004b72:	d506      	bpl.n	8004b82 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b74:	6801      	ldr	r1, [r0, #0]
 8004b76:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004b78:	688a      	ldr	r2, [r1, #8]
 8004b7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b7e:	4322      	orrs	r2, r4
 8004b80:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b82:	0699      	lsls	r1, r3, #26
 8004b84:	d506      	bpl.n	8004b94 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b86:	6801      	ldr	r1, [r0, #0]
 8004b88:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004b8a:	688a      	ldr	r2, [r1, #8]
 8004b8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b90:	4322      	orrs	r2, r4
 8004b92:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b94:	065a      	lsls	r2, r3, #25
 8004b96:	d509      	bpl.n	8004bac <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b98:	6801      	ldr	r1, [r0, #0]
 8004b9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004b9c:	684a      	ldr	r2, [r1, #4]
 8004b9e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004ba2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ba4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ba8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004baa:	d00b      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	d506      	bpl.n	8004bbe <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb0:	6802      	ldr	r2, [r0, #0]
 8004bb2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004bb4:	6853      	ldr	r3, [r2, #4]
 8004bb6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6053      	str	r3, [r2, #4]
  }
}
 8004bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc4:	684a      	ldr	r2, [r1, #4]
 8004bc6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004bc8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004bcc:	4322      	orrs	r2, r4
 8004bce:	604a      	str	r2, [r1, #4]
 8004bd0:	e7ec      	b.n	8004bac <UART_AdvFeatureConfig+0x88>
 8004bd2:	bf00      	nop

08004bd4 <HAL_UART_Init>:
  if(huart == NULL)
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f000 80af 	beq.w	8004d38 <HAL_UART_Init+0x164>
{
 8004bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8004bdc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004be0:	4604      	mov	r4, r0
 8004be2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d031      	beq.n	8004c4e <HAL_UART_Init+0x7a>
  __HAL_UART_DISABLE(huart);
 8004bea:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bec:	6927      	ldr	r7, [r4, #16]
 8004bee:	6966      	ldr	r6, [r4, #20]
 8004bf0:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004bf2:	4a89      	ldr	r2, [pc, #548]	; (8004e18 <HAL_UART_Init+0x244>)
  huart->gState = HAL_UART_STATE_BUSY;
 8004bf4:	2324      	movs	r3, #36	; 0x24
 8004bf6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004bfa:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bfc:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004bfe:	f020 0001 	bic.w	r0, r0, #1
 8004c02:	6028      	str	r0, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c04:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c06:	433b      	orrs	r3, r7
 8004c08:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c0a:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c12:	686a      	ldr	r2, [r5, #4]
 8004c14:	68e6      	ldr	r6, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004c16:	69a3      	ldr	r3, [r4, #24]
 8004c18:	6a27      	ldr	r7, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1a:	4880      	ldr	r0, [pc, #512]	; (8004e1c <HAL_UART_Init+0x248>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c20:	4332      	orrs	r2, r6
 8004c22:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004c24:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004c26:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004c28:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004c2c:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c2e:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004c30:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c32:	d06f      	beq.n	8004d14 <HAL_UART_Init+0x140>
 8004c34:	4b7a      	ldr	r3, [pc, #488]	; (8004e20 <HAL_UART_Init+0x24c>)
 8004c36:	429d      	cmp	r5, r3
 8004c38:	d00e      	beq.n	8004c58 <HAL_UART_Init+0x84>
 8004c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	d00a      	beq.n	8004c58 <HAL_UART_Init+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004c46:	f000 80a2 	beq.w	8004d8e <HAL_UART_Init+0x1ba>
    return HAL_ERROR;
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004c4e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004c52:	f7fd fa2f 	bl	80020b4 <HAL_UART_MspInit>
 8004c56:	e7c8      	b.n	8004bea <HAL_UART_Init+0x16>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c58:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004c5c:	f000 8094 	beq.w	8004d88 <HAL_UART_Init+0x1b4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c60:	f7ff faba 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8004c64:	6862      	ldr	r2, [r4, #4]
 8004c66:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d149      	bne.n	8004d0c <HAL_UART_Init+0x138>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004c8a:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c94:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c96:	f7fe f881 	bl	8002d9c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004ca0:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ca2:	d40b      	bmi.n	8004cbc <HAL_UART_Init+0xe8>
      /* Timeout Occured */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	0752      	lsls	r2, r2, #29
 8004ca8:	d424      	bmi.n	8004cf4 <HAL_UART_Init+0x120>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004caa:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cac:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8004cae:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8004cb2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8004cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	69dd      	ldr	r5, [r3, #28]
 8004cbe:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004cc2:	d1ef      	bne.n	8004ca4 <HAL_UART_Init+0xd0>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004cc4:	f7fe f86a 	bl	8002d9c <HAL_GetTick>
 8004cc8:	1b80      	subs	r0, r0, r6
 8004cca:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cce:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004cd0:	d3f4      	bcc.n	8004cbc <HAL_UART_Init+0xe8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	689a      	ldr	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004cdc:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8004ce4:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8004ce6:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cea:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004cee:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8004cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf4:	69dd      	ldr	r5, [r3, #28]
 8004cf6:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8004cfa:	d1d6      	bne.n	8004caa <HAL_UART_Init+0xd6>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004cfc:	f7fe f84e 	bl	8002d9c <HAL_GetTick>
 8004d00:	1b80      	subs	r0, r0, r6
 8004d02:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d06:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004d08:	d3f4      	bcc.n	8004cf4 <HAL_UART_Init+0x120>
 8004d0a:	e7e2      	b.n	8004cd2 <HAL_UART_Init+0xfe>
    UART_AdvFeatureConfig(huart);
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f7ff ff09 	bl	8004b24 <UART_AdvFeatureConfig>
 8004d12:	e7b1      	b.n	8004c78 <HAL_UART_Init+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d14:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_UART_Init+0x250>)
 8004d16:	4a44      	ldr	r2, [pc, #272]	; (8004e28 <HAL_UART_Init+0x254>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	d13b      	bne.n	8004d9e <HAL_UART_Init+0x1ca>
    switch (clocksource)
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d834      	bhi.n	8004d94 <HAL_UART_Init+0x1c0>
 8004d2a:	e8df f003 	tbb	[pc, r3]
 8004d2e:	2a2d      	.short	0x2a2d
 8004d30:	33153320 	.word	0x33153320
 8004d34:	3333      	.short	0x3333
 8004d36:	07          	.byte	0x07
 8004d37:	00          	.byte	0x00
    return HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
}
 8004d3a:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d3c:	6862      	ldr	r2, [r4, #4]
 8004d3e:	0853      	lsrs	r3, r2, #1
 8004d40:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d48:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004d4a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d4e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60eb      	str	r3, [r5, #12]
 8004d56:	e78c      	b.n	8004c72 <HAL_UART_Init+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d58:	f7ff fa04 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004d5c:	6862      	ldr	r2, [r4, #4]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	0853      	lsrs	r3, r2, #1
 8004d62:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	e7ed      	b.n	8004d4a <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	0853      	lsrs	r3, r2, #1
 8004d72:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004d76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	e7e3      	b.n	8004d4a <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d82:	f7ff fa41 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 8004d86:	e7e9      	b.n	8004d5c <HAL_UART_Init+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d88:	f7ff fa26 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	e7e6      	b.n	8004d5c <HAL_UART_Init+0x188>
    huart->Instance->BRR = brrtemp;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60eb      	str	r3, [r5, #12]
 8004d92:	e75a      	b.n	8004c4a <HAL_UART_Init+0x76>
 8004d94:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <HAL_UART_Init+0x248>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	f63f af53 	bhi.w	8004c4a <HAL_UART_Init+0x76>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_UART_Init+0x1d8>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004c61 	.word	0x08004c61
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004e01 	.word	0x08004e01
 8004db8:	08004c4b 	.word	0x08004c4b
 8004dbc:	08004dfb 	.word	0x08004dfb
 8004dc0:	08004c4b 	.word	0x08004c4b
 8004dc4:	08004c4b 	.word	0x08004c4b
 8004dc8:	08004c4b 	.word	0x08004c4b
 8004dcc:	08004de7 	.word	0x08004de7
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004dd0:	f7ff fa1a 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dd4:	6862      	ldr	r2, [r4, #4]
 8004dd6:	4911      	ldr	r1, [pc, #68]	; (8004e1c <HAL_UART_Init+0x248>)
 8004dd8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	60cb      	str	r3, [r1, #12]
 8004de4:	e745      	b.n	8004c72 <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	490c      	ldr	r1, [pc, #48]	; (8004e1c <HAL_UART_Init+0x248>)
 8004dea:	0853      	lsrs	r3, r2, #1
 8004dec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	60cb      	str	r3, [r1, #12]
 8004df8:	e73b      	b.n	8004c72 <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dfa:	f7ff f9b3 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004dfe:	e7e9      	b.n	8004dd4 <HAL_UART_Init+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e00:	6862      	ldr	r2, [r4, #4]
 8004e02:	4906      	ldr	r1, [pc, #24]	; (8004e1c <HAL_UART_Init+0x248>)
 8004e04:	0853      	lsrs	r3, r2, #1
 8004e06:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004e0a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	60cb      	str	r3, [r1, #12]
 8004e16:	e72c      	b.n	8004c72 <HAL_UART_Init+0x9e>
 8004e18:	efff69f3 	.word	0xefff69f3
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40004400 	.word	0x40004400
 8004e24:	40021000 	.word	0x40021000
 8004e28:	080080b4 	.word	0x080080b4

08004e2c <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8004e2c:	88c0      	ldrh	r0, [r0, #6]
 8004e2e:	4770      	bx	lr

08004e30 <VBS_GetAvBusVoltage_V>:
  */
uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004e30:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004e32:	8840      	ldrh	r0, [r0, #2]
 8004e34:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004e38:	0c00      	lsrs	r0, r0, #16
 8004e3a:	4770      	bx	lr

08004e3c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval Volt_Components Limited Vqd vector
  */
Volt_Components Circle_Limitation( CircleLimitation_Handle_t * pHandle, Volt_Components Vqd )
{
 8004e3c:	b410      	push	{r4}
 8004e3e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.qV_Component2 ) * Vqd.qV_Component2;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 2*32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e40:	8802      	ldrh	r2, [r0, #0]
 8004e42:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.qV_Component2 ) * Vqd.qV_Component2;
 8004e44:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e48:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.qV_Component1 ) * Vqd.qV_Component1 +
 8004e4c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e50:	4294      	cmp	r4, r2
{
 8004e52:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e54:	d919      	bls.n	8004e8a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004e56:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 8004e5a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004e5e:	b2e4      	uxtb	r4, r4
 8004e60:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.qV_Component1 * ( int32_t )table_element;
 8004e64:	8842      	ldrh	r2, [r0, #2]
 8004e66:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.qV_Component1 = ( int16_t )( sw_temp / 32768 );
 8004e6a:	2900      	cmp	r1, #0

    sw_temp = Vqd.qV_Component2 * ( int32_t )( table_element );
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.qV_Component1 = ( int16_t )( sw_temp / 32768 );
 8004e70:	bfbc      	itt	lt
 8004e72:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004e76:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.qV_Component2 = ( int16_t )( sw_temp / 32768 );
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bfbc      	itt	lt
 8004e7c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004e80:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.qV_Component1 = ( int16_t )( sw_temp / 32768 );
 8004e82:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.qV_Component2 = ( int16_t )( sw_temp / 32768 );
 8004e86:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8004e8a:	b289      	uxth	r1, r1
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f361 000f 	bfi	r0, r1, #0, #16
 8004e94:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004e98:	b005      	add	sp, #20
 8004e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <DAC_SetChannelConfig>:
  */
void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8004ea0:	4401      	add	r1, r0
 8004ea2:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
 8004ea6:	4770      	bx	lr

08004ea8 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8004ea8:	4401      	add	r1, r0
}
 8004eaa:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004eae:	4770      	bx	lr

08004eb0 <DAC_SetUserChannelValue>:
  */
void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8004eb0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8004eb4:	864a      	strh	r2, [r1, #50]	; 0x32
 8004eb6:	4770      	bx	lr

08004eb8 <DAC_GetUserChannelValue>:
  * @retval none.
  */
int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8004eb8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8004ebc:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop

08004ec4 <DAC_Init>:
  */
void DAC_Init(UI_Handle_t *pHandle)
{  
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;

  if(pDacHandle->hDAC_CH1_ENABLED == ENABLE)
 8004ec4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d104      	bne.n	8004ed4 <DAC_Init+0x10>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8004eca:	4a03      	ldr	r2, [pc, #12]	; (8004ed8 <DAC_Init+0x14>)
 8004ecc:	6813      	ldr	r3, [r2, #0]
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40007400 	.word	0x40007400

08004edc <DAC_Exec>:
void DAC_Exec(UI_Handle_t *pHandle)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;
  
  if(pDacHandle->hDAC_CH1_ENABLED == ENABLE)
 8004edc:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8004ede:	2a01      	cmp	r2, #1
 8004ee0:	d000      	beq.n	8004ee4 <DAC_Exec+0x8>
 8004ee2:	4770      	bx	lr
{
 8004ee4:	b538      	push	{r3, r4, r5, lr}
  {
  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
    LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                    DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var)));
 8004ee6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8004eea:	f7fd fb7b 	bl	80025e4 <UI_GetReg>
 8004eee:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8004ef2:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8004ef6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	40d9      	lsrs	r1, r3
 8004f00:	4d09      	ldr	r5, [pc, #36]	; (8004f28 <DAC_Exec+0x4c>)
  SET_BIT(DACx->SWTRIGR,
 8004f02:	4c0a      	ldr	r4, [pc, #40]	; (8004f2c <DAC_Exec+0x50>)
  
  MODIFY_REG(*preg,
 8004f04:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8004f08:	b203      	sxth	r3, r0
 8004f0a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004f0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6063      	str	r3, [r4, #4]
 8004f24:	bd38      	pop	{r3, r4, r5, pc}
 8004f26:	bf00      	nop
 8004f28:	40007408 	.word	0x40007408
 8004f2c:	40007400 	.word	0x40007400

08004f30 <FCP_Init>:
 * @{
 */

void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8004f34:	7503      	strb	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
 8004f36:	7543      	strb	r3, [r0, #21]
  pHandle->TxFrame.FrameCRC = 0;
 8004f38:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8004f3c:	f880 3097 	strb.w	r3, [r0, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 8004f40:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 8004f44:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 8004f48:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004f4c:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004f50:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8004f54:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004f5c:	b118      	cbz	r0, 8004f66 <FCP_SetClient+0xa>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004f62:	9b00      	ldr	r3, [sp, #0]
 8004f64:	60c3      	str	r3, [r0, #12]
 8004f66:	4770      	bx	lr

08004f68 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004f68:	b1a8      	cbz	r0, 8004f96 <FCP_CalcCRC+0x2e>
{
 8004f6a:	b410      	push	{r4}
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004f6c:	7844      	ldrb	r4, [r0, #1]
    nSum += pFrame->Code;
 8004f6e:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8004f70:	4423      	add	r3, r4

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f72:	b154      	cbz	r4, 8004f8a <FCP_CalcCRC+0x22>
 8004f74:	3c01      	subs	r4, #1
 8004f76:	b2e4      	uxtb	r4, r4
 8004f78:	3402      	adds	r4, #2
 8004f7a:	4404      	add	r4, r0
 8004f7c:	1c42      	adds	r2, r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8004f7e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004f82:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f84:	4294      	cmp	r4, r2
      nSum += pFrame->Buffer[idx];
 8004f86:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f88:	d1f9      	bne.n	8004f7e <FCP_CalcCRC+0x16>
    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
  }

  return nCRC ;
}
 8004f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004f8e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8004f92:	f003 00ff 	and.w	r0, r3, #255	; 0xff
}
 8004f96:	4770      	bx	lr

08004f98 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8004f98:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8004f9a:	2400      	movs	r4, #0
 8004f9c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8004f9e:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8004fa2:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8004fa4:	7604      	strb	r4, [r0, #24]
  pHandle->pFOCVars = pFOCVars;
 8004fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 8004faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8004fb0:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8004fb2:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8004fb4:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8004fb6:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004fb8:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8004fba:	7643      	strb	r3, [r0, #25]
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop

08004fc0 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8004fc0:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8004fc2:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8004fc4:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004fc6:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8004fc8:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004fca:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8004fcc:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8004fce:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8004fd0:	7643      	strb	r3, [r0, #25]
}
 8004fd2:	bc30      	pop	{r4, r5}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in Curr_Components
  *         format.
  * @retval none.
  */
void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, Curr_Components Iqdref )
{
 8004fd8:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.qI_Component1 = Iqdref.qI_Component1;
  pHandle->Iqdref.qI_Component2 = Iqdref.qI_Component2;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004fda:	2201      	movs	r2, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8004fdc:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8004fde:	2300      	movs	r3, #0
{
 8004fe0:	b083      	sub	sp, #12
  pHandle->Iqdref.qI_Component1 = Iqdref.qI_Component1;
 8004fe2:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8004fe6:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004fe8:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8004fea:	7643      	strb	r3, [r0, #25]
}
 8004fec:	b003      	add	sp, #12
 8004fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8004ff4:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8004ff6:	2103      	movs	r1, #3
{
 8004ff8:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	f001 ffbc 	bl	8006f78 <STM_NextState>

  if ( RetVal == true )
 8005000:	b108      	cbz	r0, 8005006 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8005002:	2301      	movs	r3, #1
 8005004:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8005006:	bd10      	pop	{r4, pc}

08005008 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8005008:	6800      	ldr	r0, [r0, #0]
 800500a:	2107      	movs	r1, #7
 800500c:	f001 bfb4 	b.w	8006f78 <STM_NextState>

08005010 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8005010:	6800      	ldr	r0, [r0, #0]
 8005012:	f002 b853 	b.w	80070bc <STM_FaultAcknowledged>
 8005016:	bf00      	nop

08005018 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8005018:	6800      	ldr	r0, [r0, #0]
 800501a:	2101      	movs	r1, #1
 800501c:	f001 bfac 	b.w	8006f78 <STM_NextState>

08005020 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8005020:	b110      	cbz	r0, 8005028 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8005022:	7e03      	ldrb	r3, [r0, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d000      	beq.n	800502a <MCI_ExecBufferedCommands+0xa>
 8005028:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 800502a:	7b01      	ldrb	r1, [r0, #12]
 800502c:	2902      	cmp	r1, #2
{
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8005032:	d00f      	beq.n	8005054 <MCI_ExecBufferedCommands+0x34>
 8005034:	2903      	cmp	r1, #3
 8005036:	d004      	beq.n	8005042 <MCI_ExecBufferedCommands+0x22>
 8005038:	2901      	cmp	r1, #1
 800503a:	d01d      	beq.n	8005078 <MCI_ExecBufferedCommands+0x58>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800503c:	2303      	movs	r3, #3
 800503e:	7623      	strb	r3, [r4, #24]
 8005040:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8005042:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8005044:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8005048:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800504a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800504e:	2302      	movs	r3, #2
 8005050:	7623      	strb	r3, [r4, #24]
 8005052:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8005054:	6883      	ldr	r3, [r0, #8]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8005056:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8005058:	2100      	movs	r1, #0
 800505a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800505e:	f001 fedd 	bl	8006e1c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8005062:	8ae2      	ldrh	r2, [r4, #22]
 8005064:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8005068:	6860      	ldr	r0, [r4, #4]
 800506a:	f001 fedb 	bl	8006e24 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800506e:	2800      	cmp	r0, #0
 8005070:	d1ed      	bne.n	800504e <MCI_ExecBufferedCommands+0x2e>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8005072:	2303      	movs	r3, #3
 8005074:	7623      	strb	r3, [r4, #24]
 8005076:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8005078:	6883      	ldr	r3, [r0, #8]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800507a:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8005082:	f001 fecb 	bl	8006e1c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8005086:	8ae2      	ldrh	r2, [r4, #22]
 8005088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508c:	6860      	ldr	r0, [r4, #4]
 800508e:	f001 fec9 	bl	8006e24 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8005092:	2800      	cmp	r0, #0
 8005094:	d0ed      	beq.n	8005072 <MCI_ExecBufferedCommands+0x52>
 8005096:	e7da      	b.n	800504e <MCI_ExecBufferedCommands+0x2e>

08005098 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8005098:	6800      	ldr	r0, [r0, #0]
 800509a:	f002 b80d 	b.w	80070b8 <STM_GetState>
 800509e:	bf00      	nop

080050a0 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 80050a0:	7e40      	ldrb	r0, [r0, #25]
 80050a2:	4770      	bx	lr

080050a4 <MCI_GetImposedMotorDirection>:
  */
int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 80050a4:	7b03      	ldrb	r3, [r0, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d015      	beq.n	80050d6 <MCI_GetImposedMotorDirection+0x32>
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d00b      	beq.n	80050c6 <MCI_GetImposedMotorDirection+0x22>
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d001      	beq.n	80050b6 <MCI_GetImposedMotorDirection+0x12>
  int16_t retVal = 1;
 80050b2:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 80050b4:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 80050b6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80050ba:	2b00      	cmp	r3, #0
        retVal = -1;
 80050bc:	bfac      	ite	ge
 80050be:	2001      	movge	r0, #1
 80050c0:	f04f 30ff 	movlt.w	r0, #4294967295
 80050c4:	4770      	bx	lr
      if ( pHandle->Iqdref.qI_Component1 < 0 )
 80050c6:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 80050ca:	2b00      	cmp	r3, #0
        retVal = -1;
 80050cc:	bfac      	ite	ge
 80050ce:	2001      	movge	r0, #1
 80050d0:	f04f 30ff 	movlt.w	r0, #4294967295
 80050d4:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 80050d6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80050da:	2b00      	cmp	r3, #0
        retVal = -1;
 80050dc:	bfac      	ite	ge
 80050de:	2001      	movge	r0, #1
 80050e0:	f04f 30ff 	movlt.w	r0, #4294967295
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop

080050e8 <MCI_GetLastRampFinalSpeed>:
int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80050e8:	7b03      	ldrb	r3, [r0, #12]
 80050ea:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 80050ec:	bf0c      	ite	eq
 80050ee:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 80050f2:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <MCI_StopSpeedRamp>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is executed, false otherwise.
  */
bool MCI_StopSpeedRamp( MCI_Handle_t * pHandle )
{
  return STC_StopSpeedRamp( pHandle->pSTC );
 80050f8:	6840      	ldr	r0, [r0, #4]
 80050fa:	f001 bf1b 	b.w	8006f34 <STC_StopSpeedRamp>
 80050fe:	bf00      	nop

08005100 <MCI_GetAvrgMecSpeed01Hz>:
  *         algorithm
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t rotor average mechanical speed (01Hz)
  */
int16_t MCI_GetAvrgMecSpeed01Hz( MCI_Handle_t * pHandle )
{
 8005100:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8005102:	6840      	ldr	r0, [r0, #4]
 8005104:	f001 fe78 	bl	8006df8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeed01Hz( SpeedSensor ) );
}
 8005108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeed01Hz( SpeedSensor ) );
 800510c:	f001 be20 	b.w	8006d50 <SPD_GetAvrgMecSpeed01Hz>

08005110 <MCI_GetMecSpeedRef01Hz>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
int16_t MCI_GetMecSpeedRef01Hz( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRef01Hz( pHandle->pSTC ) );
 8005110:	6840      	ldr	r0, [r0, #4]
 8005112:	f001 be7b 	b.w	8006e0c <STC_GetMecSpeedRef01Hz>
 8005116:	bf00      	nop

08005118 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Iab
  */
Curr_Components MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8005118:	6883      	ldr	r3, [r0, #8]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	b283      	uxth	r3, r0
}
 800511e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8005122:	b082      	sub	sp, #8
}
 8005124:	b002      	add	sp, #8
 8005126:	4770      	bx	lr

08005128 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Ialphabeta
  */
Curr_Components MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8005128:	6883      	ldr	r3, [r0, #8]
 800512a:	6858      	ldr	r0, [r3, #4]
 800512c:	b283      	uxth	r3, r0
}
 800512e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8005132:	b082      	sub	sp, #8
}
 8005134:	b002      	add	sp, #8
 8005136:	4770      	bx	lr

08005138 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Iqd
  */
Curr_Components MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8005138:	6883      	ldr	r3, [r0, #8]
 800513a:	68d8      	ldr	r0, [r3, #12]
 800513c:	b283      	uxth	r3, r0
}
 800513e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8005142:	b082      	sub	sp, #8
}
 8005144:	b002      	add	sp, #8
 8005146:	4770      	bx	lr

08005148 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Iqdref
  */
Curr_Components MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8005148:	6883      	ldr	r3, [r0, #8]
 800514a:	6918      	ldr	r0, [r3, #16]
 800514c:	b283      	uxth	r3, r0
}
 800514e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8005152:	b082      	sub	sp, #8
}
 8005154:	b002      	add	sp, #8
 8005156:	4770      	bx	lr

08005158 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Vqd
  */
Volt_Components MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8005158:	6883      	ldr	r3, [r0, #8]
 800515a:	f8d3 0016 	ldr.w	r0, [r3, #22]
 800515e:	b283      	uxth	r3, r0
}
 8005160:	f363 000f 	bfi	r0, r3, #0, #16
{
 8005164:	b082      	sub	sp, #8
}
 8005166:	b002      	add	sp, #8
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Valphabeta
  */
Volt_Components MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 800516c:	6883      	ldr	r3, [r0, #8]
 800516e:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8005172:	b283      	uxth	r3, r0
}
 8005174:	f363 000f 	bfi	r0, r3, #0, #16
{
 8005178:	b082      	sub	sp, #8
}
 800517a:	b002      	add	sp, #8
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop

08005180 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8005180:	6883      	ldr	r3, [r0, #8]
}
 8005182:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8005186:	4770      	bx	lr

08005188 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.qI_Component2 = hNewIdref;
 8005188:	6883      	ldr	r3, [r0, #8]
 800518a:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 800518c:	8299      	strh	r1, [r3, #20]
 800518e:	4770      	bx	lr

08005190 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8005190:	4603      	mov	r3, r0
 8005192:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8005194:	6840      	ldr	r0, [r0, #4]
 8005196:	689c      	ldr	r4, [r3, #8]
 8005198:	f001 fed4 	bl	8006f44 <STC_GetDefaultIqdref>
 800519c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80051a0:	8220      	strh	r0, [r4, #16]
 80051a2:	8263      	strh	r3, [r4, #18]
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	bf00      	nop

080051a8 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Curr_Output.qI_Component1 = Curr_Input.qI_Component1;

  qIa_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component1;

  qIb_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component2;
 80051a8:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80051ac:	b202      	sxth	r2, r0
 80051ae:	0c03      	lsrs	r3, r0, #16
  qIa_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component1;
 80051b0:	fb12 f001 	smulbb	r0, r2, r1
  qIb_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component2;
 80051b4:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wIbeta_tmp = ( -( qIa_divSQRT3_tmp ) - ( qIb_divSQRT3_tmp ) -
 80051b8:	4240      	negs	r0, r0
 80051ba:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80051be:	13c0      	asrs	r0, r0, #15
                 ( qIb_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wIbeta_tmp > INT16_MAX )
 80051c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 80051c4:	b084      	sub	sp, #16
  if ( wIbeta_tmp > INT16_MAX )
 80051c6:	da04      	bge.n	80051d2 <MCM_Clarke+0x2a>
  {
    hIbeta_tmp = INT16_MAX;
  }
  else if ( wIbeta_tmp < ( -32768 ) )
 80051c8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80051cc:	da0c      	bge.n	80051e8 <MCM_Clarke+0x40>

  Curr_Output.qI_Component2 = hIbeta_tmp;

  if ( Curr_Output.qI_Component2 == ( int16_t )( -32768 ) )
  {
    Curr_Output.qI_Component2 = -32767;
 80051ce:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <MCM_Clarke+0x48>)
 80051d0:	e001      	b.n	80051d6 <MCM_Clarke+0x2e>
    hIbeta_tmp = INT16_MAX;
 80051d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Curr_Output );
 80051d6:	b292      	uxth	r2, r2
 80051d8:	2000      	movs	r0, #0
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f362 000f 	bfi	r0, r2, #0, #16
 80051e0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80051e4:	b004      	add	sp, #16
 80051e6:	4770      	bx	lr
    hIbeta_tmp = ( int16_t )( wIbeta_tmp );
 80051e8:	b203      	sxth	r3, r0
  if ( Curr_Output.qI_Component2 == ( int16_t )( -32768 ) )
 80051ea:	d1f4      	bne.n	80051d6 <MCM_Clarke+0x2e>
    Curr_Output.qI_Component2 = -32767;
 80051ec:	4b00      	ldr	r3, [pc, #0]	; (80051f0 <MCM_Clarke+0x48>)
 80051ee:	e7f2      	b.n	80051d6 <MCM_Clarke+0x2e>
 80051f0:	ffff8001 	.word	0xffff8001

080051f4 <MCM_Park>:
  * @param  Curr_Input: stator current Ialpha and Ibeta in Curr_Components format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator current Iq and Id in Curr_Components format
  */
Curr_Components MCM_Park( Curr_Components Curr_Input, int16_t Theta )
{
 80051f4:	b430      	push	{r4, r5}
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80051f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 80051fa:	f3c1 1189 	ubfx	r1, r1, #6, #10


  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80051fe:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8005202:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005206:	b205      	sxth	r5, r0
{
 8005208:	b084      	sub	sp, #16
 800520a:	ea4f 4020 	mov.w	r0, r0, asr #16
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800520e:	d055      	beq.n	80052bc <MCM_Park+0xc8>
 8005210:	d943      	bls.n	800529a <MCM_Park+0xa6>
 8005212:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005216:	d031      	beq.n	800527c <MCM_Park+0x88>
 8005218:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800521c:	d109      	bne.n	8005232 <MCM_Park+0x3e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800521e:	b2c9      	uxtb	r1, r1
 8005220:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <MCM_Park+0xe0>)
 8005222:	43cb      	mvns	r3, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005224:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005228:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800522a:	4264      	negs	r4, r4
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800522c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005230:	b224      	sxth	r4, r4
  qIq_tmp_1 = Curr_Input.qI_Component1 * ( int32_t )Local_Vector_Components.hCos;
 8005232:	fb05 f204 	mul.w	r2, r5, r4
  wIqd_tmp = ( qIq_tmp_1 - qIq_tmp_2 ) >> 15;
 8005236:	fb00 2213 	mls	r2, r0, r3, r2
 800523a:	13d2      	asrs	r2, r2, #15
  if ( wIqd_tmp > INT16_MAX )
 800523c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005240:	da28      	bge.n	8005294 <MCM_Park+0xa0>
  else if ( wIqd_tmp < ( -32768 ) )
 8005242:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8005246:	db37      	blt.n	80052b8 <MCM_Park+0xc4>
    hIqd_tmp = ( int16_t )( wIqd_tmp );
 8005248:	b212      	sxth	r2, r2
  if ( Curr_Output.qI_Component1 == ( int16_t )( -32768 ) )
 800524a:	d035      	beq.n	80052b8 <MCM_Park+0xc4>
  qId_tmp_2 = Curr_Input.qI_Component2 * ( int32_t )Local_Vector_Components.hCos;
 800524c:	fb04 f400 	mul.w	r4, r4, r0
  wIqd_tmp = ( qId_tmp_1 + qId_tmp_2 ) >> 15;
 8005250:	fb05 4303 	mla	r3, r5, r3, r4
 8005254:	13db      	asrs	r3, r3, #15
  if ( wIqd_tmp > INT16_MAX )
 8005256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525a:	da18      	bge.n	800528e <MCM_Park+0x9a>
  else if ( wIqd_tmp < ( -32768 ) )
 800525c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8005260:	db01      	blt.n	8005266 <MCM_Park+0x72>
    hIqd_tmp = ( int16_t )( wIqd_tmp );
 8005262:	b21b      	sxth	r3, r3
  if ( Curr_Output.qI_Component2 == ( int16_t )( -32768 ) )
 8005264:	d100      	bne.n	8005268 <MCM_Park+0x74>
    Curr_Output.qI_Component2 = -32767;
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <MCM_Park+0xe4>)
  return ( Curr_Output );
 8005268:	b292      	uxth	r2, r2
 800526a:	2000      	movs	r0, #0
 800526c:	b29b      	uxth	r3, r3
 800526e:	f362 000f 	bfi	r0, r2, #0, #16
 8005272:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005276:	b004      	add	sp, #16
 8005278:	bc30      	pop	{r4, r5}
 800527a:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800527c:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800527e:	43cb      	mvns	r3, r1
 8005280:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <MCM_Park+0xe0>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005284:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8005288:	f932 3011 	ldrsh.w	r3, [r2, r1, lsl #1]
 800528c:	e7d1      	b.n	8005232 <MCM_Park+0x3e>
    hIqd_tmp = INT16_MAX;
 800528e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005292:	e7e9      	b.n	8005268 <MCM_Park+0x74>
    hIqd_tmp = INT16_MAX;
 8005294:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005298:	e7d8      	b.n	800524c <MCM_Park+0x58>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800529a:	2a00      	cmp	r2, #0
 800529c:	d1c9      	bne.n	8005232 <MCM_Park+0x3e>
      break;

    case U180_270:
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800529e:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80052a0:	43cb      	mvns	r3, r1
 80052a2:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80052a4:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <MCM_Park+0xe0>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80052a6:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80052aa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80052ae:	4264      	negs	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80052b0:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80052b2:	b224      	sxth	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80052b4:	b21b      	sxth	r3, r3
 80052b6:	e7bc      	b.n	8005232 <MCM_Park+0x3e>
    Curr_Output.qI_Component1 = -32767;
 80052b8:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <MCM_Park+0xe4>)
 80052ba:	e7c7      	b.n	800524c <MCM_Park+0x58>
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80052bc:	b2c9      	uxtb	r1, r1
 80052be:	43cb      	mvns	r3, r1
 80052c0:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <MCM_Park+0xe0>)
 80052c2:	b2db      	uxtb	r3, r3
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80052c4:	f932 4011 	ldrsh.w	r4, [r2, r1, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80052c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052cc:	425b      	negs	r3, r3
 80052ce:	b21b      	sxth	r3, r3
 80052d0:	e7af      	b.n	8005232 <MCM_Park+0x3e>
 80052d2:	bf00      	nop
 80052d4:	080080b8 	.word	0x080080b8
 80052d8:	ffff8001 	.word	0xffff8001

080052dc <MCM_Rev_Park>:
{
 80052dc:	b430      	push	{r4, r5}
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80052de:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
  uhindex /= ( uint16_t )64;
 80052e2:	f3c1 1189 	ubfx	r1, r1, #6, #10
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80052e6:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80052ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80052ee:	b205      	sxth	r5, r0
{
 80052f0:	b084      	sub	sp, #16
 80052f2:	ea4f 4020 	mov.w	r0, r0, asr #16
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80052f6:	d03c      	beq.n	8005372 <MCM_Rev_Park+0x96>
 80052f8:	d92c      	bls.n	8005354 <MCM_Rev_Park+0x78>
 80052fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80052fe:	d020      	beq.n	8005342 <MCM_Rev_Park+0x66>
 8005300:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005304:	d109      	bne.n	800531a <MCM_Rev_Park+0x3e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005306:	b2c9      	uxtb	r1, r1
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <MCM_Rev_Park+0xac>)
 800530a:	43cb      	mvns	r3, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800530c:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005310:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005312:	4264      	negs	r4, r4
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005314:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005318:	b224      	sxth	r4, r4
  qValpha_tmp2 = Volt_Input.qV_Component2 * ( int32_t )Local_Vector_Components.hSin;
 800531a:	fb00 f203 	mul.w	r2, r0, r3
  Volt_Output.qV_Component1 = ( int16_t )( ( ( qValpha_tmp1 ) + ( qValpha_tmp2 ) ) >> 15 );
 800531e:	fb05 2204 	mla	r2, r5, r4, r2
  qVbeta_tmp2 = Volt_Input.qV_Component2 * ( int32_t )Local_Vector_Components.hCos;
 8005322:	fb04 f000 	mul.w	r0, r4, r0
  Volt_Output.qV_Component2 = ( int16_t )( ( qVbeta_tmp2 - qVbeta_tmp1 ) >> 15 );
 8005326:	fb05 0313 	mls	r3, r5, r3, r0
  return ( Volt_Output );
 800532a:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 800532e:	2000      	movs	r0, #0
 8005330:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8005334:	f362 000f 	bfi	r0, r2, #0, #16
 8005338:	f363 401f 	bfi	r0, r3, #16, #16
}
 800533c:	b004      	add	sp, #16
 800533e:	bc30      	pop	{r4, r5}
 8005340:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8005342:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005344:	43cb      	mvns	r3, r1
 8005346:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8005348:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <MCM_Rev_Park+0xac>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800534a:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800534e:	f932 3011 	ldrsh.w	r3, [r2, r1, lsl #1]
 8005352:	e7e2      	b.n	800531a <MCM_Rev_Park+0x3e>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8005354:	2a00      	cmp	r2, #0
 8005356:	d1e0      	bne.n	800531a <MCM_Rev_Park+0x3e>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005358:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800535a:	43cb      	mvns	r3, r1
 800535c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <MCM_Rev_Park+0xac>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005360:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005364:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005368:	4264      	negs	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800536a:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800536c:	b224      	sxth	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800536e:	b213      	sxth	r3, r2
 8005370:	e7d3      	b.n	800531a <MCM_Rev_Park+0x3e>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005372:	b2c9      	uxtb	r1, r1
 8005374:	43cb      	mvns	r3, r1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4c03      	ldr	r4, [pc, #12]	; (8005388 <MCM_Rev_Park+0xac>)
 800537a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800537e:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005382:	4252      	negs	r2, r2
 8005384:	b213      	sxth	r3, r2
 8005386:	e7c8      	b.n	800531a <MCM_Rev_Park+0x3e>
 8005388:	080080b8 	.word	0x080080b8

0800538c <MCM_Trig_Functions>:
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 800538c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex /= ( uint16_t )64;
 8005390:	f3c0 1089 	ubfx	r0, r0, #6, #10
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8005394:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8005398:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800539c:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800539e:	d031      	beq.n	8005404 <MCM_Trig_Functions+0x78>
 80053a0:	d921      	bls.n	80053e6 <MCM_Trig_Functions+0x5a>
 80053a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80053a6:	d015      	beq.n	80053d4 <MCM_Trig_Functions+0x48>
 80053a8:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80053ac:	d109      	bne.n	80053c2 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053ae:	b2c0      	uxtb	r0, r0
 80053b0:	491a      	ldr	r1, [pc, #104]	; (800541c <MCM_Trig_Functions+0x90>)
 80053b2:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053b4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053b8:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053ba:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053bc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053c0:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 80053c2:	b292      	uxth	r2, r2
 80053c4:	2000      	movs	r0, #0
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f362 000f 	bfi	r0, r2, #0, #16
 80053cc:	f363 401f 	bfi	r0, r3, #16, #16
}
 80053d0:	b002      	add	sp, #8
 80053d2:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80053d4:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053d6:	43c3      	mvns	r3, r0
 80053d8:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80053da:	4910      	ldr	r1, [pc, #64]	; (800541c <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053dc:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80053e0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 80053e4:	e7ed      	b.n	80053c2 <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80053e6:	2900      	cmp	r1, #0
 80053e8:	d1eb      	bne.n	80053c2 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053ea:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053ec:	43c3      	mvns	r3, r0
 80053ee:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053f0:	490a      	ldr	r1, [pc, #40]	; (800541c <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053f2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053f6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053fa:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80053fc:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80053fe:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8005400:	b21b      	sxth	r3, r3
      break;
 8005402:	e7de      	b.n	80053c2 <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005404:	b2c0      	uxtb	r0, r0
 8005406:	43c3      	mvns	r3, r0
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <MCM_Trig_Functions+0x90>)
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8005410:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8005414:	425b      	negs	r3, r3
 8005416:	b21b      	sxth	r3, r3
      break;
 8005418:	e7d3      	b.n	80053c2 <MCM_Trig_Functions+0x36>
 800541a:	bf00      	nop
 800541c:	080080b8 	.word	0x080080b8

08005420 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005420:	b510      	push	{r4, lr}
 8005422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005426:	4604      	mov	r4, r0
 8005428:	2100      	movs	r1, #0
 800542a:	f002 fdd9 	bl	8007fe0 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800542e:	2300      	movs	r3, #0
 8005430:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005434:	bd10      	pop	{r4, pc}
 8005436:	bf00      	nop

08005438 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005438:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 800543c:	1c53      	adds	r3, r2, #1
 800543e:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005440:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005442:	bf88      	it	hi
 8005444:	2300      	movhi	r3, #0
{
 8005446:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005448:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 800544c:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005450:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005454:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8005458:	2200      	movs	r2, #0
 800545a:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800545c:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005460:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005462:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005464:	d1fa      	bne.n	800545c <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005466:	2a00      	cmp	r2, #0
 8005468:	bfb8      	it	lt
 800546a:	327f      	addlt	r2, #127	; 0x7f
 800546c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800546e:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005472:	bc30      	pop	{r4, r5}
 8005474:	4608      	mov	r0, r1
 8005476:	4770      	bx	lr

08005478 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005478:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop

08005480 <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
void NTC_Init( NTC_Handle_t * pHandle )
{
 8005480:	b538      	push	{r3, r4, r5, lr}

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005482:	7805      	ldrb	r5, [r0, #0]
 8005484:	b125      	cbz	r5, 8005490 <NTC_Init+0x10>
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
    NTC_Clear( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005486:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005488:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 800548a:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800548c:	8203      	strh	r3, [r0, #16]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005492:	3004      	adds	r0, #4
 8005494:	f7fc faf2 	bl	8001a7c <RCM_RegisterRegConv>
 8005498:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 800549c:	8225      	strh	r5, [r4, #16]
 800549e:	bd38      	pop	{r3, r4, r5, pc}

080054a0 <NTC_CalcAvTemp>:
uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80054a0:	7803      	ldrb	r3, [r0, #0]
 80054a2:	b11b      	cbz	r3, 80054ac <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80054a4:	2300      	movs	r3, #0
 80054a6:	82c3      	strh	r3, [r0, #22]
 80054a8:	4618      	mov	r0, r3
 80054aa:	4770      	bx	lr
{
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80054b0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80054b4:	f7fc fba6 	bl	8001c04 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80054b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054bc:	4298      	cmp	r0, r3
 80054be:	d014      	beq.n	80054ea <NTC_CalcAvTemp+0x4a>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80054c0:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80054c2:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80054c4:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 80054c6:	fb01 0303 	mla	r3, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80054ca:	fbb3 f3f2 	udiv	r3, r3, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	8223      	strh	r3, [r4, #16]
  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80054d2:	8b62      	ldrh	r2, [r4, #26]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d305      	bcc.n	80054e4 <NTC_CalcAvTemp+0x44>
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80054d8:	8ba2      	ldrh	r2, [r4, #28]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d807      	bhi.n	80054ee <NTC_CalcAvTemp+0x4e>
    hFault = pHandle->hFaultState;
 80054de:	8ae0      	ldrh	r0, [r4, #22]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80054e0:	82e0      	strh	r0, [r4, #22]
 80054e2:	bd10      	pop	{r4, pc}
    hFault = MC_OVER_TEMP;
 80054e4:	2008      	movs	r0, #8
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80054e6:	82e0      	strh	r0, [r4, #22]
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	8a23      	ldrh	r3, [r4, #16]
 80054ec:	e7f1      	b.n	80054d2 <NTC_CalcAvTemp+0x32>
    hFault = MC_NO_ERROR;
 80054ee:	2000      	movs	r0, #0
 80054f0:	e7f6      	b.n	80054e0 <NTC_CalcAvTemp+0x40>
 80054f2:	bf00      	nop

080054f4 <NTC_GetAvTemp_C>:
  */
int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80054f4:	7803      	ldrb	r3, [r0, #0]
 80054f6:	b113      	cbz	r3, 80054fe <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 80054f8:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 80054fa:	b200      	sxth	r0, r0
 80054fc:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80054fe:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005500:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005502:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005506:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005508:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 800550a:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800550e:	2b00      	cmp	r3, #0
 8005510:	bfbc      	itt	lt
 8005512:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005516:	33ff      	addlt	r3, #255	; 0xff
 8005518:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 800551c:	b200      	sxth	r0, r0
 800551e:	4770      	bx	lr

08005520 <PID_HandleInit>:
void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005520:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005522:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005524:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005526:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005528:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800552a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800552c:	6283      	str	r3, [r0, #40]	; 0x28
 800552e:	4770      	bx	lr

08005530 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005530:	8081      	strh	r1, [r0, #4]
 8005532:	4770      	bx	lr

08005534 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005534:	80c1      	strh	r1, [r0, #6]
 8005536:	4770      	bx	lr

08005538 <PID_GetKP>:
 * @retval Kp gain
 */
int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005538:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <PID_GetKI>:
 * @retval Ki gain
 */
int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005540:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005548:	6081      	str	r1, [r0, #8]
 800554a:	4770      	bx	lr

0800554c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 800554c:	8b00      	ldrh	r0, [r0, #24]
 800554e:	4770      	bx	lr

08005550 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005550:	8b40      	ldrh	r0, [r0, #26]
 8005552:	4770      	bx	lr

08005554 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005554:	8441      	strh	r1, [r0, #34]	; 0x22
 8005556:	4770      	bx	lr

08005558 <PID_GetKD>:
 * @retval Kd gain
 */
int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005558:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop

08005560 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005560:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005564:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8005568:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800556a:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800556e:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005572:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005576:	b163      	cbz	r3, 8005592 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005578:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800557a:	fb01 f103 	mul.w	r1, r1, r3

    if ( wIntegral_sum_temp < 0 )
 800557e:	198b      	adds	r3, r1, r6
 8005580:	d41d      	bmi.n	80055be <PI_Controller+0x5e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8005582:	2e00      	cmp	r6, #0
 8005584:	db26      	blt.n	80055d4 <PI_Controller+0x74>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005586:	68c1      	ldr	r1, [r0, #12]
 8005588:	428b      	cmp	r3, r1
 800558a:	dc03      	bgt.n	8005594 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800558c:	6901      	ldr	r1, [r0, #16]
 800558e:	428b      	cmp	r3, r1
 8005590:	db00      	blt.n	8005594 <PI_Controller+0x34>
 8005592:	4619      	mov	r1, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005594:	8b86      	ldrh	r6, [r0, #28]
 8005596:	8bc3      	ldrh	r3, [r0, #30]
 8005598:	4132      	asrs	r2, r6
 800559a:	fa41 f303 	asr.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	dc09      	bgt.n	80055b8 <PI_Controller+0x58>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 80055a4:	42ab      	cmp	r3, r5
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 80055a6:	bfb6      	itet	lt
 80055a8:	1aea      	sublt	r2, r5, r3
  int32_t wDischarge = 0;
 80055aa:	2200      	movge	r2, #0
 80055ac:	462b      	movlt	r3, r5
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80055ae:	4411      	add	r1, r2
 80055b0:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80055b2:	bc70      	pop	{r4, r5, r6}
  return ( ( int16_t )( wOutput_32 ) );
 80055b4:	b218      	sxth	r0, r3
}
 80055b6:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 80055b8:	1ae2      	subs	r2, r4, r3
 80055ba:	4623      	mov	r3, r4
 80055bc:	e7f7      	b.n	80055ae <PI_Controller+0x4e>
      if ( pHandle->wIntegralTerm > 0 )
 80055be:	2e00      	cmp	r6, #0
 80055c0:	dde1      	ble.n	8005586 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80055c2:	2900      	cmp	r1, #0
 80055c4:	dddf      	ble.n	8005586 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80055c6:	68c1      	ldr	r1, [r0, #12]
 80055c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80055cc:	4299      	cmp	r1, r3
 80055ce:	d1e1      	bne.n	8005594 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80055d0:	460b      	mov	r3, r1
 80055d2:	e7de      	b.n	8005592 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80055d4:	4e02      	ldr	r6, [pc, #8]	; (80055e0 <PI_Controller+0x80>)
 80055d6:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 80055da:	bf28      	it	cs
 80055dc:	4633      	movcs	r3, r6
 80055de:	e7d2      	b.n	8005586 <PI_Controller+0x26>
 80055e0:	80000001 	.word	0x80000001

080055e4 <PQD_CalcElMotorPower>:
  */
void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  Curr_Components Iqd = pHandle->pFOCVars->Iqd;
 80055e4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
  Volt_Components Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.qI_Component1 * ( int32_t )Vqd.qV_Component1 ) +
         ( ( int32_t )Iqd.qI_Component2 * ( int32_t )Vqd.qV_Component2 );
 80055e8:	8b11      	ldrh	r1, [r2, #24]
 80055ea:	89d3      	ldrh	r3, [r2, #14]
{
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4606      	mov	r6, r0
  wAux = ( ( int32_t )Iqd.qI_Component1 * ( int32_t )Vqd.qV_Component1 ) +
 80055f0:	8995      	ldrh	r5, [r2, #12]
 80055f2:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80055f4:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80055f8:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
         ( ( int32_t )Iqd.qI_Component2 * ( int32_t )Vqd.qV_Component2 );
 80055fc:	fb13 f301 	smulbb	r3, r3, r1
  wAux = ( ( int32_t )Iqd.qI_Component1 * ( int32_t )Vqd.qV_Component1 ) +
 8005600:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005604:	f7ff fc14 	bl	8004e30 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8005608:	2d00      	cmp	r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800560a:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800560c:	490f      	ldr	r1, [pc, #60]	; (800564c <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800560e:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8005612:	bfb8      	it	lt
 8005614:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005618:	fb83 2300 	smull	r2, r3, r3, r0
  wAux /= 65536;
 800561c:	bfb8      	it	lt
 800561e:	35ff      	addlt	r5, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005620:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8005622:	142d      	asrs	r5, r5, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005624:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8005628:	fb03 f305 	mul.w	r3, r3, r5
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800562c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005630:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8005632:	fb81 2103 	smull	r2, r1, r1, r3
 8005636:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005638:	4630      	mov	r0, r6
 800563a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 800563e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005642:	f7ff bef9 	b.w	8005438 <MPM_CalcElMotorPower>
 8005646:	bf00      	nop
 8005648:	1b4e81b5 	.word	0x1b4e81b5
 800564c:	66666667 	.word	0x66666667

08005650 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005650:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <startTimers+0x60>)
 8005652:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005654:	07d2      	lsls	r2, r2, #31
 8005656:	d514      	bpl.n	8005682 <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800565c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005664:	f041 0120 	orr.w	r1, r1, #32
 8005668:	6059      	str	r1, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800566a:	6959      	ldr	r1, [r3, #20]
 800566c:	f041 0101 	orr.w	r1, r1, #1
 8005670:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005678:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8005680:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800568a:	69da      	ldr	r2, [r3, #28]
{
 800568c:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800568e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005692:	f002 0201 	and.w	r2, r2, #1
 8005696:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005698:	9a01      	ldr	r2, [sp, #4]
 800569a:	694a      	ldr	r2, [r1, #20]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	61da      	str	r2, [r3, #28]
}
 80056aa:	b002      	add	sp, #8
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000

080056b4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in Curr_Components format.
*/
void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, Curr_Components * pStator_Currents )
{
  pHandle->pFctGetPhaseCurrents( pHandle, pStator_Currents );
 80056b4:	6843      	ldr	r3, [r0, #4]
 80056b6:	4718      	bx	r3

080056b8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, Volt_Components Valfa_beta )
{
 80056b8:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;
  PWMC_SetSampPointSectX_Cb_t pSetADCSamplingPoint;

  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 80056ba:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
 80056be:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 80056c2:	140c      	asrs	r4, r1, #16
{
 80056c4:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 80056c6:	fb06 f404 	mul.w	r4, r6, r4
{
 80056ca:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 80056cc:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
 80056d0:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 80056d2:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
 80056d4:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 80056d8:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 80056da:	4421      	add	r1, r4
 80056dc:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 80056e0:	eb03 72d3 	add.w	r2, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 80056e4:	106d      	asrs	r5, r5, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 80056e6:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 80056ea:	d44f      	bmi.n	800578c <PWMC_SetPhaseVoltage+0xd4>
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect3;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	f2c0 808c 	blt.w	800580a <PWMC_SetPhaseVoltage+0x152>
    {
      pHandle->hSector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80056f2:	1aad      	subs	r5, r5, r2
 80056f4:	bf44      	itt	mi
 80056f6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80056fa:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfbc      	itt	lt
 8005702:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8005706:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800570a:	2900      	cmp	r1, #0
      pHandle->hSector = SECTOR_2;
 800570c:	f04f 0401 	mov.w	r4, #1
      wTimePhC = wTimePhA - wY / 131072;
 8005710:	bfb8      	it	lt
 8005712:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005716:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800571a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      pHandle->hSector = SECTOR_2;
 800571e:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
      wTimePhC = wTimePhA - wY / 131072;
 8005722:	bfb8      	it	lt
 8005724:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect2;
 8005728:	69c4      	ldr	r4, [r0, #28]
      wTimePhB = wTimePhA + wZ / 131072;
 800572a:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800572e:	eba2 41a1 	sub.w	r1, r2, r1, asr #18

  pHandle->hCntPhA = ( uint16_t )wTimePhA;
  pHandle->hCntPhB = ( uint16_t )wTimePhB;
  pHandle->hCntPhC = ( uint16_t )wTimePhC;

  if ( pHandle->DTTest == 1u )
 8005732:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
  pHandle->hCntPhA = ( uint16_t )wTimePhA;
 8005736:	b292      	uxth	r2, r2
  pHandle->hCntPhB = ( uint16_t )wTimePhB;
 8005738:	b29b      	uxth	r3, r3
  pHandle->hCntPhC = ( uint16_t )wTimePhC;
 800573a:	b289      	uxth	r1, r1
  if ( pHandle->DTTest == 1u )
 800573c:	2d01      	cmp	r5, #1
  pHandle->hCntPhA = ( uint16_t )wTimePhA;
 800573e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  pHandle->hCntPhB = ( uint16_t )wTimePhB;
 8005742:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  pHandle->hCntPhC = ( uint16_t )wTimePhC;
 8005746:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
  if ( pHandle->DTTest == 1u )
 800574a:	d11b      	bne.n	8005784 <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->hIa > 0 )
 800574c:	f9b0 5056 	ldrsh.w	r5, [r0, #86]	; 0x56
    else
    {
      pHandle->hCntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->hIb > 0 )
 8005750:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
    if ( pHandle->hIa > 0 )
 8005754:	2d00      	cmp	r5, #0
      pHandle->hCntPhA += pHandle->DTCompCnt;
 8005756:	f8b0 505e 	ldrh.w	r5, [r0, #94]	; 0x5e
 800575a:	bfcc      	ite	gt
 800575c:	1952      	addgt	r2, r2, r5
      pHandle->hCntPhA -= pHandle->DTCompCnt;
 800575e:	1b52      	suble	r2, r2, r5
 8005760:	b292      	uxth	r2, r2
 8005762:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    else
    {
      pHandle->hCntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->hIc > 0 )
 8005766:	f9b0 205a 	ldrsh.w	r2, [r0, #90]	; 0x5a
    if ( pHandle->hIb > 0 )
 800576a:	2e00      	cmp	r6, #0
      pHandle->hCntPhB += pHandle->DTCompCnt;
 800576c:	bfcc      	ite	gt
 800576e:	195b      	addgt	r3, r3, r5
      pHandle->hCntPhB -= pHandle->DTCompCnt;
 8005770:	1b5b      	suble	r3, r3, r5
    if ( pHandle->hIc > 0 )
 8005772:	2a00      	cmp	r2, #0
      pHandle->hCntPhB -= pHandle->DTCompCnt;
 8005774:	b29b      	uxth	r3, r3
    {
      pHandle->hCntPhC += pHandle->DTCompCnt;
 8005776:	bfcc      	ite	gt
 8005778:	1949      	addgt	r1, r1, r5
    }
    else
    {
      pHandle->hCntPhC -= pHandle->DTCompCnt;
 800577a:	1b49      	suble	r1, r1, r5
 800577c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 8005780:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    }
  }

  return ( pSetADCSamplingPoint( pHandle ) );
 8005784:	4623      	mov	r3, r4
}
 8005786:	b003      	add	sp, #12
 8005788:	bc70      	pop	{r4, r5, r6}
  return ( pSetADCSamplingPoint( pHandle ) );
 800578a:	4718      	bx	r3
    if ( wZ < 0 )
 800578c:	2a00      	cmp	r2, #0
 800578e:	db1b      	blt.n	80057c8 <PWMC_SetPhaseVoltage+0x110>
      if ( wX <= 0 )
 8005790:	2c00      	cmp	r4, #0
 8005792:	dd59      	ble.n	8005848 <PWMC_SetPhaseVoltage+0x190>
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005794:	1b2d      	subs	r5, r5, r4
 8005796:	bf44      	itt	mi
 8005798:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800579c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80057a0:	2900      	cmp	r1, #0
 80057a2:	bfb8      	it	lt
 80057a4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80057a8:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80057ac:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80057b0:	bfb8      	it	lt
 80057b2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->hSector = SECTOR_3;
 80057b6:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 80057b8:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->hSector = SECTOR_3;
 80057bc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        wTimePhB = wTimePhC + wX / 131072;
 80057c0:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect3;
 80057c4:	6a04      	ldr	r4, [r0, #32]
 80057c6:	e7b4      	b.n	8005732 <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80057c8:	1aad      	subs	r5, r5, r2
 80057ca:	bf44      	itt	mi
 80057cc:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80057d0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfbc      	itt	lt
 80057d8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80057dc:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80057e0:	2900      	cmp	r1, #0
 80057e2:	bfb8      	it	lt
 80057e4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80057e8:	ea4f 0296 	mov.w	r2, r6, lsr #2
      pHandle->hSector = SECTOR_5;
 80057ec:	f04f 0404 	mov.w	r4, #4
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80057f0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80057f4:	bfb8      	it	lt
 80057f6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->hSector = SECTOR_5;
 80057fa:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
      wTimePhB = wTimePhA + wZ / 131072;
 80057fe:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005802:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect5;
 8005806:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005808:	e793      	b.n	8005732 <PWMC_SetPhaseVoltage+0x7a>
      if ( wX <= 0 )
 800580a:	2c00      	cmp	r4, #0
 800580c:	dd3d      	ble.n	800588a <PWMC_SetPhaseVoltage+0x1d2>
        wTimePhB = wTimePhA + wZ / 131072;
 800580e:	2b00      	cmp	r3, #0
 8005810:	bfb8      	it	lt
 8005812:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->hSector = SECTOR_1;
 8005816:	f04f 0100 	mov.w	r1, #0
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800581a:	eba4 0502 	sub.w	r5, r4, r2
        wTimePhB = wTimePhA + wZ / 131072;
 800581e:	bfb8      	it	lt
 8005820:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005824:	08b2      	lsrs	r2, r6, #2
        pHandle->hSector = SECTOR_1;
 8005826:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        wTimePhC = wTimePhB - wX / 131072;
 800582a:	1e21      	subs	r1, r4, #0
 800582c:	bfb8      	it	lt
 800582e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005832:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhA + wZ / 131072;
 8005836:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800583a:	bfb8      	it	lt
 800583c:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect1;
 8005840:	6984      	ldr	r4, [r0, #24]
        wTimePhC = wTimePhB - wX / 131072;
 8005842:	eba3 4161 	sub.w	r1, r3, r1, asr #17
 8005846:	e774      	b.n	8005732 <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005848:	1aa5      	subs	r5, r4, r2
 800584a:	bf44      	itt	mi
 800584c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005850:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005854:	2b00      	cmp	r3, #0
 8005856:	bfb8      	it	lt
 8005858:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->hSector = SECTOR_4;
 800585c:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8005860:	bfb8      	it	lt
 8005862:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->hSector = SECTOR_4;
 8005866:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800586a:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 800586c:	1e21      	subs	r1, r4, #0
 800586e:	bfb8      	it	lt
 8005870:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005874:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhA + wZ / 131072;
 8005878:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800587c:	bfb8      	it	lt
 800587e:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005882:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect4;
 8005886:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005888:	e753      	b.n	8005732 <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 800588a:	2900      	cmp	r1, #0
 800588c:	bfb8      	it	lt
 800588e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->hSector = SECTOR_6;
 8005892:	f04f 0305 	mov.w	r3, #5
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005896:	eba5 0504 	sub.w	r5, r5, r4
        wTimePhC = wTimePhA - wY / 131072;
 800589a:	bfb8      	it	lt
 800589c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80058a0:	08b2      	lsrs	r2, r6, #2
        pHandle->hSector = SECTOR_6;
 80058a2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        wTimePhB = wTimePhC + wX / 131072;
 80058a6:	1e23      	subs	r3, r4, #0
 80058a8:	bfb8      	it	lt
 80058aa:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80058ae:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80058b2:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80058b6:	bfb8      	it	lt
 80058b8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80058bc:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect6;
 80058c0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80058c2:	e736      	b.n	8005732 <PWMC_SetPhaseVoltage+0x7a>

080058c4 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80058c4:	6883      	ldr	r3, [r0, #8]
 80058c6:	4718      	bx	r3

080058c8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4604      	mov	r4, r0
 80058cc:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80058ce:	b199      	cbz	r1, 80058f8 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80058d0:	2901      	cmp	r1, #1
 80058d2:	d002      	beq.n	80058da <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80058d4:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80058d6:	b002      	add	sp, #8
 80058d8:	bd10      	pop	{r4, pc}
    if ( pHandle->hOffCalibrWaitTimeCounter > 0u )
 80058da:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80058de:	b1c3      	cbz	r3, 8005912 <PWMC_CurrentReadingCalibr+0x4a>
      pHandle->hOffCalibrWaitTimeCounter--;
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      if ( pHandle->hOffCalibrWaitTimeCounter == 0u )
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f3      	bne.n	80058d4 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80058ec:	6903      	ldr	r3, [r0, #16]
 80058ee:	9101      	str	r1, [sp, #4]
 80058f0:	4798      	blx	r3
        retVal = true;
 80058f2:	9901      	ldr	r1, [sp, #4]
 80058f4:	4608      	mov	r0, r1
 80058f6:	e7ee      	b.n	80058d6 <PWMC_CurrentReadingCalibr+0xe>
  pHandle->pFctSwitchOffPwm( pHandle );
 80058f8:	6883      	ldr	r3, [r0, #8]
 80058fa:	4798      	blx	r3
    pHandle->hOffCalibrWaitTimeCounter = pHandle->hOffCalibrWaitTicks;
 80058fc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005900:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    if ( pHandle->hOffCalibrWaitTicks == 0u )
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005908:	4620      	mov	r0, r4
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	4798      	blx	r3
      retVal = true;
 800590e:	2001      	movs	r0, #1
 8005910:	e7e1      	b.n	80058d6 <PWMC_CurrentReadingCalibr+0xe>
      retVal = true;
 8005912:	4608      	mov	r0, r1
}
 8005914:	b002      	add	sp, #8
 8005916:	bd10      	pop	{r4, pc}

08005918 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005918:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800591a:	4718      	bx	r3

0800591c <R3_1_F30X_GetPhaseCurrents>:
  uint16_t hReg1;
  uint16_t hReg2;
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;

  /* Clear the flag to indicate the start of FOC algorithm*/
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800591c:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
{
 8005920:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 8005922:	68da      	ldr	r2, [r3, #12]

  hReg1 = ( uint16_t )( pHandle->pParams_str->ADCx->JDR1 );
  hReg2 = ( uint16_t )( pHandle->pParams_str->ADCx->JDR2 );

  bSector = ( uint8_t )( pHandle->_Super.hSector );
 8005924:	f890 5046 	ldrb.w	r5, [r0, #70]	; 0x46
  hReg1 = ( uint16_t )( pHandle->pParams_str->ADCx->JDR1 );
 8005928:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800592a:	f06f 0401 	mvn.w	r4, #1
 800592e:	6114      	str	r4, [r2, #16]
 8005930:	2d05      	cmp	r5, #5
 8005932:	f8d3 c080 	ldr.w	ip, [r3, #128]	; 0x80
  hReg2 = ( uint16_t )( pHandle->pParams_str->ADCx->JDR2 );
 8005936:	f8d3 e084 	ldr.w	lr, [r3, #132]	; 0x84
 800593a:	d85c      	bhi.n	80059f6 <R3_1_F30X_GetPhaseCurrents+0xda>
 800593c:	2301      	movs	r3, #1
 800593e:	40ab      	lsls	r3, r5
 8005940:	f013 0f21 	tst.w	r3, #33	; 0x21
 8005944:	d12c      	bne.n	80059a0 <R3_1_F30X_GetPhaseCurrents+0x84>
 8005946:	f013 0f06 	tst.w	r3, #6
 800594a:	d063      	beq.n	8005a14 <R3_1_F30X_GetPhaseCurrents+0xf8>
    case SECTOR_3:
    {
      /* Current on Phase B is not accessible     */

      /* Ia = PhaseAOffset - ADC converted value) */
      if ( bSector == SECTOR_3 )
 800594c:	2d02      	cmp	r5, #2
      {
        wAux = ( int32_t )( pHandle->wPhaseAOffset ) - ( int32_t )( hReg2 );
 800594e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8005950:	bf0c      	ite	eq
 8005952:	fa1f f38e 	uxtheq.w	r3, lr
      }
      else
      {
        wAux = ( int32_t )( pHandle->wPhaseAOffset ) - ( int32_t )( hReg1 );
 8005956:	fa1f f38c 	uxthne.w	r3, ip
 800595a:	1ae2      	subs	r2, r4, r3
      }

      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800595c:	4b62      	ldr	r3, [pc, #392]	; (8005ae8 <R3_1_F30X_GetPhaseCurrents+0x1cc>)
 800595e:	429a      	cmp	r2, r3
 8005960:	f280 809a 	bge.w	8005a98 <R3_1_F30X_GetPhaseCurrents+0x17c>
 8005964:	461a      	mov	r2, r3
      {
        pStator_Currents->qI_Component1 = -INT16_MAX;
 8005966:	800b      	strh	r3, [r1, #0]
 8005968:	461e      	mov	r6, r3
 800596a:	f248 0301 	movw	r3, #32769	; 0x8001
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      if ( bSector == SECTOR_3 )
 800596e:	2d02      	cmp	r5, #2
      {
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg1 );
 8005970:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8005972:	bf0b      	itete	eq
 8005974:	fa1f fc8c 	uxtheq.w	ip, ip
      }
      else
      {
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg2 );
 8005978:	fa1f fe8e 	uxthne.w	lr, lr
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg1 );
 800597c:	eba4 040c 	subeq.w	r4, r4, ip
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg2 );
 8005980:	eba4 040e 	subne.w	r4, r4, lr
      }

      wAux = -wAux -  ( int32_t )pStator_Currents->qI_Component1;
 8005984:	4264      	negs	r4, r4
 8005986:	1aa4      	subs	r4, r4, r2

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 8005988:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800598c:	f280 808d 	bge.w	8005aaa <R3_1_F30X_GetPhaseCurrents+0x18e>
      {
        pStator_Currents->qI_Component2 = INT16_MAX;
      }
      else  if ( wAux < -INT16_MAX )
 8005990:	4f55      	ldr	r7, [pc, #340]	; (8005ae8 <R3_1_F30X_GetPhaseCurrents+0x1cc>)
 8005992:	42bc      	cmp	r4, r7
 8005994:	f2c0 8095 	blt.w	8005ac2 <R3_1_F30X_GetPhaseCurrents+0x1a6>
      {
        pStator_Currents->qI_Component2 = -INT16_MAX;
      }
      else
      {
        pStator_Currents->qI_Component2 = ( int16_t )wAux;
 8005998:	b227      	sxth	r7, r4
 800599a:	804f      	strh	r7, [r1, #2]
 800599c:	b2a4      	uxth	r4, r4
 800599e:	e030      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
      if ( bSector == SECTOR_6 )
 80059a0:	2d05      	cmp	r5, #5
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg2 );
 80059a2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80059a4:	bf0c      	ite	eq
 80059a6:	fa1f f38e 	uxtheq.w	r3, lr
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg1 );
 80059aa:	fa1f f38c 	uxthne.w	r3, ip
 80059ae:	1ad3      	subs	r3, r2, r3
      if ( wAux < -INT16_MAX )
 80059b0:	4a4d      	ldr	r2, [pc, #308]	; (8005ae8 <R3_1_F30X_GetPhaseCurrents+0x1cc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	db5c      	blt.n	8005a70 <R3_1_F30X_GetPhaseCurrents+0x154>
      else  if ( wAux > INT16_MAX )
 80059b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ba:	db69      	blt.n	8005a90 <R3_1_F30X_GetPhaseCurrents+0x174>
        pStator_Currents->qI_Component2 = INT16_MAX;
 80059bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80059c0:	4613      	mov	r3, r2
 80059c2:	804a      	strh	r2, [r1, #2]
 80059c4:	4614      	mov	r4, r2
 80059c6:	4617      	mov	r7, r2
      if ( bSector == SECTOR_6 )
 80059c8:	2d05      	cmp	r5, #5
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg1 );
 80059ca:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80059cc:	bf0b      	itete	eq
 80059ce:	fa1f fc8c 	uxtheq.w	ip, ip
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg2 );
 80059d2:	fa1f fe8e 	uxthne.w	lr, lr
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg1 );
 80059d6:	eba2 020c 	subeq.w	r2, r2, ip
        wAux = ( int32_t )( pHandle->wPhaseCOffset ) - ( int32_t )( hReg2 );
 80059da:	eba2 020e 	subne.w	r2, r2, lr
      wAux = -wAux - ( int32_t )pStator_Currents->qI_Component2;
 80059de:	4252      	negs	r2, r2
 80059e0:	1ad2      	subs	r2, r2, r3
      if ( wAux > INT16_MAX )
 80059e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80059e6:	da49      	bge.n	8005a7c <R3_1_F30X_GetPhaseCurrents+0x160>
      else  if ( wAux < -INT16_MAX )
 80059e8:	4e3f      	ldr	r6, [pc, #252]	; (8005ae8 <R3_1_F30X_GetPhaseCurrents+0x1cc>)
 80059ea:	42b2      	cmp	r2, r6
 80059ec:	da4c      	bge.n	8005a88 <R3_1_F30X_GetPhaseCurrents+0x16c>
        pStator_Currents->qI_Component1 = -INT16_MAX;
 80059ee:	800e      	strh	r6, [r1, #0]
 80059f0:	f248 0301 	movw	r3, #32769	; 0x8001
 80059f4:	e005      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
 80059f6:	f9b1 6000 	ldrsh.w	r6, [r1]
 80059fa:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 80059fe:	b2b3      	uxth	r3, r6
 8005a00:	b2bc      	uxth	r4, r7
    }
    break;
  }
  pHandle->_Super.hIa = pStator_Currents->qI_Component1;
  pHandle->_Super.hIb = pStator_Currents->qI_Component2;
  pHandle->_Super.hIc = -pStator_Currents->qI_Component1 - pStator_Currents->qI_Component2;
 8005a02:	4423      	add	r3, r4
 8005a04:	425b      	negs	r3, r3
 8005a06:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  pHandle->_Super.hIa = pStator_Currents->qI_Component1;
 8005a0a:	f8a0 6056 	strh.w	r6, [r0, #86]	; 0x56
  pHandle->_Super.hIb = pStator_Currents->qI_Component2;
 8005a0e:	f8a0 7058 	strh.w	r7, [r0, #88]	; 0x58
 8005a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a14:	f013 0f18 	tst.w	r3, #24
 8005a18:	d0ed      	beq.n	80059f6 <R3_1_F30X_GetPhaseCurrents+0xda>
      if ( bSector == SECTOR_4 )
 8005a1a:	2d03      	cmp	r5, #3
        wAux = ( int32_t )( pHandle->wPhaseAOffset ) - ( int32_t )( hReg2 );
 8005a1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005a1e:	bf0c      	ite	eq
 8005a20:	fa1f f28e 	uxtheq.w	r2, lr
        wAux = ( int32_t )( pHandle->wPhaseAOffset ) - ( int32_t )( hReg1 );
 8005a24:	fa1f f28c 	uxthne.w	r2, ip
 8005a28:	1a9b      	subs	r3, r3, r2
      if ( wAux < -INT16_MAX )
 8005a2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <R3_1_F30X_GetPhaseCurrents+0x1cc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	db46      	blt.n	8005abe <R3_1_F30X_GetPhaseCurrents+0x1a2>
      else  if ( wAux > INT16_MAX )
 8005a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        pStator_Currents->qI_Component1 = INT16_MAX;
 8005a34:	bfa8      	it	ge
 8005a36:	f647 73ff 	movwge	r3, #32767	; 0x7fff
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
 8005a3a:	800b      	strh	r3, [r1, #0]
      if ( bSector == SECTOR_4 )
 8005a3c:	2d03      	cmp	r5, #3
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg1 );
 8005a3e:	6f04      	ldr	r4, [r0, #112]	; 0x70
      if ( wAux < -INT16_MAX )
 8005a40:	4f29      	ldr	r7, [pc, #164]	; (8005ae8 <R3_1_F30X_GetPhaseCurrents+0x1cc>)
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg1 );
 8005a42:	bf0b      	itete	eq
 8005a44:	fa1f fc8c 	uxtheq.w	ip, ip
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg2 );
 8005a48:	fa1f fe8e 	uxthne.w	lr, lr
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg1 );
 8005a4c:	eba4 040c 	subeq.w	r4, r4, ip
        wAux = ( int32_t )( pHandle->wPhaseBOffset ) - ( int32_t )( hReg2 );
 8005a50:	eba4 040e 	subne.w	r4, r4, lr
      if ( wAux < -INT16_MAX )
 8005a54:	42bc      	cmp	r4, r7
 8005a56:	db38      	blt.n	8005aca <R3_1_F30X_GetPhaseCurrents+0x1ae>
      else  if ( wAux > INT16_MAX )
 8005a58:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005a5c:	db3c      	blt.n	8005ad8 <R3_1_F30X_GetPhaseCurrents+0x1bc>
 8005a5e:	f9b1 6000 	ldrsh.w	r6, [r1]
        pStator_Currents->qI_Component2 = INT16_MAX;
 8005a62:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005a66:	804b      	strh	r3, [r1, #2]
 8005a68:	461c      	mov	r4, r3
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	b2b3      	uxth	r3, r6
 8005a6e:	e7c8      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
 8005a70:	4613      	mov	r3, r2
        pStator_Currents->qI_Component2 = -INT16_MAX;
 8005a72:	804a      	strh	r2, [r1, #2]
 8005a74:	4617      	mov	r7, r2
 8005a76:	f248 0401 	movw	r4, #32769	; 0x8001
 8005a7a:	e7a5      	b.n	80059c8 <R3_1_F30X_GetPhaseCurrents+0xac>
        pStator_Currents->qI_Component1 = INT16_MAX;
 8005a7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005a80:	4613      	mov	r3, r2
 8005a82:	800a      	strh	r2, [r1, #0]
 8005a84:	4616      	mov	r6, r2
 8005a86:	e7bc      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
 8005a88:	b216      	sxth	r6, r2
 8005a8a:	800e      	strh	r6, [r1, #0]
 8005a8c:	b293      	uxth	r3, r2
 8005a8e:	e7b8      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
        pStator_Currents->qI_Component2 = ( int16_t )wAux;
 8005a90:	b21f      	sxth	r7, r3
 8005a92:	804f      	strh	r7, [r1, #2]
 8005a94:	b29c      	uxth	r4, r3
 8005a96:	e797      	b.n	80059c8 <R3_1_F30X_GetPhaseCurrents+0xac>
      else  if ( wAux > INT16_MAX )
 8005a98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005a9c:	db0b      	blt.n	8005ab6 <R3_1_F30X_GetPhaseCurrents+0x19a>
        pStator_Currents->qI_Component1 = INT16_MAX;
 8005a9e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	800b      	strh	r3, [r1, #0]
 8005aa6:	461e      	mov	r6, r3
 8005aa8:	e761      	b.n	800596e <R3_1_F30X_GetPhaseCurrents+0x52>
        pStator_Currents->qI_Component2 = INT16_MAX;
 8005aaa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005aae:	4614      	mov	r4, r2
 8005ab0:	804a      	strh	r2, [r1, #2]
 8005ab2:	4617      	mov	r7, r2
 8005ab4:	e7a5      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
 8005ab6:	b216      	sxth	r6, r2
 8005ab8:	800e      	strh	r6, [r1, #0]
 8005aba:	b293      	uxth	r3, r2
 8005abc:	e757      	b.n	800596e <R3_1_F30X_GetPhaseCurrents+0x52>
        pStator_Currents->qI_Component1 = -INT16_MAX;
 8005abe:	800a      	strh	r2, [r1, #0]
 8005ac0:	e7bc      	b.n	8005a3c <R3_1_F30X_GetPhaseCurrents+0x120>
        pStator_Currents->qI_Component2 = -INT16_MAX;
 8005ac2:	804f      	strh	r7, [r1, #2]
 8005ac4:	f248 0401 	movw	r4, #32769	; 0x8001
 8005ac8:	e79b      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
 8005aca:	f9b1 6000 	ldrsh.w	r6, [r1]
        pStator_Currents->qI_Component2 = -INT16_MAX;
 8005ace:	804f      	strh	r7, [r1, #2]
 8005ad0:	b2b3      	uxth	r3, r6
 8005ad2:	f248 0401 	movw	r4, #32769	; 0x8001
 8005ad6:	e794      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
 8005ad8:	f9b1 6000 	ldrsh.w	r6, [r1]
        pStator_Currents->qI_Component2 = ( int16_t )wAux;
 8005adc:	b227      	sxth	r7, r4
 8005ade:	b2b3      	uxth	r3, r6
 8005ae0:	804f      	strh	r7, [r1, #2]
 8005ae2:	b2a4      	uxth	r4, r4
 8005ae4:	e78d      	b.n	8005a02 <R3_1_F30X_GetPhaseCurrents+0xe6>
 8005ae6:	bf00      	nop
 8005ae8:	ffff8001 	.word	0xffff8001

08005aec <R3_1_F30X_HFCurrentsCalibrationAB>:
 */
static void R3_1_F30X_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, Curr_Components * pStator_Currents )
{
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;
  /* Clear the flag to indicate the start of FOC algorithm*/
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 8005aec:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8005af0:	68da      	ldr	r2, [r3, #12]
{
 8005af2:	b470      	push	{r4, r5, r6}
 8005af4:	f06f 0401 	mvn.w	r4, #1
 8005af8:	6114      	str	r4, [r2, #16]

  if ( pHandle->bIndex < NB_CONVERSIONS )
 8005afa:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8005afe:	2a0f      	cmp	r2, #15
 8005b00:	d810      	bhi.n	8005b24 <R3_1_F30X_HFCurrentsCalibrationAB+0x38>
  {
    pHandle->wPhaseAOffset += pHandle->pParams_str->ADCx->JDR1;
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8005b06:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    pHandle->wPhaseBOffset += pHandle->pParams_str->ADCx->JDR2;
 8005b0a:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
    pHandle->bIndex++;
 8005b0e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    pHandle->wPhaseBOffset += pHandle->pParams_str->ADCx->JDR2;
 8005b12:	6f02      	ldr	r2, [r0, #112]	; 0x70
    pHandle->bIndex++;
 8005b14:	3301      	adds	r3, #1
    pHandle->wPhaseAOffset += pHandle->pParams_str->ADCx->JDR1;
 8005b16:	4434      	add	r4, r6
    pHandle->wPhaseBOffset += pHandle->pParams_str->ADCx->JDR2;
 8005b18:	442a      	add	r2, r5
    pHandle->bIndex++;
 8005b1a:	b2db      	uxtb	r3, r3
    pHandle->wPhaseAOffset += pHandle->pParams_str->ADCx->JDR1;
 8005b1c:	66c4      	str	r4, [r0, #108]	; 0x6c
    pHandle->wPhaseBOffset += pHandle->pParams_str->ADCx->JDR2;
 8005b1e:	6702      	str	r2, [r0, #112]	; 0x70
    pHandle->bIndex++;
 8005b20:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->qI_Component1 = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	600b      	str	r3, [r1, #0]
  pStator_Currents->qI_Component2 = 0;
}
 8005b28:	bc70      	pop	{r4, r5, r6}
 8005b2a:	4770      	bx	lr

08005b2c <R3_1_F30X_HFCurrentsCalibrationC>:
 */
static void R3_1_F30X_HFCurrentsCalibrationC( PWMC_Handle_t * pHdl, Curr_Components * pStator_Currents )
{
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;
  /* Clear the flag to indicate the start of FOC algorithm*/
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 8005b2c:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8005b30:	68da      	ldr	r2, [r3, #12]
{
 8005b32:	b410      	push	{r4}
 8005b34:	f06f 0401 	mvn.w	r4, #1
 8005b38:	6114      	str	r4, [r2, #16]

  if ( pHandle->bIndex < NB_CONVERSIONS )
 8005b3a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8005b3e:	2a0f      	cmp	r2, #15
 8005b40:	d80b      	bhi.n	8005b5a <R3_1_F30X_HFCurrentsCalibrationC+0x2e>
  {
    pHandle-> wPhaseCOffset += pHandle->pParams_str->ADCx->JDR1;
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8005b46:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    pHandle->bIndex++;
 8005b4a:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8005b4e:	3301      	adds	r3, #1
    pHandle-> wPhaseCOffset += pHandle->pParams_str->ADCx->JDR1;
 8005b50:	4422      	add	r2, r4
    pHandle->bIndex++;
 8005b52:	b2db      	uxtb	r3, r3
    pHandle-> wPhaseCOffset += pHandle->pParams_str->ADCx->JDR1;
 8005b54:	6742      	str	r2, [r0, #116]	; 0x74
    pHandle->bIndex++;
 8005b56:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->qI_Component1 = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	600b      	str	r3, [r1, #0]
  pStator_Currents->qI_Component2 = 0;
}
 8005b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <R3_1_F30X_TurnOnLowSides>:
 * @retval none
 */
void R3_1_F30X_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b64:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0

  pHandle->_Super.bTurnOnLowSidesAction = true;
 8005b68:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b6a:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.bTurnOnLowSidesAction = true;
 8005b6c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /*Turn on the three low side switches */
  TIMx->CCR1 = 0u;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f06f 0001 	mvn.w	r0, #1
 8005b76:	6110      	str	r0, [r2, #16]
 8005b78:	6353      	str	r3, [r2, #52]	; 0x34
  TIMx->CCR2 = 0u;
 8005b7a:	6393      	str	r3, [r2, #56]	; 0x38
  TIMx->CCR3 = 0u;
 8005b7c:	63d3      	str	r3, [r2, #60]	; 0x3c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005b7e:	6913      	ldr	r3, [r2, #16]

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005b80:	07db      	lsls	r3, r3, #31
 8005b82:	d5fc      	bpl.n	8005b7e <R3_1_F30X_TurnOnLowSides+0x1a>
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005b84:	6c53      	ldr	r3, [r2, #68]	; 0x44

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005b86:	7c08      	ldrb	r0, [r1, #16]
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005b8c:	2802      	cmp	r0, #2
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005b8e:	6453      	str	r3, [r2, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005b90:	d10a      	bne.n	8005ba8 <R3_1_F30X_TurnOnLowSides+0x44>
{
 8005b92:	b470      	push	{r4, r5, r6}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005b94:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005b96:	694d      	ldr	r5, [r1, #20]
 8005b98:	8b0e      	ldrh	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005b9a:	8c0c      	ldrh	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005b9c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005b9e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005ba0:	61ae      	str	r6, [r5, #24]
 8005ba2:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8005ba4:	bc70      	pop	{r4, r5, r6}
 8005ba6:	619a      	str	r2, [r3, #24]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop

08005bac <R3_1_F30X_SwitchOnPWM>:
 * @param pHdl handler of the current instance of the PWM component
 */
void R3_1_F30X_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005bac:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0

  pHandle->_Super.bTurnOnLowSidesAction = false;
 8005bb0:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005bb2:	68cb      	ldr	r3, [r1, #12]
{
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.bTurnOnLowSidesAction = false;
 8005bb6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005bba:	f06f 0201 	mvn.w	r2, #1
 8005bbe:	611a      	str	r2, [r3, #16]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005bc0:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005bc2:	07d4      	lsls	r4, r2, #31
 8005bc4:	d5fc      	bpl.n	8005bc0 <R3_1_F30X_SwitchOnPWM+0x14>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Set all duty to 50% */
  if ( pHandle->_Super.RLDetectionMode == true )
 8005bc6:	f890 2055 	ldrb.w	r2, [r0, #85]	; 0x55
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005bca:	f06f 0401 	mvn.w	r4, #1
 8005bce:	611c      	str	r4, [r3, #16]
 8005bd0:	b1e2      	cbz	r2, 8005c0c <R3_1_F30X_SwitchOnPWM+0x60>
 8005bd2:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
  {
    TIMx->CCR1 = 1u;
    pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005bd6:	680c      	ldr	r4, [r1, #0]
 8005bd8:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
    TIMx->CCR1 = 1u;
 8005bda:	2001      	movs	r0, #1
 8005bdc:	6358      	str	r0, [r3, #52]	; 0x34
 8005bde:	fa22 f000 	lsr.w	r0, r2, r0
    pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005be2:	64e5      	str	r5, [r4, #76]	; 0x4c
  {
    TIMx->CCR1 = ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1;
  }
  TIMx->CCR2 = ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1;
  TIMx->CCR3 = ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1;
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 5u;
 8005be4:	3a05      	subs	r2, #5
  TIMx->CCR2 = ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1;
 8005be6:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCR3 = ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1;
 8005be8:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 5u;
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005bec:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005bee:	07d2      	lsls	r2, r2, #31
 8005bf0:	d5fc      	bpl.n	8005bec <R3_1_F30X_SwitchOnPWM+0x40>
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  TIMx->BDTR |= TIM_BDTR_MOE;

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005bf4:	7c08      	ldrb	r0, [r1, #16]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005bf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bfa:	645a      	str	r2, [r3, #68]	; 0x44
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005bfe:	2802      	cmp	r0, #2
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c04:	645a      	str	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005c06:	d008      	beq.n	8005c1a <R3_1_F30X_SwitchOnPWM+0x6e>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
    }
  }
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005c08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIMx->CCR1 = ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1;
 8005c0c:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 8005c10:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8005c12:	680c      	ldr	r4, [r1, #0]
 8005c14:	0850      	lsrs	r0, r2, #1
 8005c16:	6358      	str	r0, [r3, #52]	; 0x34
 8005c18:	e7e4      	b.n	8005be4 <R3_1_F30X_SwitchOnPWM+0x38>
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005c1c:	694f      	ldr	r7, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005c1e:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005c20:	f8b1 e018 	ldrh.w	lr, [r1, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005c24:	8c0e      	ldrh	r6, [r1, #32]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005c26:	f240 5355 	movw	r3, #1365	; 0x555
 8005c2a:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005c2c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005c2e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005c30:	d105      	bne.n	8005c3e <R3_1_F30X_SwitchOnPWM+0x92>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8005c32:	f8c7 e028 	str.w	lr, [r7, #40]	; 0x28
 8005c36:	6286      	str	r6, [r0, #40]	; 0x28
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005c3a:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005c3e:	f8c7 e018 	str.w	lr, [r7, #24]
 8005c42:	6186      	str	r6, [r0, #24]
 8005c44:	619a      	str	r2, [r3, #24]
 8005c46:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4a:	bf00      	nop

08005c4c <R3_1_F30X_SwitchOffPWM>:
/**
 * @brief  Disables PWM generation on the proper Timer peripheral acting on  MOE bit
 * @param pHdl handler of the current instance of the PWM component
 */
void R3_1_F30X_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 8005c4c:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;

  pHandle->_Super.bTurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  if ( pHandle->BrakeActionLock == true )
 8005c4e:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c52:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
  pHandle->_Super.bTurnOnLowSidesAction = false;
 8005c56:	2500      	movs	r5, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c58:	68e1      	ldr	r1, [r4, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005c5a:	6823      	ldr	r3, [r4, #0]
  pHandle->_Super.bTurnOnLowSidesAction = false;
 8005c5c:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  if ( pHandle->BrakeActionLock == true )
 8005c60:	b932      	cbnz	r2, 8005c70 <R3_1_F30X_SwitchOffPWM+0x24>
  {
  }
  else
  {
    TIMx->BDTR &= ~( ( uint32_t )( LL_TIM_OSSI_ENABLE ) );
 8005c62:	6c4a      	ldr	r2, [r1, #68]	; 0x44

    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005c64:	7c20      	ldrb	r0, [r4, #16]
    TIMx->BDTR &= ~( ( uint32_t )( LL_TIM_OSSI_ENABLE ) );
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005c6a:	2802      	cmp	r0, #2
    TIMx->BDTR &= ~( ( uint32_t )( LL_TIM_OSSI_ENABLE ) );
 8005c6c:	644a      	str	r2, [r1, #68]	; 0x44
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005c6e:	d06a      	beq.n	8005d46 <R3_1_F30X_SwitchOffPWM+0xfa>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
    }
  }

  TIMx->BDTR &= ( uint32_t )~TIM_BDTR_MOE;
 8005c70:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8005c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c76:	644a      	str	r2, [r1, #68]	; 0x44
  MODIFY_REG(ADCx->CR,
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c7e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005c82:	f042 0220 	orr.w	r2, r2, #32
 8005c86:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART));
 8005c88:	689a      	ldr	r2, [r3, #8]

  /* Stops injected conversions */
  /* This Flushes JSQR queue of context by setting JADSTP = 1 (JQM)=1 */
  LL_ADC_INJ_StopConversion( ADCx );
  /* Wait until JADSTART bit is cleared (Injected conversions stopped) */
  while ( LL_ADC_INJ_IsConversionOngoing( ADCx ) == 1 ) {}
 8005c8a:	0710      	lsls	r0, r2, #28
 8005c8c:	d4fc      	bmi.n	8005c88 <R3_1_F30X_SwitchOffPWM+0x3c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c94:	605a      	str	r2, [r3, #4]
  /* Reconfigures Injected conversions */
  LL_ADC_INJ_ConfigQueueContext( ADCx,
                                 ADC_EXTERNALTRIGINJECTEVENT,
                                 LL_ADC_INJ_TRIG_EXT_RISING,
                                 LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS/*LL_ADC_INJ_SEQ_SCAN_DISABLE*/,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL( pHandle->pParams_str->bIaChannel ),
 8005c96:	7920      	ldrb	r0, [r4, #4]
  LL_ADC_INJ_ConfigQueueContext( ADCx,
 8005c98:	2809      	cmp	r0, #9
 8005c9a:	d846      	bhi.n	8005d2a <R3_1_F30X_SwitchOffPWM+0xde>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL( pHandle->pParams_str->bIaChannel ),
 8005c9c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8005ca0:	0682      	lsls	r2, r0, #26
 8005ca2:	2401      	movs	r4, #1
  LL_ADC_INJ_ConfigQueueContext( ADCx,
 8005ca4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL( pHandle->pParams_str->bIaChannel ),
 8005ca8:	fa04 f000 	lsl.w	r0, r4, r0
  LL_ADC_INJ_ConfigQueueContext( ADCx,
 8005cac:	4302      	orrs	r2, r0
  MODIFY_REG(ADCx->JSQR           ,
 8005cae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005cb0:	4c2a      	ldr	r4, [pc, #168]	; (8005d5c <R3_1_F30X_SwitchOffPWM+0x110>)
 8005cb2:	4020      	ands	r0, r4
 8005cb4:	0995      	lsrs	r5, r2, #6
 8005cb6:	f002 44f8 	and.w	r4, r2, #2080374784	; 0x7c000000
 8005cba:	f040 0041 	orr.w	r0, r0, #65	; 0x41
 8005cbe:	4320      	orrs	r0, r4
 8005cc0:	f005 75f8 	and.w	r5, r5, #32505856	; 0x1f00000
 8005cc4:	0b14      	lsrs	r4, r2, #12
 8005cc6:	f404 24f8 	and.w	r4, r4, #507904	; 0x7c000
 8005cca:	4328      	orrs	r0, r5
 8005ccc:	0c92      	lsrs	r2, r2, #18
 8005cce:	4320      	orrs	r0, r4
 8005cd0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8005cd4:	4302      	orrs	r2, r0
 8005cd6:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(ADCx->CR,
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cde:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005ce8:	69ca      	ldr	r2, [r1, #28]
 8005cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cee:	61ca      	str	r2, [r1, #28]
  /* Starts injected conversions */
  LL_ADC_INJ_StartConversion( ADCx );

  LL_TIM_OC_DisablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
  /* Sets CC4 as PWM mode 2 (default) */
  TIMx->CCMR2 &= CCMR2_CH4_DISABLE;
 8005cf0:	69ca      	ldr	r2, [r1, #28]
 8005cf2:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8005cf6:	4002      	ands	r2, r0
 8005cf8:	61ca      	str	r2, [r1, #28]
  TIMx->CCMR2 |= CCMR2_CH4_PWM2;
 8005cfa:	69ca      	ldr	r2, [r1, #28]
  /* Imposes of a change of state from 1 to 0 logic state. this triggers the injected conversions */
  TIMx->CCR4 = 0xFFFFu;
 8005cfc:	f64f 74ff 	movw	r4, #65535	; 0xffff
  TIMx->CCMR2 |= CCMR2_CH4_PWM2;
 8005d00:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  TIMx->CCR4 = 0x0u;
 8005d04:	2000      	movs	r0, #0
  TIMx->CCMR2 |= CCMR2_CH4_PWM2;
 8005d06:	61ca      	str	r2, [r1, #28]
  TIMx->CCR4 = 0xFFFFu;
 8005d08:	640c      	str	r4, [r1, #64]	; 0x40
  TIMx->CCR4 = 0x0u;
 8005d0a:	6408      	str	r0, [r1, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005d0c:	69ca      	ldr	r2, [r1, #28]
 8005d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d12:	61ca      	str	r2, [r1, #28]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8005d14:	681a      	ldr	r2, [r3, #0]

  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );

  /* Wait for Injected Conversion sequence completion */
  while ( LL_ADC_IsActiveFlag_JEOS( ADCx ) == 0 ) {}
 8005d16:	0652      	lsls	r2, r2, #25
 8005d18:	d5fc      	bpl.n	8005d14 <R3_1_F30X_SwitchOffPWM+0xc8>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	601a      	str	r2, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d24:	605a      	str	r2, [r3, #4]

  /* ADCx Injected conversions end interrupt enabling */
  LL_ADC_EnableIT_JEOS( ADCx );

  return;
}
 8005d26:	bcf0      	pop	{r4, r5, r6, r7}
 8005d28:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL( pHandle->pParams_str->bIaChannel ),
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4082      	lsls	r2, r0
  LL_ADC_INJ_ConfigQueueContext( ADCx,
 8005d2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL( pHandle->pParams_str->bIaChannel ),
 8005d32:	2403      	movs	r4, #3
 8005d34:	f06f 051d 	mvn.w	r5, #29
  LL_ADC_INJ_ConfigQueueContext( ADCx,
 8005d38:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL( pHandle->pParams_str->bIaChannel ),
 8005d3c:	fb14 5000 	smlabb	r0, r4, r0, r5
  LL_ADC_INJ_ConfigQueueContext( ADCx,
 8005d40:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005d44:	e7b3      	b.n	8005cae <R3_1_F30X_SwitchOffPWM+0x62>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005d46:	6960      	ldr	r0, [r4, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005d48:	69e5      	ldr	r5, [r4, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005d4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005d4c:	8b27      	ldrh	r7, [r4, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005d4e:	8c26      	ldrh	r6, [r4, #32]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005d50:	6287      	str	r7, [r0, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005d52:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8005d54:	62ae      	str	r6, [r5, #40]	; 0x28
 8005d56:	6290      	str	r0, [r2, #40]	; 0x28
 8005d58:	e78a      	b.n	8005c70 <R3_1_F30X_SwitchOffPWM+0x24>
 8005d5a:	bf00      	nop
 8005d5c:	82082000 	.word	0x82082000

08005d60 <R3_1_F30X_SetADCSampPointSect6>:
 *         And call the WriteTIMRegisters method.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_F30X_SetADCSampPointSect6( PWMC_Handle_t * pHdl )
{
 8005d60:	b5f0      	push	{r4, r5, r6, r7, lr}

  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle
   * in the sector 6 (i.e phase A duty cycle) */
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005d62:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8005d66:	f8b0 e078 	ldrh.w	lr, [r0, #120]	; 0x78
 8005d6a:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
 8005d6e:	8923      	ldrh	r3, [r4, #8]
{
 8005d70:	4602      	mov	r2, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005d72:	ebae 0005 	sub.w	r0, lr, r5
 8005d76:	b280      	uxth	r0, r0
 8005d78:	4298      	cmp	r0, r3
 8005d7a:	d83d      	bhi.n	8005df8 <R3_1_F30X_SetADCSampPointSect6+0x98>
        the phase with variable complementary duty cycle */

    wADC_JSQR_phase = pHandle->wADC_JSQR_phCB;

    /* Crossing Point Searching */
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhA - pHandle->_Super.hCntPhC );
 8005d7c:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
    wADC_JSQR_phase = pHandle->wADC_JSQR_phCB;
 8005d80:	f8d2 60a4 	ldr.w	r6, [r2, #164]	; 0xa4
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhA - pHandle->_Super.hCntPhC );
 8005d84:	1be9      	subs	r1, r5, r7

    /* Definition of crossing point */
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) * 2u )
 8005d86:	b289      	uxth	r1, r1
 8005d88:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8005d8c:	d82f      	bhi.n	8005dee <R3_1_F30X_SetADCSampPointSect6+0x8e>
      hCntSmp = pHandle->_Super.hCntPhA - pHandle->pParams_str->hTbefore;
    }
    else
    {
      /* hTafter = DT + max(Trise, Tnoise) */
      hCntSmp = pHandle->_Super.hCntPhA + pHandle->pParams_str->hTafter;
 8005d8e:	442b      	add	r3, r5
 8005d90:	b299      	uxth	r1, r3

      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005d92:	458e      	cmp	lr, r1
 8005d94:	d83c      	bhi.n	8005e10 <R3_1_F30X_SetADCSampPointSect6+0xb0>
      {
        /* It must be changed the trigger direction from positive to negative
             to sample after middle of PWM*/
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;

        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005d96:	43c9      	mvns	r1, r1
 8005d98:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8005d9c:	b289      	uxth	r1, r1
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005d9e:	2040      	movs	r0, #64	; 0x40

  /* Set JSQR register */
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;

  /* Set TIMx_CH4 value */
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 8005da0:	68e3      	ldr	r3, [r4, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005da2:	f8d4 e000 	ldr.w	lr, [r4]
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8005da6:	4406      	add	r6, r0
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005da8:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8005dac:	67d6      	str	r6, [r2, #124]	; 0x7c
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 8005dae:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005db0:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005db2:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005db4:	63df      	str	r7, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 8005db6:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005db8:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 8005dba:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 8005dbe:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8005dc2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005dc6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 8005dc8:	641d      	str	r5, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005dca:	69dc      	ldr	r4, [r3, #28]
 8005dcc:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005dd0:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005dd2:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 8005dd4:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 8005dd6:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005dd8:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005ddc:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 8005dde:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8005de0:	bf0a      	itet	eq
 8005de2:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8005de4:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 8005de8:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e

  return R3_1_F30X_WriteTIMRegisters( &pHandle->_Super );
}
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hCntSmp = pHandle->_Super.hCntPhA - pHandle->pParams_str->hTbefore;
 8005dee:	8961      	ldrh	r1, [r4, #10]
 8005df0:	1a69      	subs	r1, r5, r1
 8005df2:	b289      	uxth	r1, r1
  uint32_t adcTrig = 0;
 8005df4:	2000      	movs	r0, #0
 8005df6:	e7d3      	b.n	8005da0 <R3_1_F30X_SetADCSampPointSect6+0x40>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005df8:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.hSector = SECTOR_5;
 8005dfc:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005dfe:	b289      	uxth	r1, r1
    pHandle->_Super.hSector = SECTOR_5;
 8005e00:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
    wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 8005e04:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
 8005e08:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
  uint32_t adcTrig = 0;
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e7c7      	b.n	8005da0 <R3_1_F30X_SetADCSampPointSect6+0x40>
 8005e10:	2000      	movs	r0, #0
 8005e12:	e7c5      	b.n	8005da0 <R3_1_F30X_SetADCSampPointSect6+0x40>

08005e14 <R3_1_F30X_RLGetPhaseCurrents>:
  int32_t wAux;
  int16_t hCurrA = 0, hCurrB = 0;
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;

  /* Clear the flag to indicate the start of FOC algorithm*/
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 8005e14:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0

  wAux = ( int32_t )( pHandle->wPhaseBOffset );
 8005e18:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8005e1a:	b470      	push	{r4, r5, r6}
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 8005e1c:	68dc      	ldr	r4, [r3, #12]
  wAux -= ( int32_t )( pHandle->pParams_str->ADCx->JDR1 );
 8005e1e:	681d      	ldr	r5, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005e20:	f06f 0601 	mvn.w	r6, #1
 8005e24:	6126      	str	r6, [r4, #16]
 8005e26:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8005e2a:	4c1b      	ldr	r4, [pc, #108]	; (8005e98 <R3_1_F30X_RLGetPhaseCurrents+0x84>)
  wAux -= ( int32_t )( pHandle->pParams_str->ADCx->JDR1 );
 8005e2c:	1ad3      	subs	r3, r2, r3
  if ( wAux > -INT16_MAX )
 8005e2e:	42a3      	cmp	r3, r4
 8005e30:	db0f      	blt.n	8005e52 <R3_1_F30X_RLGetPhaseCurrents+0x3e>
  {
    if ( wAux < INT16_MAX )
 8005e32:	f647 74fe 	movw	r4, #32766	; 0x7ffe
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	dc27      	bgt.n	8005e8a <R3_1_F30X_RLGetPhaseCurrents+0x76>
  }
  /* First value read of Phase B*/
  hCurrA = ( int16_t )( wAux );

  wAux = ( int32_t )( pHandle->wPhaseBOffset );
  wAux -= ( int32_t )( pHandle->pParams_str->ADCx->JDR2 );
 8005e3a:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8005e3e:	4d16      	ldr	r5, [pc, #88]	; (8005e98 <R3_1_F30X_RLGetPhaseCurrents+0x84>)
  wAux -= ( int32_t )( pHandle->pParams_str->ADCx->JDR2 );
 8005e40:	1b92      	subs	r2, r2, r6
  if ( wAux > -INT16_MAX )
 8005e42:	42aa      	cmp	r2, r5
 8005e44:	b21c      	sxth	r4, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	da0c      	bge.n	8005e64 <R3_1_F30X_RLGetPhaseCurrents+0x50>
 8005e4a:	f248 0201 	movw	r2, #32769	; 0x8001
 8005e4e:	4d13      	ldr	r5, [pc, #76]	; (8005e9c <R3_1_F30X_RLGetPhaseCurrents+0x88>)
 8005e50:	e00f      	b.n	8005e72 <R3_1_F30X_RLGetPhaseCurrents+0x5e>
 8005e52:	4c12      	ldr	r4, [pc, #72]	; (8005e9c <R3_1_F30X_RLGetPhaseCurrents+0x88>)
 8005e54:	f248 0301 	movw	r3, #32769	; 0x8001
  wAux -= ( int32_t )( pHandle->pParams_str->ADCx->JDR2 );
 8005e58:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
  if ( wAux > -INT16_MAX )
 8005e5c:	4d0e      	ldr	r5, [pc, #56]	; (8005e98 <R3_1_F30X_RLGetPhaseCurrents+0x84>)
  wAux -= ( int32_t )( pHandle->pParams_str->ADCx->JDR2 );
 8005e5e:	1b92      	subs	r2, r2, r6
  if ( wAux > -INT16_MAX )
 8005e60:	42aa      	cmp	r2, r5
 8005e62:	dbf2      	blt.n	8005e4a <R3_1_F30X_RLGetPhaseCurrents+0x36>
  {
    if ( wAux < INT16_MAX )
 8005e64:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 8005e68:	42aa      	cmp	r2, r5
 8005e6a:	dd12      	ble.n	8005e92 <R3_1_F30X_RLGetPhaseCurrents+0x7e>
 8005e6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e70:	4615      	mov	r5, r2

  pStator_Currents->qI_Component1 = hCurrA;
  pStator_Currents->qI_Component2 = hCurrB;
  pHandle->_Super.hIa = hCurrA;
  pHandle->_Super.hIb = hCurrB;
  pHandle->_Super.hIc = -hCurrA - hCurrB;
 8005e72:	4413      	add	r3, r2
 8005e74:	425b      	negs	r3, r3
  pStator_Currents->qI_Component1 = hCurrA;
 8005e76:	800c      	strh	r4, [r1, #0]
  pStator_Currents->qI_Component2 = hCurrB;
 8005e78:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.hIa = hCurrA;
 8005e7a:	f8a0 4056 	strh.w	r4, [r0, #86]	; 0x56
  pHandle->_Super.hIb = hCurrB;
 8005e7e:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.hIc = -hCurrA - hCurrB;
 8005e82:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
}
 8005e86:	bc70      	pop	{r4, r5, r6}
 8005e88:	4770      	bx	lr
 8005e8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e8e:	461c      	mov	r4, r3
 8005e90:	e7e2      	b.n	8005e58 <R3_1_F30X_RLGetPhaseCurrents+0x44>
 8005e92:	b215      	sxth	r5, r2
 8005e94:	b292      	uxth	r2, r2
 8005e96:	e7ec      	b.n	8005e72 <R3_1_F30X_RLGetPhaseCurrents+0x5e>
 8005e98:	ffff8002 	.word	0xffff8002
 8005e9c:	ffff8001 	.word	0xffff8001

08005ea0 <R3_1_F30X_RLTurnOnLowSides>:
 * @retval none
 */
void R3_1_F30X_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ea0:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8005ea4:	68ca      	ldr	r2, [r1, #12]

  /*Turn on the phase A low side switch */
  TIMx->CCR1 = 0u;
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f06f 0301 	mvn.w	r3, #1
 8005eac:	6350      	str	r0, [r2, #52]	; 0x34
 8005eae:	6113      	str	r3, [r2, #16]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005eb0:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005eb2:	07db      	lsls	r3, r3, #31
 8005eb4:	d5fc      	bpl.n	8005eb0 <R3_1_F30X_RLTurnOnLowSides+0x10>
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005eb6:	6c53      	ldr	r3, [r2, #68]	; 0x44

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005eb8:	7c08      	ldrb	r0, [r1, #16]
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005ebe:	2802      	cmp	r0, #2
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005ec0:	6453      	str	r3, [r2, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005ec2:	d10a      	bne.n	8005eda <R3_1_F30X_RLTurnOnLowSides+0x3a>
{
 8005ec4:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005ec6:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005ec8:	694d      	ldr	r5, [r1, #20]
 8005eca:	8b0e      	ldrh	r6, [r1, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005ecc:	8c0c      	ldrh	r4, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005ece:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005ed0:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005ed2:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005ed4:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 8005ed6:	bc70      	pop	{r4, r5, r6}
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8005eda:	4770      	bx	lr

08005edc <R3_1_F30X_RLSwitchOnPWM>:
 * @retval none
 */
void R3_1_F30X_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_F3_Handle_t * pHandle = ( PWMC_R3_1_F3_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005edc:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0

  pHandle->_Super.bTurnOnLowSidesAction = false;
 8005ee0:	2200      	movs	r2, #0
{
 8005ee2:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ee4:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.bTurnOnLowSidesAction = false;
 8005ee6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	06d5      	lsls	r5, r2, #27
 8005eee:	d4fc      	bmi.n	8005eea <R3_1_F30X_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	06d4      	lsls	r4, r2, #27
 8005ef4:	d5fc      	bpl.n	8005ef0 <R3_1_F30X_RLSwitchOnPWM+0x14>
  /* Set Repetition counter to zero */
  TIMx->RCR = 0u;


  TIMx->CCR1 = 1u;
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 5u;
 8005ef6:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
  /* JSQR ADCx resgister writing. The sequence configuration values are set into
   * the R3_1_F30X_RLDetectionModeEnable function*/
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC_JSQR_RL_Detection_phB;
 8005efa:	680c      	ldr	r4, [r1, #0]
 8005efc:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
  TIMx->RCR = 0u;
 8005f00:	2700      	movs	r7, #0
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 5u;
 8005f02:	3a05      	subs	r2, #5
  TIMx->CCR1 = 1u;
 8005f04:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f06:	f06f 0001 	mvn.w	r0, #1
  TIMx->RCR = 0u;
 8005f0a:	631f      	str	r7, [r3, #48]	; 0x30
  TIMx->CCR1 = 1u;
 8005f0c:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 5u;
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC_JSQR_RL_Detection_phB;
 8005f10:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005f12:	6118      	str	r0, [r3, #16]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005f14:	691a      	ldr	r2, [r3, #16]

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005f16:	07d2      	lsls	r2, r2, #31
 8005f18:	d5fc      	bpl.n	8005f14 <R3_1_F30X_RLSwitchOnPWM+0x38>
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  TIMx->BDTR |= TIM_BDTR_MOE;

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005f1c:	7c08      	ldrb	r0, [r1, #16]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005f26:	2802      	cmp	r0, #2
  TIMx->BDTR |= TIM_BDTR_MOE;
 8005f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005f2e:	d10f      	bne.n	8005f50 <R3_1_F30X_RLSwitchOnPWM+0x74>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005f30:	6a1a      	ldr	r2, [r3, #32]
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005f32:	694d      	ldr	r5, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005f34:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005f36:	8b0e      	ldrh	r6, [r1, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005f38:	8c0c      	ldrh	r4, [r1, #32]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005f3a:	f240 5355 	movw	r3, #1365	; 0x555
 8005f3e:	421a      	tst	r2, r3
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005f40:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005f42:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005f44:	bf15      	itete	ne
 8005f46:	61ae      	strne	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005f48:	62ae      	streq	r6, [r5, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005f4a:	6184      	strne	r4, [r0, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005f4c:	6284      	streq	r4, [r0, #40]	; 0x28
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
    }
  }
  return;
}
 8005f50:	bcf0      	pop	{r4, r5, r6, r7}
 8005f52:	4770      	bx	lr

08005f54 <R3_1_F30X_SetADCSampPointCalibration>:
{
 8005f54:	4602      	mov	r2, r0
  pHandle->pParams_str->TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005f56:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8005f5a:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
 8005f5e:	68c3      	ldr	r3, [r0, #12]
{
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->pParams_str->TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005f62:	3901      	subs	r1, #1
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005f64:	f8b2 404c 	ldrh.w	r4, [r2, #76]	; 0x4c
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005f68:	f8b2 e048 	ldrh.w	lr, [r2, #72]	; 0x48
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005f6c:	f8b2 704a 	ldrh.w	r7, [r2, #74]	; 0x4a
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005f70:	6805      	ldr	r5, [r0, #0]
  pHandle->pParams_str->TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005f72:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005f74:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005f78:	639f      	str	r7, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005f7a:	63dc      	str	r4, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 8005f7c:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005f7e:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 8005f80:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 8005f84:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005f88:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8005f8c:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 8005f8e:	641e      	str	r6, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005f90:	69dc      	ldr	r4, [r3, #28]
 8005f92:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005f96:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005f98:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 8005f9a:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 8005f9c:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005f9e:	64ec      	str	r4, [r5, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8005fa0:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 8005fa2:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8005fa4:	bf0a      	itet	eq
 8005fa6:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8005fa8:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 8005fac:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <R3_1_F30X_SetADCSampPointSect1>:
{
 8005fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005fb6:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8005fba:	f8b0 e078 	ldrh.w	lr, [r0, #120]	; 0x78
 8005fbe:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
 8005fc2:	8923      	ldrh	r3, [r4, #8]
{
 8005fc4:	4602      	mov	r2, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005fc6:	ebae 0005 	sub.w	r0, lr, r5
 8005fca:	b280      	uxth	r0, r0
 8005fcc:	4298      	cmp	r0, r3
 8005fce:	d83d      	bhi.n	800604c <R3_1_F30X_SetADCSampPointSect1+0x98>
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhA - pHandle->_Super.hCntPhB );
 8005fd0:	f8b2 704a 	ldrh.w	r7, [r2, #74]	; 0x4a
    wADC_JSQR_phase = pHandle->wADC_JSQR_phBC;
 8005fd4:	f8d2 60a0 	ldr.w	r6, [r2, #160]	; 0xa0
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhA - pHandle->_Super.hCntPhB );
 8005fd8:	1be9      	subs	r1, r5, r7
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) * 2u )
 8005fda:	b289      	uxth	r1, r1
 8005fdc:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8005fe0:	d82f      	bhi.n	8006042 <R3_1_F30X_SetADCSampPointSect1+0x8e>
      hCntSmp = pHandle->_Super.hCntPhA + pHandle->pParams_str->hTafter;
 8005fe2:	442b      	add	r3, r5
 8005fe4:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005fe6:	458e      	cmp	lr, r1
 8005fe8:	d83c      	bhi.n	8006064 <R3_1_F30X_SetADCSampPointSect1+0xb0>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005fea:	43c9      	mvns	r1, r1
 8005fec:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8005ff0:	b289      	uxth	r1, r1
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005ff2:	2040      	movs	r0, #64	; 0x40
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 8005ff4:	68e3      	ldr	r3, [r4, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8005ff6:	f8d4 e000 	ldr.w	lr, [r4]
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8005ffa:	4406      	add	r6, r0
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005ffc:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8006000:	67d6      	str	r6, [r2, #124]	; 0x7c
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 8006002:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8006004:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8006006:	639f      	str	r7, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8006008:	63d8      	str	r0, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 800600a:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800600c:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 800600e:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 8006012:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8006016:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800601a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 800601c:	641d      	str	r5, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800601e:	69dc      	ldr	r4, [r3, #28]
 8006020:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006024:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8006026:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 8006028:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 800602a:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 800602c:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8006030:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 8006032:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006034:	bf0a      	itet	eq
 8006036:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8006038:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 800603c:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hCntSmp = pHandle->_Super.hCntPhA - pHandle->pParams_str->hTbefore;
 8006042:	8961      	ldrh	r1, [r4, #10]
 8006044:	1a69      	subs	r1, r5, r1
 8006046:	b289      	uxth	r1, r1
  uint32_t adcTrig = 0;
 8006048:	2000      	movs	r0, #0
 800604a:	e7d3      	b.n	8005ff4 <R3_1_F30X_SetADCSampPointSect1+0x40>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800604c:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.hSector = SECTOR_5;
 8006050:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006052:	b289      	uxth	r1, r1
    pHandle->_Super.hSector = SECTOR_5;
 8006054:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
    wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 8006058:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
 800605c:	f8b2 704a 	ldrh.w	r7, [r2, #74]	; 0x4a
  uint32_t adcTrig = 0;
 8006060:	2000      	movs	r0, #0
 8006062:	e7c7      	b.n	8005ff4 <R3_1_F30X_SetADCSampPointSect1+0x40>
 8006064:	2000      	movs	r0, #0
 8006066:	e7c5      	b.n	8005ff4 <R3_1_F30X_SetADCSampPointSect1+0x40>

08006068 <R3_1_F30X_SetADCSampPointSect2>:
{
 8006068:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 800606a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800606e:	f8b0 e078 	ldrh.w	lr, [r0, #120]	; 0x78
 8006072:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
 8006076:	8923      	ldrh	r3, [r4, #8]
{
 8006078:	4602      	mov	r2, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 800607a:	ebae 0005 	sub.w	r0, lr, r5
 800607e:	b280      	uxth	r0, r0
 8006080:	4298      	cmp	r0, r3
 8006082:	d83d      	bhi.n	8006100 <R3_1_F30X_SetADCSampPointSect2+0x98>
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhB - pHandle->_Super.hCntPhA );
 8006084:	f8b2 7048 	ldrh.w	r7, [r2, #72]	; 0x48
    wADC_JSQR_phase =  pHandle->wADC_JSQR_phAC;
 8006088:	f8d2 6098 	ldr.w	r6, [r2, #152]	; 0x98
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhB - pHandle->_Super.hCntPhA );
 800608c:	1be9      	subs	r1, r5, r7
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) * 2u )
 800608e:	b289      	uxth	r1, r1
 8006090:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8006094:	d82f      	bhi.n	80060f6 <R3_1_F30X_SetADCSampPointSect2+0x8e>
      hCntSmp = pHandle->_Super. hCntPhB + pHandle->pParams_str->hTafter;
 8006096:	442b      	add	r3, r5
 8006098:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800609a:	458e      	cmp	lr, r1
 800609c:	d83c      	bhi.n	8006118 <R3_1_F30X_SetADCSampPointSect2+0xb0>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800609e:	43c9      	mvns	r1, r1
 80060a0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 80060a4:	b289      	uxth	r1, r1
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80060a6:	2040      	movs	r0, #64	; 0x40
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 80060a8:	68e3      	ldr	r3, [r4, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 80060aa:	f8d4 e000 	ldr.w	lr, [r4]
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 80060ae:	4406      	add	r6, r0
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 80060b0:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 80060b4:	67d6      	str	r6, [r2, #124]	; 0x7c
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 80060b6:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 80060b8:	635f      	str	r7, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 80060ba:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 80060bc:	63d8      	str	r0, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 80060be:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80060c0:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 80060c2:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 80060c6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80060ca:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80060ce:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 80060d0:	641d      	str	r5, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80060d2:	69dc      	ldr	r4, [r3, #28]
 80060d4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80060d8:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 80060da:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 80060dc:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 80060de:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 80060e0:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 80060e4:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 80060e6:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 80060e8:	bf0a      	itet	eq
 80060ea:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 80060ec:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 80060f0:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 80060f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hCntSmp = pHandle->_Super.hCntPhB - pHandle->pParams_str->hTbefore;
 80060f6:	8961      	ldrh	r1, [r4, #10]
 80060f8:	1a69      	subs	r1, r5, r1
 80060fa:	b289      	uxth	r1, r1
  uint32_t adcTrig = 0;
 80060fc:	2000      	movs	r0, #0
 80060fe:	e7d3      	b.n	80060a8 <R3_1_F30X_SetADCSampPointSect2+0x40>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006100:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.hSector = SECTOR_5;
 8006104:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006106:	b289      	uxth	r1, r1
    pHandle->_Super.hSector = SECTOR_5;
 8006108:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
    wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 800610c:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
 8006110:	f8b2 7048 	ldrh.w	r7, [r2, #72]	; 0x48
  uint32_t adcTrig = 0;
 8006114:	2000      	movs	r0, #0
 8006116:	e7c7      	b.n	80060a8 <R3_1_F30X_SetADCSampPointSect2+0x40>
 8006118:	2000      	movs	r0, #0
 800611a:	e7c5      	b.n	80060a8 <R3_1_F30X_SetADCSampPointSect2+0x40>

0800611c <R3_1_F30X_SetADCSampPointSect3>:
{
 800611c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if  ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 800611e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8006122:	f8b0 e078 	ldrh.w	lr, [r0, #120]	; 0x78
 8006126:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
 800612a:	8923      	ldrh	r3, [r4, #8]
{
 800612c:	4602      	mov	r2, r0
  if  ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 800612e:	ebae 0005 	sub.w	r0, lr, r5
 8006132:	b280      	uxth	r0, r0
 8006134:	4298      	cmp	r0, r3
 8006136:	d83d      	bhi.n	80061b4 <R3_1_F30X_SetADCSampPointSect3+0x98>
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhB - pHandle->_Super.hCntPhC );
 8006138:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
    wADC_JSQR_phase = pHandle->wADC_JSQR_phCA;
 800613c:	f8d2 609c 	ldr.w	r6, [r2, #156]	; 0x9c
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhB - pHandle->_Super.hCntPhC );
 8006140:	1be9      	subs	r1, r5, r7
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) * 2u )
 8006142:	b289      	uxth	r1, r1
 8006144:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8006148:	d82f      	bhi.n	80061aa <R3_1_F30X_SetADCSampPointSect3+0x8e>
      hCntSmp = pHandle->_Super.hCntPhB + pHandle->pParams_str->hTafter;
 800614a:	442b      	add	r3, r5
 800614c:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800614e:	458e      	cmp	lr, r1
 8006150:	d83c      	bhi.n	80061cc <R3_1_F30X_SetADCSampPointSect3+0xb0>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006152:	43c9      	mvns	r1, r1
 8006154:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8006158:	b289      	uxth	r1, r1
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 800615a:	2040      	movs	r0, #64	; 0x40
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 800615c:	68e3      	ldr	r3, [r4, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 800615e:	f8d4 e000 	ldr.w	lr, [r4]
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8006162:	4406      	add	r6, r0
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8006164:	f8b2 0048 	ldrh.w	r0, [r2, #72]	; 0x48
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8006168:	67d6      	str	r6, [r2, #124]	; 0x7c
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 800616a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 800616c:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 800616e:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8006170:	63df      	str	r7, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 8006172:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006174:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 8006176:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 800617a:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800617e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006182:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 8006184:	641d      	str	r5, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006186:	69dc      	ldr	r4, [r3, #28]
 8006188:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800618c:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 800618e:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 8006190:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 8006192:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8006194:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8006198:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 800619a:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 800619c:	bf0a      	itet	eq
 800619e:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 80061a0:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 80061a4:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 80061a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hCntSmp = pHandle->_Super.hCntPhB - pHandle->pParams_str->hTbefore;
 80061aa:	8961      	ldrh	r1, [r4, #10]
 80061ac:	1a69      	subs	r1, r5, r1
 80061ae:	b289      	uxth	r1, r1
  uint32_t adcTrig = 0;
 80061b0:	2000      	movs	r0, #0
 80061b2:	e7d3      	b.n	800615c <R3_1_F30X_SetADCSampPointSect3+0x40>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80061b4:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.hSector = SECTOR_5;
 80061b8:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80061ba:	b289      	uxth	r1, r1
    pHandle->_Super.hSector = SECTOR_5;
 80061bc:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
    wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 80061c0:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
 80061c4:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
  uint32_t adcTrig = 0;
 80061c8:	2000      	movs	r0, #0
 80061ca:	e7c7      	b.n	800615c <R3_1_F30X_SetADCSampPointSect3+0x40>
 80061cc:	2000      	movs	r0, #0
 80061ce:	e7c5      	b.n	800615c <R3_1_F30X_SetADCSampPointSect3+0x40>

080061d0 <R3_1_F30X_SetADCSampPointSect4>:
{
 80061d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80061d2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80061d6:	f8b0 e078 	ldrh.w	lr, [r0, #120]	; 0x78
 80061da:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
 80061de:	8923      	ldrh	r3, [r4, #8]
{
 80061e0:	4602      	mov	r2, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80061e2:	ebae 0005 	sub.w	r0, lr, r5
 80061e6:	b280      	uxth	r0, r0
 80061e8:	4298      	cmp	r0, r3
 80061ea:	d83d      	bhi.n	8006268 <R3_1_F30X_SetADCSampPointSect4+0x98>
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhC - pHandle->_Super.hCntPhB );
 80061ec:	f8b2 704a 	ldrh.w	r7, [r2, #74]	; 0x4a
    wADC_JSQR_phase = pHandle->wADC_JSQR_phBA;
 80061f0:	f8d2 6094 	ldr.w	r6, [r2, #148]	; 0x94
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhC - pHandle->_Super.hCntPhB );
 80061f4:	1be9      	subs	r1, r5, r7
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) * 2u )
 80061f6:	b289      	uxth	r1, r1
 80061f8:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 80061fc:	d82f      	bhi.n	800625e <R3_1_F30X_SetADCSampPointSect4+0x8e>
      hCntSmp = pHandle->_Super.hCntPhC + pHandle->pParams_str->hTafter;
 80061fe:	442b      	add	r3, r5
 8006200:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8006202:	458e      	cmp	lr, r1
 8006204:	d83c      	bhi.n	8006280 <R3_1_F30X_SetADCSampPointSect4+0xb0>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006206:	43c9      	mvns	r1, r1
 8006208:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800620c:	b289      	uxth	r1, r1
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 800620e:	2040      	movs	r0, #64	; 0x40
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 8006210:	68e3      	ldr	r3, [r4, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8006212:	f8d4 e000 	ldr.w	lr, [r4]
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 8006216:	4406      	add	r6, r0
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8006218:	f8b2 0048 	ldrh.w	r0, [r2, #72]	; 0x48
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 800621c:	67d6      	str	r6, [r2, #124]	; 0x7c
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 800621e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8006220:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8006222:	639f      	str	r7, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8006224:	63dd      	str	r5, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 8006226:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006228:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 800622a:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 800622e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8006232:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006236:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 8006238:	641d      	str	r5, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800623a:	69dc      	ldr	r4, [r3, #28]
 800623c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006240:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8006242:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 8006244:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 8006246:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 8006248:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800624c:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 800624e:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006250:	bf0a      	itet	eq
 8006252:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8006254:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 8006258:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 800625c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hCntSmp = pHandle->_Super.hCntPhC - pHandle->pParams_str->hTbefore;
 800625e:	8961      	ldrh	r1, [r4, #10]
 8006260:	1a69      	subs	r1, r5, r1
 8006262:	b289      	uxth	r1, r1
  uint32_t adcTrig = 0;
 8006264:	2000      	movs	r0, #0
 8006266:	e7d3      	b.n	8006210 <R3_1_F30X_SetADCSampPointSect4+0x40>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006268:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.hSector = SECTOR_5;
 800626c:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800626e:	b289      	uxth	r1, r1
    pHandle->_Super.hSector = SECTOR_5;
 8006270:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
    wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 8006274:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
 8006278:	f8b2 704a 	ldrh.w	r7, [r2, #74]	; 0x4a
  uint32_t adcTrig = 0;
 800627c:	2000      	movs	r0, #0
 800627e:	e7c7      	b.n	8006210 <R3_1_F30X_SetADCSampPointSect4+0x40>
 8006280:	2000      	movs	r0, #0
 8006282:	e7c5      	b.n	8006210 <R3_1_F30X_SetADCSampPointSect4+0x40>

08006284 <R3_1_F30X_SetADCSampPointSect5>:
{
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 8006286:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800628a:	f8b0 e078 	ldrh.w	lr, [r0, #120]	; 0x78
 800628e:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
 8006292:	8923      	ldrh	r3, [r4, #8]
{
 8006294:	4602      	mov	r2, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 8006296:	ebae 0005 	sub.w	r0, lr, r5
 800629a:	b280      	uxth	r0, r0
 800629c:	4298      	cmp	r0, r3
 800629e:	d83d      	bhi.n	800631c <R3_1_F30X_SetADCSampPointSect5+0x98>
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhC - pHandle->_Super.hCntPhA );
 80062a0:	f8b2 7048 	ldrh.w	r7, [r2, #72]	; 0x48
   wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 80062a4:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhC - pHandle->_Super.hCntPhA );
 80062a8:	1be9      	subs	r1, r5, r7
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) * 2u )
 80062aa:	b289      	uxth	r1, r1
 80062ac:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 80062b0:	d82f      	bhi.n	8006312 <R3_1_F30X_SetADCSampPointSect5+0x8e>
      hCntSmp = pHandle->_Super.hCntPhC + pHandle->pParams_str->hTafter;
 80062b2:	442b      	add	r3, r5
 80062b4:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80062b6:	458e      	cmp	lr, r1
 80062b8:	d83c      	bhi.n	8006334 <R3_1_F30X_SetADCSampPointSect5+0xb0>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80062ba:	43c9      	mvns	r1, r1
 80062bc:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 80062c0:	b289      	uxth	r1, r1
        adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80062c2:	2040      	movs	r0, #64	; 0x40
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 80062c4:	68e3      	ldr	r3, [r4, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 80062c6:	f8d4 e000 	ldr.w	lr, [r4]
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 80062ca:	4406      	add	r6, r0
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 80062cc:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
  pHandle->wADC1_JSQR = wADC_JSQR_phase + adcTrig;
 80062d0:	67d6      	str	r6, [r2, #124]	; 0x7c
  pHandle->pParams_str->TIMx->CCR4 = hCntSmp;
 80062d2:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 80062d4:	635f      	str	r7, [r3, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 80062d6:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 80062d8:	63dd      	str	r5, [r3, #60]	; 0x3c
  wCCR4Aux = ( uint16_t )( TIMx->CCR4 );
 80062da:	6c19      	ldr	r1, [r3, #64]	; 0x40
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80062dc:	69dc      	ldr	r4, [r3, #28]
  if ( pHandle->_Super.SWerror == 1u )
 80062de:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 80062e2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80062e6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80062ea:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = 0xFFFFu;
 80062ec:	641d      	str	r5, [r3, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80062ee:	69dc      	ldr	r4, [r3, #28]
 80062f0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80062f4:	61dc      	str	r4, [r3, #28]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 80062f6:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 80062f8:	b289      	uxth	r1, r1
  TIMx->CCR4 = wCCR4Aux;
 80062fa:	6419      	str	r1, [r3, #64]	; 0x40
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC1_JSQR;
 80062fc:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8006300:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 8006302:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006304:	bf0a      	itet	eq
 8006306:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8006308:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 800630c:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 8006310:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hCntSmp = pHandle->_Super.hCntPhC - pHandle->pParams_str->hTbefore;
 8006312:	8961      	ldrh	r1, [r4, #10]
 8006314:	1a69      	subs	r1, r5, r1
 8006316:	b289      	uxth	r1, r1
  uint32_t adcTrig = 0;
 8006318:	2000      	movs	r0, #0
 800631a:	e7d3      	b.n	80062c4 <R3_1_F30X_SetADCSampPointSect5+0x40>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800631c:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.hSector = SECTOR_5;
 8006320:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006322:	b289      	uxth	r1, r1
    pHandle->_Super.hSector = SECTOR_5;
 8006324:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
    wADC_JSQR_phase = pHandle->wADC_JSQR_phAB;
 8006328:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
 800632c:	f8b2 7048 	ldrh.w	r7, [r2, #72]	; 0x48
  uint32_t adcTrig = 0;
 8006330:	2000      	movs	r0, #0
 8006332:	e7c7      	b.n	80062c4 <R3_1_F30X_SetADCSampPointSect5+0x40>
 8006334:	2000      	movs	r0, #0
 8006336:	e7c5      	b.n	80062c4 <R3_1_F30X_SetADCSampPointSect5+0x40>

08006338 <R3_1_F30X_Init>:
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->wCompOCPASelection;
 8006338:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
{
 800633c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006340:	68cc      	ldr	r4, [r1, #12]
  ADC_TypeDef * ADCx  = pHandle->pParams_str->ADCx;
 8006342:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006344:	68e2      	ldr	r2, [r4, #12]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->wCompOCPASelection;
 8006346:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->wCompOCPBSelection;
 8006348:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->wCompOCPCSelection;
 800634c:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->wCompOVPSelection;
 800634e:	6c4d      	ldr	r5, [r1, #68]	; 0x44
 8006350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006354:	60e2      	str	r2, [r4, #12]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800635e:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006360:	f04f 0c04 	mov.w	ip, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006364:	f022 0204 	bic.w	r2, r2, #4
 8006368:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800636a:	f8c3 c000 	str.w	ip, [r3]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800636e:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006370:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006374:	f022 0220 	bic.w	r2, r2, #32
 8006378:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800637a:	f8c3 c000 	str.w	ip, [r3]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	f022 0201 	bic.w	r2, r2, #1
{
 8006384:	b082      	sub	sp, #8
 8006386:	6022      	str	r2, [r4, #0]
    if ( COMP_OCPAx )
 8006388:	b30e      	cbz	r6, 80063ce <R3_1_F30X_Init+0x96>
      if ( pHandle->pParams_str->bCompOCPAInvInput_MODE != EXT_MODE )
 800638a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 800638e:	2a01      	cmp	r2, #1
 8006390:	d005      	beq.n	800639e <R3_1_F30X_Init+0x66>
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006392:	6832      	ldr	r2, [r6, #0]
 8006394:	f002 0270 	and.w	r2, r2, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8006398:	2a40      	cmp	r2, #64	; 0x40
 800639a:	f000 8129 	beq.w	80065f0 <R3_1_F30X_Init+0x2b8>
      volatile uint16_t waittime = 0u;
 800639e:	2200      	movs	r2, #0
 80063a0:	f8ad 2002 	strh.w	r2, [sp, #2]
 80063a4:	e003      	b.n	80063ae <R3_1_F30X_Init+0x76>
      for ( waittime = 0u; waittime < 1000u; waittime++ )
 80063a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80063aa:	3201      	adds	r2, #1
 80063ac:	b292      	uxth	r2, r2
 80063ae:	f8ad 2002 	strh.w	r2, [sp, #2]
 80063b2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80063b6:	b292      	uxth	r2, r2
 80063b8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80063bc:	d3f3      	bcc.n	80063a6 <R3_1_F30X_Init+0x6e>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 80063be:	6832      	ldr	r2, [r6, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	6032      	str	r2, [r6, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 80063c6:	6832      	ldr	r2, [r6, #0]
 80063c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80063cc:	6032      	str	r2, [r6, #0]
    if ( COMP_OCPBx )
 80063ce:	f1be 0f00 	cmp.w	lr, #0
 80063d2:	d00b      	beq.n	80063ec <R3_1_F30X_Init+0xb4>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 80063d4:	f8de 2000 	ldr.w	r2, [lr]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	f8ce 2000 	str.w	r2, [lr]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 80063e0:	f8de 2000 	ldr.w	r2, [lr]
 80063e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80063e8:	f8ce 2000 	str.w	r2, [lr]
    if ( COMP_OCPCx )
 80063ec:	b13f      	cbz	r7, 80063fe <R3_1_F30X_Init+0xc6>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	603a      	str	r2, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80063fc:	603a      	str	r2, [r7, #0]
    if ( COMP_OVPx )
 80063fe:	b30d      	cbz	r5, 8006444 <R3_1_F30X_Init+0x10c>
      if ( pHandle->pParams_str->bCompOVPInvInput_MODE != EXT_MODE )
 8006400:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
 8006404:	2a01      	cmp	r2, #1
 8006406:	d005      	beq.n	8006414 <R3_1_F30X_Init+0xdc>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006408:	682a      	ldr	r2, [r5, #0]
 800640a:	f002 0270 	and.w	r2, r2, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800640e:	2a40      	cmp	r2, #64	; 0x40
 8006410:	f000 80cd 	beq.w	80065ae <R3_1_F30X_Init+0x276>
      volatile uint16_t waittime = 0u;
 8006414:	2200      	movs	r2, #0
 8006416:	f8ad 2004 	strh.w	r2, [sp, #4]
 800641a:	e003      	b.n	8006424 <R3_1_F30X_Init+0xec>
      for ( waittime = 0u; waittime < 1000u; waittime++ )
 800641c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006420:	3201      	adds	r2, #1
 8006422:	b292      	uxth	r2, r2
 8006424:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006428:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800642c:	b292      	uxth	r2, r2
 800642e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006432:	d3f3      	bcc.n	800641c <R3_1_F30X_Init+0xe4>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006434:	682a      	ldr	r2, [r5, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	602a      	str	r2, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800643c:	682a      	ldr	r2, [r5, #0]
 800643e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006442:	602a      	str	r2, [r5, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006448:	6122      	str	r2, [r4, #16]
    if ( ( pHandle->pParams_str->bBKIN2Mode ) != NONE )
 800644a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 800644e:	2a00      	cmp	r2, #0
 8006450:	f040 80a9 	bne.w	80065a6 <R3_1_F30X_Init+0x26e>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006454:	68e2      	ldr	r2, [r4, #12]
 8006456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800645a:	60e2      	str	r2, [r4, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006462:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800646a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      volatile uint16_t waittime = 0u;
 800646e:	2500      	movs	r5, #0
 8006470:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006474:	609a      	str	r2, [r3, #8]
 8006476:	f8ad 5006 	strh.w	r5, [sp, #6]
      for ( waittime = 0u; waittime < 65000u; waittime++ )
 800647a:	f8ad 5006 	strh.w	r5, [sp, #6]
 800647e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006482:	f64f 55e7 	movw	r5, #64999	; 0xfde7
 8006486:	b292      	uxth	r2, r2
 8006488:	42aa      	cmp	r2, r5
 800648a:	d80f      	bhi.n	80064ac <R3_1_F30X_Init+0x174>
        waittime = waittime;
 800648c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006490:	b292      	uxth	r2, r2
 8006492:	f8ad 2006 	strh.w	r2, [sp, #6]
      for ( waittime = 0u; waittime < 65000u; waittime++ )
 8006496:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800649a:	3201      	adds	r2, #1
 800649c:	b292      	uxth	r2, r2
 800649e:	f8ad 2006 	strh.w	r2, [sp, #6]
 80064a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80064a6:	b292      	uxth	r2, r2
 80064a8:	42aa      	cmp	r2, r5
 80064aa:	d9ef      	bls.n	800648c <R3_1_F30X_Init+0x154>
  MODIFY_REG(ADCx->CR,
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80064b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80064b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80064ba:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80064bc:	689a      	ldr	r2, [r3, #8]
    while ( LL_ADC_IsCalibrationOnGoing( ADCx ) )
 80064be:	2a00      	cmp	r2, #0
 80064c0:	dbfc      	blt.n	80064bc <R3_1_F30X_Init+0x184>
  MODIFY_REG(ADCx->CR,
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80064d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d4:	f022 020f 	bic.w	r2, r2, #15
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_InjectedInitStruct.ADC_InjecSequence2 = pHandle->pParams_str->bIbChannel;
 80064da:	794e      	ldrb	r6, [r1, #5]
    ADC_InjectedInitStruct.ADC_InjecSequence1 = pHandle->pParams_str->bIaChannel;
 80064dc:	790a      	ldrb	r2, [r1, #4]
{
  uint32_t tmpreg1 = 0u;

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  /* Get the ADCx JSQR value */
  tmpreg1 = ADCx->JSQR;
 80064de:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064e0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064e2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064e4:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064e6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064e8:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064ea:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064ec:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064ee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80064f0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
     external trigger edge and sequences
   */
  tmpreg1 = ( uint32_t ) ( ( ( uint32_t )( ADC_InjectedInitStruct->ADC_NbrOfInjecChannel ) - 1u ) |
                           ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |
                           ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence1 ) << 8 ) |
 80064f2:	ea4f 2802 	mov.w	r8, r2, lsl #8
 80064f6:	ea4f 2c06 	mov.w	ip, r6, lsl #8
                           ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 80064fa:	f048 0e41 	orr.w	lr, r8, #65	; 0x41
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence2 ) << 14 ) |
 80064fe:	03b7      	lsls	r7, r6, #14
                           ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8006500:	f04c 0941 	orr.w	r9, ip, #65	; 0x41
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence2 ) << 14 ) |
 8006504:	0392      	lsls	r2, r2, #14
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence1 ) << 8 ) |
 8006506:	ea4e 0607 	orr.w	r6, lr, r7
 800650a:	ea49 0502 	orr.w	r5, r9, r2
    pHandle->wADC_JSQR_phAB = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 800650e:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
    pHandle->wADC_JSQR_phBA = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 8006512:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    ADC_InjectedInitStruct.ADC_InjecSequence2 = pHandle->pParams_str->bIcChannel;
 8006516:	7989      	ldrb	r1, [r1, #6]
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence1 ) << 8 ) |
 8006518:	020d      	lsls	r5, r1, #8
                           ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 800651a:	f045 0641 	orr.w	r6, r5, #65	; 0x41
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence2 ) << 14 ) |
 800651e:	0389      	lsls	r1, r1, #14
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence1 ) << 8 ) |
 8006520:	4332      	orrs	r2, r6
 8006522:	ea41 0e0e 	orr.w	lr, r1, lr
 8006526:	433e      	orrs	r6, r7
 8006528:	ea41 0109 	orr.w	r1, r1, r9
                           ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 800652c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8006530:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8006534:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
    ADCx->JSQR = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 8006538:	2741      	movs	r7, #65	; 0x41
    pHandle->wADC_JSQR_phBC = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 800653a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    pHandle->wADC_JSQR_phCA = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 800653e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    pHandle->wADC_JSQR_phC = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 8006542:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    pHandle->wADC_JSQR_phA = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 8006546:	f8c0 8080 	str.w	r8, [r0, #128]	; 0x80
    pHandle->wADC_JSQR_phB = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 800654a:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
    pHandle->wADC_JSQR_phAC = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 800654e:	f8c0 e098 	str.w	lr, [r0, #152]	; 0x98
    pHandle->wADC_JSQR_phCB = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 8006552:	f8c0 60a4 	str.w	r6, [r0, #164]	; 0xa4
    ADCx->JSQR = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 8006556:	64df      	str	r7, [r3, #76]	; 0x4c
    ADCx->CR |= ADC_CR_JADSTART;
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	f042 0208 	orr.w	r2, r2, #8
 800655e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006560:	69e2      	ldr	r2, [r4, #28]
    TIMx->CCR4 = 0xFFFFu;
 8006562:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    TIMx->CCR4 = 0x0u;
 800656a:	2100      	movs	r1, #0
 800656c:	61e2      	str	r2, [r4, #28]
    TIMx->CCR4 = 0xFFFFu;
 800656e:	6425      	str	r5, [r4, #64]	; 0x40
    TIMx->CCR4 = 0x0u;
 8006570:	6421      	str	r1, [r4, #64]	; 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006572:	69e2      	ldr	r2, [r4, #28]
 8006574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006578:	61e2      	str	r2, [r4, #28]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800657a:	681a      	ldr	r2, [r3, #0]
    while ( LL_ADC_IsActiveFlag_JEOS( ADCx ) == 0 )
 800657c:	0652      	lsls	r2, r2, #25
 800657e:	d5fc      	bpl.n	800657a <R3_1_F30X_Init+0x242>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8006580:	2240      	movs	r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8006584:	6859      	ldr	r1, [r3, #4]
    pHandle->_Super.DTCompCnt = pHandle->_Super.hDTCompCnt;
 8006586:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
 800658a:	4311      	orrs	r1, r2
    pHandle->OverVoltageFlag = false;
 800658c:	2200      	movs	r2, #0
 800658e:	6059      	str	r1, [r3, #4]
 8006590:	f880 20ad 	strb.w	r2, [r0, #173]	; 0xad
    pHandle->OverCurrentFlag = false;
 8006594:	f880 20ac 	strb.w	r2, [r0, #172]	; 0xac
    pHandle->_Super.DTTest = 0u;
 8006598:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    pHandle->_Super.DTCompCnt = pHandle->_Super.hDTCompCnt;
 800659c:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
}
 80065a0:	b002      	add	sp, #8
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80065a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065aa:	6122      	str	r2, [r4, #16]
 80065ac:	e752      	b.n	8006454 <R3_1_F30X_Init+0x11c>
 80065ae:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80065b2:	fa92 f2a2 	rbit	r2, r2
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80065b6:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80065ba:	fab2 f282 	clz	r2, r2
 80065be:	40d7      	lsrs	r7, r2
 80065c0:	f8df c080 	ldr.w	ip, [pc, #128]	; 8006644 <R3_1_F30X_Init+0x30c>
          LL_DAC_ConvertData12LeftAligned ( DAC1, LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->hDAC_OVP_Threshold ) );
 80065c4:	f8b1 e04c 	ldrh.w	lr, [r1, #76]	; 0x4c
  MODIFY_REG(*preg,
 80065c8:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80065cc:	4e1c      	ldr	r6, [pc, #112]	; (8006640 <R3_1_F30X_Init+0x308>)
  MODIFY_REG(*preg,
 80065ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80065d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80065d6:	ea4e 0202 	orr.w	r2, lr, r2
 80065da:	f84c 2027 	str.w	r2, [ip, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80065de:	6872      	ldr	r2, [r6, #4]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	6072      	str	r2, [r6, #4]
  SET_BIT(DACx->CR,
 80065e6:	6832      	ldr	r2, [r6, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	6032      	str	r2, [r6, #0]
 80065ee:	e711      	b.n	8006414 <R3_1_F30X_Init+0xdc>
 80065f0:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80065f4:	fa92 f2a2 	rbit	r2, r2
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80065f8:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 80065fc:	fab2 f282 	clz	r2, r2
 8006600:	fa28 f802 	lsr.w	r8, r8, r2
 8006604:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8006644 <R3_1_F30X_Init+0x30c>
          LL_DAC_ConvertData12LeftAligned ( DAC1, LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->hDAC_OCP_Threshold ) );
 8006608:	f8b1 a04a 	ldrh.w	sl, [r1, #74]	; 0x4a
  MODIFY_REG(*preg,
 800660c:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8006610:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8006640 <R3_1_F30X_Init+0x308>
  MODIFY_REG(*preg,
 8006614:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006618:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800661c:	ea4a 0202 	orr.w	r2, sl, r2
 8006620:	f849 2028 	str.w	r2, [r9, r8, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8006624:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(DACx->CR,
 8006630:	f8dc 2000 	ldr.w	r2, [ip]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	f8cc 2000 	str.w	r2, [ip]
 800663c:	e6af      	b.n	800639e <R3_1_F30X_Init+0x66>
 800663e:	bf00      	nop
 8006640:	40007400 	.word	0x40007400
 8006644:	40007408 	.word	0x40007408

08006648 <R3_1_F30X_CurrentReadingCalibration>:
{
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800664a:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
  pHandle->wADC1_JSQR = pHandle->wADC_JSQR_phAB;
 800664e:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006652:	68dd      	ldr	r5, [r3, #12]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_HFCurrentsCalibrationAB;
 8006654:	4f4f      	ldr	r7, [pc, #316]	; (8006794 <R3_1_F30X_CurrentReadingCalibration+0x14c>)
  pHandle->_Super.pFctSetADCSampPointSect1 = &R3_1_F30X_SetADCSampPointCalibration;
 8006656:	4b50      	ldr	r3, [pc, #320]	; (8006798 <R3_1_F30X_CurrentReadingCalibration+0x150>)
  pHandle->wPhaseAOffset = 0u;
 8006658:	2600      	movs	r6, #0
  pHandle->bIndex = 0u;
 800665a:	f880 60a8 	strb.w	r6, [r0, #168]	; 0xa8
  TIMx->CCER &= ( ~TIMxCCER_MASK_CH123 );
 800665e:	6a2a      	ldr	r2, [r5, #32]
  pHandle->wPhaseAOffset = 0u;
 8006660:	66c6      	str	r6, [r0, #108]	; 0x6c
  TIMx->CCER &= ( ~TIMxCCER_MASK_CH123 );
 8006662:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
 8006666:	f022 0205 	bic.w	r2, r2, #5
{
 800666a:	4604      	mov	r4, r0
  pHandle->wPhaseBOffset = 0u;
 800666c:	6706      	str	r6, [r0, #112]	; 0x70
  pHandle->wPhaseCOffset = 0u;
 800666e:	6746      	str	r6, [r0, #116]	; 0x74
  TIMx->CCER &= ( ~TIMxCCER_MASK_CH123 );
 8006670:	622a      	str	r2, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_HFCurrentsCalibrationAB;
 8006672:	6047      	str	r7, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSect1 = &R3_1_F30X_SetADCSampPointCalibration;
 8006674:	6183      	str	r3, [r0, #24]
  pHandle->_Super.pFctSetADCSampPointSect2 = &R3_1_F30X_SetADCSampPointCalibration;
 8006676:	61c3      	str	r3, [r0, #28]
  pHandle->_Super.pFctSetADCSampPointSect3 = &R3_1_F30X_SetADCSampPointCalibration;
 8006678:	6203      	str	r3, [r0, #32]
  pHandle->_Super.pFctSetADCSampPointSect4 = &R3_1_F30X_SetADCSampPointCalibration;
 800667a:	6243      	str	r3, [r0, #36]	; 0x24
  pHandle->_Super.pFctSetADCSampPointSect5 = &R3_1_F30X_SetADCSampPointCalibration;
 800667c:	6283      	str	r3, [r0, #40]	; 0x28
  pHandle->_Super.pFctSetADCSampPointSect6 = &R3_1_F30X_SetADCSampPointCalibration;
 800667e:	62c3      	str	r3, [r0, #44]	; 0x2c
  pHandle->wADC1_JSQR = pHandle->wADC_JSQR_phAB;
 8006680:	67c1      	str	r1, [r0, #124]	; 0x7c
  R3_1_F30X_SwitchOnPWM( &pHandle->_Super );
 8006682:	f7ff fa93 	bl	8005bac <R3_1_F30X_SwitchOnPWM>
  hMaxPeriodsNumber = ( NB_CONVERSIONS + 1u ) * ( ( ( uint16_t )( pHandle->pParams_str->bRepetitionCounter ) + 1u ) >>
 8006686:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800668a:	79db      	ldrb	r3, [r3, #7]
 800668c:	3301      	adds	r3, #1
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	eb03 1303 	add.w	r3, r3, r3, lsl #4
  TIMx->SR = ( uint16_t )~LL_TIM_SR_CC1IF;
 8006694:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  hMaxPeriodsNumber = ( NB_CONVERSIONS + 1u ) * ( ( ( uint16_t )( pHandle->pParams_str->bRepetitionCounter ) + 1u ) >>
 8006698:	b29f      	uxth	r7, r3
  TIMx->SR = ( uint16_t )~LL_TIM_SR_CC1IF;
 800669a:	612a      	str	r2, [r5, #16]
  while ( pHandle->bIndex < NB_CONVERSIONS )
 800669c:	e002      	b.n	80066a4 <R3_1_F30X_CurrentReadingCalibration+0x5c>
    if ( TIMx->SR & LL_TIM_SR_CC1IF )
 800669e:	692b      	ldr	r3, [r5, #16]
 80066a0:	0799      	lsls	r1, r3, #30
 80066a2:	d45d      	bmi.n	8006760 <R3_1_F30X_CurrentReadingCalibration+0x118>
  while ( pHandle->bIndex < NB_CONVERSIONS )
 80066a4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d9f8      	bls.n	800669e <R3_1_F30X_CurrentReadingCalibration+0x56>
  R3_1_F30X_SwitchOffPWM( &pHandle->_Super );
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff facd 	bl	8005c4c <R3_1_F30X_SwitchOffPWM>
  pHandle->bIndex = 0u;
 80066b2:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_HFCurrentsCalibrationC;
 80066b4:	4a39      	ldr	r2, [pc, #228]	; (800679c <R3_1_F30X_CurrentReadingCalibration+0x154>)
  pHandle->wADC1_JSQR = pHandle->wADC_JSQR_phC;
 80066b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_HFCurrentsCalibrationC;
 80066ba:	6062      	str	r2, [r4, #4]
  pHandle->bIndex = 0u;
 80066bc:	f884 60a8 	strb.w	r6, [r4, #168]	; 0xa8
  pHandle->wADC1_JSQR = pHandle->wADC_JSQR_phC;
 80066c0:	67e3      	str	r3, [r4, #124]	; 0x7c
  R3_1_F30X_SwitchOnPWM( &pHandle->_Super );
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7ff fa72 	bl	8005bac <R3_1_F30X_SwitchOnPWM>
  TIMx->SR = ( uint16_t )~LL_TIM_SR_CC1IF;
 80066c8:	f64f 71fd 	movw	r1, #65533	; 0xfffd
  hCalibrationPeriodCounter = 0u;
 80066cc:	4632      	mov	r2, r6
  TIMx->SR = ( uint16_t )~LL_TIM_SR_CC1IF;
 80066ce:	6129      	str	r1, [r5, #16]
  while ( pHandle->bIndex < NB_CONVERSIONS )
 80066d0:	e002      	b.n	80066d8 <R3_1_F30X_CurrentReadingCalibration+0x90>
    if ( TIMx->SR & LL_TIM_SR_CC1IF )
 80066d2:	692b      	ldr	r3, [r5, #16]
 80066d4:	079b      	lsls	r3, r3, #30
 80066d6:	d450      	bmi.n	800677a <R3_1_F30X_CurrentReadingCalibration+0x132>
  while ( pHandle->bIndex < NB_CONVERSIONS )
 80066d8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80066dc:	2b0f      	cmp	r3, #15
 80066de:	d9f8      	bls.n	80066d2 <R3_1_F30X_CurrentReadingCalibration+0x8a>
  R3_1_F30X_SwitchOffPWM( &pHandle->_Super );
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7ff fab3 	bl	8005c4c <R3_1_F30X_SwitchOffPWM>
  pHandle->wPhaseAOffset >>= 4;
 80066e6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  pHandle->wPhaseBOffset >>= 4;
 80066e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
  pHandle->wPhaseCOffset >>= 4;
 80066ea:	6f61      	ldr	r1, [r4, #116]	; 0x74
  TIMx->CCMR1 &= 0xF7F7u;
 80066ec:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_GetPhaseCurrents;
 80066ee:	4a2c      	ldr	r2, [pc, #176]	; (80067a0 <R3_1_F30X_CurrentReadingCalibration+0x158>)
 80066f0:	6062      	str	r2, [r4, #4]
  TIMx->CCMR1 &= 0xF7F7u;
 80066f2:	f24f 77f7 	movw	r7, #63479	; 0xf7f7
  pHandle->wPhaseAOffset >>= 4;
 80066f6:	0936      	lsrs	r6, r6, #4
  pHandle->wPhaseBOffset >>= 4;
 80066f8:	0900      	lsrs	r0, r0, #4
  pHandle->wPhaseCOffset >>= 4;
 80066fa:	0909      	lsrs	r1, r1, #4
  pHandle->_Super.pFctSetADCSampPointSect3 = &R3_1_F30X_SetADCSampPointSect3;
 80066fc:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <R3_1_F30X_CurrentReadingCalibration+0x15c>)
  pHandle->wPhaseAOffset >>= 4;
 80066fe:	66e6      	str	r6, [r4, #108]	; 0x6c
  pHandle->wPhaseBOffset >>= 4;
 8006700:	6720      	str	r0, [r4, #112]	; 0x70
  pHandle->wPhaseCOffset >>= 4;
 8006702:	6761      	str	r1, [r4, #116]	; 0x74
  pHandle->_Super.pFctSetADCSampPointSect3 = &R3_1_F30X_SetADCSampPointSect3;
 8006704:	6222      	str	r2, [r4, #32]
  TIMx->CCMR1 &= 0xF7F7u;
 8006706:	403b      	ands	r3, r7
  pHandle->wADC1_JSQR = pHandle->wADC_JSQR_phAB;
 8006708:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  pHandle->_Super.pFctSetADCSampPointSect6 = &R3_1_F30X_SetADCSampPointSect6;
 800670c:	4926      	ldr	r1, [pc, #152]	; (80067a8 <R3_1_F30X_CurrentReadingCalibration+0x160>)
  pHandle->_Super.pFctSetADCSampPointSect1 = &R3_1_F30X_SetADCSampPointSect1;
 800670e:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 80067b4 <R3_1_F30X_CurrentReadingCalibration+0x16c>
  pHandle->_Super.pFctSetADCSampPointSect2 = &R3_1_F30X_SetADCSampPointSect2;
 8006712:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80067b8 <R3_1_F30X_CurrentReadingCalibration+0x170>
  pHandle->_Super.pFctSetADCSampPointSect4 = &R3_1_F30X_SetADCSampPointSect4;
 8006716:	4e25      	ldr	r6, [pc, #148]	; (80067ac <R3_1_F30X_CurrentReadingCalibration+0x164>)
  pHandle->_Super.pFctSetADCSampPointSect5 = &R3_1_F30X_SetADCSampPointSect5;
 8006718:	4825      	ldr	r0, [pc, #148]	; (80067b0 <R3_1_F30X_CurrentReadingCalibration+0x168>)
  pHandle->_Super.pFctSetADCSampPointSect6 = &R3_1_F30X_SetADCSampPointSect6;
 800671a:	62e1      	str	r1, [r4, #44]	; 0x2c
  pHandle->wADC1_JSQR = pHandle->wADC_JSQR_phAB;
 800671c:	67e2      	str	r2, [r4, #124]	; 0x7c
  pHandle->_Super.pFctSetADCSampPointSect1 = &R3_1_F30X_SetADCSampPointSect1;
 800671e:	f8c4 e018 	str.w	lr, [r4, #24]
  pHandle->_Super.pFctSetADCSampPointSect2 = &R3_1_F30X_SetADCSampPointSect2;
 8006722:	f8c4 c01c 	str.w	ip, [r4, #28]
  pHandle->_Super.pFctSetADCSampPointSect4 = &R3_1_F30X_SetADCSampPointSect4;
 8006726:	6266      	str	r6, [r4, #36]	; 0x24
  pHandle->_Super.pFctSetADCSampPointSect5 = &R3_1_F30X_SetADCSampPointSect5;
 8006728:	62a0      	str	r0, [r4, #40]	; 0x28
  TIMx->CCMR1 &= 0xF7F7u;
 800672a:	61ab      	str	r3, [r5, #24]
  TIMx->CCMR2 &= 0xF7F7u;
 800672c:	69ea      	ldr	r2, [r5, #28]
  TIMx->CCR1 = pHandle->Half_PWMPeriod;
 800672e:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
  TIMx->CCMR2 &= 0xF7F7u;
 8006732:	403a      	ands	r2, r7
 8006734:	61ea      	str	r2, [r5, #28]
  TIMx->CCR1 = pHandle->Half_PWMPeriod;
 8006736:	636b      	str	r3, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->Half_PWMPeriod;
 8006738:	63ab      	str	r3, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->Half_PWMPeriod;
 800673a:	63eb      	str	r3, [r5, #60]	; 0x3c
  TIMx->CCMR1 |= 0x0808u;
 800673c:	69aa      	ldr	r2, [r5, #24]
 800673e:	f640 0108 	movw	r1, #2056	; 0x808
 8006742:	430a      	orrs	r2, r1
 8006744:	61aa      	str	r2, [r5, #24]
  TIMx->CCMR2 |= 0x0808u;
 8006746:	69eb      	ldr	r3, [r5, #28]
 8006748:	430b      	orrs	r3, r1
 800674a:	61eb      	str	r3, [r5, #28]
  TIMx->CCER |= TIMxCCER_MASK_CH123;
 800674c:	6a2b      	ldr	r3, [r5, #32]
 800674e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006752:	f043 0305 	orr.w	r3, r3, #5
  pHandle->BrakeActionLock = false;
 8006756:	2200      	movs	r2, #0
  TIMx->CCER |= TIMxCCER_MASK_CH123;
 8006758:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 800675a:	f884 20ae 	strb.w	r2, [r4, #174]	; 0xae
 800675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hCalibrationPeriodCounter++;
 8006760:	3601      	adds	r6, #1
 8006762:	b2b6      	uxth	r6, r6
      if ( hCalibrationPeriodCounter >= hMaxPeriodsNumber )
 8006764:	42b7      	cmp	r7, r6
      TIMx->SR = ( uint16_t )~LL_TIM_SR_CC1IF;
 8006766:	612a      	str	r2, [r5, #16]
      if ( hCalibrationPeriodCounter >= hMaxPeriodsNumber )
 8006768:	d89c      	bhi.n	80066a4 <R3_1_F30X_CurrentReadingCalibration+0x5c>
        if ( pHandle->bIndex < NB_CONVERSIONS )
 800676a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d898      	bhi.n	80066a4 <R3_1_F30X_CurrentReadingCalibration+0x5c>
          pHandle->_Super.SWerror = 1u;
 8006772:	2301      	movs	r3, #1
 8006774:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          break;
 8006778:	e798      	b.n	80066ac <R3_1_F30X_CurrentReadingCalibration+0x64>
      hCalibrationPeriodCounter++;
 800677a:	3201      	adds	r2, #1
 800677c:	b292      	uxth	r2, r2
      if ( hCalibrationPeriodCounter >= hMaxPeriodsNumber )
 800677e:	4297      	cmp	r7, r2
      TIMx->SR = ( uint16_t )~LL_TIM_SR_CC1IF;
 8006780:	6129      	str	r1, [r5, #16]
      if ( hCalibrationPeriodCounter >= hMaxPeriodsNumber )
 8006782:	d8a9      	bhi.n	80066d8 <R3_1_F30X_CurrentReadingCalibration+0x90>
        if ( pHandle->bIndex < NB_CONVERSIONS )
 8006784:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8006788:	2b0f      	cmp	r3, #15
 800678a:	d8a5      	bhi.n	80066d8 <R3_1_F30X_CurrentReadingCalibration+0x90>
          pHandle->_Super.SWerror = 1u;
 800678c:	2301      	movs	r3, #1
 800678e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          break;
 8006792:	e7a5      	b.n	80066e0 <R3_1_F30X_CurrentReadingCalibration+0x98>
 8006794:	08005aed 	.word	0x08005aed
 8006798:	08005f55 	.word	0x08005f55
 800679c:	08005b2d 	.word	0x08005b2d
 80067a0:	0800591d 	.word	0x0800591d
 80067a4:	0800611d 	.word	0x0800611d
 80067a8:	08005d61 	.word	0x08005d61
 80067ac:	080061d1 	.word	0x080061d1
 80067b0:	08006285 	.word	0x08006285
 80067b4:	08005fb5 	.word	0x08005fb5
 80067b8:	08006069 	.word	0x08006069

080067bc <R3_1_F30X_TIMx_UP_IRQHandler>:
}
 80067bc:	3054      	adds	r0, #84	; 0x54
 80067be:	4770      	bx	lr

080067c0 <R3_1_F30X_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80067c0:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 80067c4:	b923      	cbnz	r3, 80067d0 <R3_1_F30X_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80067c6:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 80067ca:	7c1a      	ldrb	r2, [r3, #16]
 80067cc:	2a02      	cmp	r2, #2
 80067ce:	d004      	beq.n	80067da <R3_1_F30X_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
}
 80067d6:	3054      	adds	r0, #84	; 0x54
 80067d8:	4770      	bx	lr
{
 80067da:	b470      	push	{r4, r5, r6}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80067dc:	69d9      	ldr	r1, [r3, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80067de:	695d      	ldr	r5, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80067e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80067e2:	8b1e      	ldrh	r6, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80067e4:	8c1c      	ldrh	r4, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e8:	62ae      	str	r6, [r5, #40]	; 0x28
 80067ea:	628c      	str	r4, [r1, #40]	; 0x28
 80067ec:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
}
 80067f4:	bc70      	pop	{r4, r5, r6}
 80067f6:	3054      	adds	r0, #84	; 0x54
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <R3_1_F30X_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80067fc:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
{
 8006800:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006802:	68d0      	ldr	r0, [r2, #12]
 8006804:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8006806:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800680c:	6442      	str	r2, [r0, #68]	; 0x44
}
 800680e:	f103 0054 	add.w	r0, r3, #84	; 0x54
  pHandle->OverVoltageFlag = true;
 8006812:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
  pHandle->BrakeActionLock = true;
 8006816:	f883 10ae 	strb.w	r1, [r3, #174]	; 0xae
}
 800681a:	4770      	bx	lr

0800681c <R3_1_F30X_IsOverCurrentOccurred>:
{
 800681c:	4602      	mov	r2, r0
  if ( pHandle->OverVoltageFlag == true )
 800681e:	f890 00ad 	ldrb.w	r0, [r0, #173]	; 0xad
 8006822:	b160      	cbz	r0, 800683e <R3_1_F30X_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8006824:	2300      	movs	r3, #0
 8006826:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
 800682a:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 800682c:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800682e:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 8006832:	b11b      	cbz	r3, 800683c <R3_1_F30X_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8006834:	2300      	movs	r3, #0
    retVal |= MC_BREAK_IN;
 8006836:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8006838:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
}
 800683c:	4770      	bx	lr
 800683e:	2140      	movs	r1, #64	; 0x40
 8006840:	e7f5      	b.n	800682e <R3_1_F30X_IsOverCurrentOccurred+0x12>
 8006842:	bf00      	nop

08006844 <R3_1_F30X_RLDetectionModeEnable>:
{
 8006844:	b4f0      	push	{r4, r5, r6, r7}
  if ( pHandle->_Super.RLDetectionMode == false )
 8006846:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
 800684a:	2d00      	cmp	r5, #0
 800684c:	d13e      	bne.n	80068cc <R3_1_F30X_RLDetectionModeEnable+0x88>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800684e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8006852:	68e3      	ldr	r3, [r4, #12]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006854:	7c27      	ldrb	r7, [r4, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006856:	699a      	ldr	r2, [r3, #24]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800685e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006862:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006866:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006868:	6a1a      	ldr	r2, [r3, #32]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006870:	6a1a      	ldr	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006872:	2f01      	cmp	r7, #1
 8006874:	f022 0204 	bic.w	r2, r2, #4
 8006878:	621a      	str	r2, [r3, #32]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800687a:	f103 0618 	add.w	r6, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 800687e:	635d      	str	r5, [r3, #52]	; 0x34
 8006880:	d031      	beq.n	80068e6 <R3_1_F30X_RLDetectionModeEnable+0xa2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006882:	2f02      	cmp	r7, #2
 8006884:	d040      	beq.n	8006908 <R3_1_F30X_RLDetectionModeEnable+0xc4>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006886:	6872      	ldr	r2, [r6, #4]
 8006888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800688c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006890:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006894:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800689c:	621a      	str	r2, [r3, #32]
 800689e:	6a1a      	ldr	r2, [r3, #32]
 80068a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a4:	621a      	str	r2, [r3, #32]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068ac:	f042 0220 	orr.w	r2, r2, #32
 80068b0:	605a      	str	r2, [r3, #4]
    ADC_InjectedInitStruct.ADC_InjecSequence1 = pHandle->pParams_str->bIbChannel;
 80068b2:	7964      	ldrb	r4, [r4, #5]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 80068b4:	68ca      	ldr	r2, [r1, #12]
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence2 ) << 14 ) |
 80068b6:	03a3      	lsls	r3, r4, #14
 80068b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
                           ( uint32_t )( ( ADC_InjectedInitStruct->ADC_InjecSequence1 ) << 8 ) |
 80068bc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80068c0:	60ca      	str	r2, [r1, #12]
 80068c2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
  tmpreg1 = ADCx->JSQR;
 80068c6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    pHandle->wADC_JSQR_RL_Detection_phB = SingleADC_InjectedConfig( ADCx, &ADC_InjectedInitStruct );
 80068c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_RLGetPhaseCurrents;
 80068cc:	4b17      	ldr	r3, [pc, #92]	; (800692c <R3_1_F30X_RLDetectionModeEnable+0xe8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_F30X_RLTurnOnLowSides;
 80068ce:	4c18      	ldr	r4, [pc, #96]	; (8006930 <R3_1_F30X_RLDetectionModeEnable+0xec>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_F30X_RLSwitchOnPWM;
 80068d0:	4918      	ldr	r1, [pc, #96]	; (8006934 <R3_1_F30X_RLDetectionModeEnable+0xf0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_F30X_SwitchOffPWM;
 80068d2:	4a19      	ldr	r2, [pc, #100]	; (8006938 <R3_1_F30X_RLDetectionModeEnable+0xf4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_RLGetPhaseCurrents;
 80068d4:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 80068d6:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_F30X_RLTurnOnLowSides;
 80068d8:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_F30X_RLSwitchOnPWM;
 80068da:	60c1      	str	r1, [r0, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_F30X_SwitchOffPWM;
 80068dc:	6082      	str	r2, [r0, #8]
  pHandle->_Super.RLDetectionMode = true;
 80068de:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
}
 80068e2:	bcf0      	pop	{r4, r5, r6, r7}
 80068e4:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80068ec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80068f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	f022 0210 	bic.w	r2, r2, #16
 80068fc:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006904:	621a      	str	r2, [r3, #32]
 8006906:	e7be      	b.n	8006886 <R3_1_F30X_RLDetectionModeEnable+0x42>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800690e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006912:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006916:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006918:	6a1a      	ldr	r2, [r3, #32]
 800691a:	f042 0210 	orr.w	r2, r2, #16
 800691e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	621a      	str	r2, [r3, #32]
 8006928:	e7ad      	b.n	8006886 <R3_1_F30X_RLDetectionModeEnable+0x42>
 800692a:	bf00      	nop
 800692c:	08005e15 	.word	0x08005e15
 8006930:	08005ea1 	.word	0x08005ea1
 8006934:	08005edd 	.word	0x08005edd
 8006938:	08005c4d 	.word	0x08005c4d

0800693c <R3_1_F30X_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 800693c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8006940:	2b00      	cmp	r3, #0
 8006942:	d04a      	beq.n	80069da <R3_1_F30X_RLDetectionModeDisable+0x9e>
{
 8006944:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006946:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 800694a:	68cb      	ldr	r3, [r1, #12]
    while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	06d4      	lsls	r4, r2, #27
 8006950:	d5fc      	bpl.n	800694c <R3_1_F30X_RLDetectionModeDisable+0x10>
    while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	06d2      	lsls	r2, r2, #27
 8006956:	d4fc      	bmi.n	8006952 <R3_1_F30X_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->bRepetitionCounter;
 8006958:	79ca      	ldrb	r2, [r1, #7]
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	4d46      	ldr	r5, [pc, #280]	; (8006a78 <R3_1_F30X_RLDetectionModeDisable+0x13c>)
    if ( ( pHandle->pParams_str-> LowSideOutputs ) == LS_PWM_TIMER )
 8006960:	7c0c      	ldrb	r4, [r1, #16]
 8006962:	402a      	ands	r2, r5
 8006964:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006968:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	2c01      	cmp	r4, #1
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	621a      	str	r2, [r3, #32]
 8006974:	d032      	beq.n	80069dc <R3_1_F30X_RLDetectionModeDisable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006976:	2c02      	cmp	r4, #2
 8006978:	d057      	beq.n	8006a2a <R3_1_F30X_RLDetectionModeDisable+0xee>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800697a:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 800697e:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006980:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006982:	699c      	ldr	r4, [r3, #24]
 8006984:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006988:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800698c:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006990:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006992:	6a1c      	ldr	r4, [r3, #32]
 8006994:	f044 0410 	orr.w	r4, r4, #16
 8006998:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800699c:	69dc      	ldr	r4, [r3, #28]
 800699e:	402c      	ands	r4, r5
 80069a0:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80069a4:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80069a6:	6a1c      	ldr	r4, [r3, #32]
 80069a8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80069ac:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80069ae:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80069b0:	685a      	ldr	r2, [r3, #4]
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 80069b2:	6809      	ldr	r1, [r1, #0]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_GetPhaseCurrents;
 80069b4:	4f31      	ldr	r7, [pc, #196]	; (8006a7c <R3_1_F30X_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_F30X_TurnOnLowSides;
 80069b6:	4e32      	ldr	r6, [pc, #200]	; (8006a80 <R3_1_F30X_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_F30X_SwitchOnPWM;
 80069b8:	4d32      	ldr	r5, [pc, #200]	; (8006a84 <R3_1_F30X_RLDetectionModeDisable+0x148>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_F30X_SwitchOffPWM;
 80069ba:	4c33      	ldr	r4, [pc, #204]	; (8006a88 <R3_1_F30X_RLDetectionModeDisable+0x14c>)
 80069bc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	68cb      	ldr	r3, [r1, #12]
 80069c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069c8:	60cb      	str	r3, [r1, #12]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_F30X_GetPhaseCurrents;
 80069ca:	6047      	str	r7, [r0, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_F30X_TurnOnLowSides;
 80069cc:	6146      	str	r6, [r0, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_F30X_SwitchOnPWM;
 80069ce:	60c5      	str	r5, [r0, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_F30X_SwitchOffPWM;
 80069d0:	6084      	str	r4, [r0, #8]
}
 80069d2:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->_Super.RLDetectionMode = false;
 80069d4:	2200      	movs	r2, #0
 80069d6:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
}
 80069da:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80069dc:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 80069de:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 80069e2:	f044 0404 	orr.w	r4, r4, #4
 80069e6:	0852      	lsrs	r2, r2, #1
 80069e8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069ea:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80069ec:	699c      	ldr	r4, [r3, #24]
 80069ee:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80069f2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80069f6:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80069fa:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80069fc:	6a1c      	ldr	r4, [r3, #32]
 80069fe:	f044 0410 	orr.w	r4, r4, #16
 8006a02:	621c      	str	r4, [r3, #32]
 8006a04:	6a1c      	ldr	r4, [r3, #32]
 8006a06:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006a0a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a0e:	69dc      	ldr	r4, [r3, #28]
 8006a10:	402c      	ands	r4, r5
 8006a12:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006a16:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006a18:	6a1c      	ldr	r4, [r3, #32]
 8006a1a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006a1e:	621c      	str	r4, [r3, #32]
 8006a20:	6a1c      	ldr	r4, [r3, #32]
 8006a22:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8006a26:	621c      	str	r4, [r3, #32]
 8006a28:	e7c1      	b.n	80069ae <R3_1_F30X_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a2a:	6a1c      	ldr	r4, [r3, #32]
 8006a2c:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 8006a30:	f024 0404 	bic.w	r4, r4, #4
 8006a34:	0852      	lsrs	r2, r2, #1
 8006a36:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006a38:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a3a:	699c      	ldr	r4, [r3, #24]
 8006a3c:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006a40:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006a44:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006a48:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a4a:	6a1c      	ldr	r4, [r3, #32]
 8006a4c:	f044 0410 	orr.w	r4, r4, #16
 8006a50:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a52:	6a1c      	ldr	r4, [r3, #32]
 8006a54:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8006a58:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a5c:	69dc      	ldr	r4, [r3, #28]
 8006a5e:	402c      	ands	r4, r5
 8006a60:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006a64:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006a66:	6a1c      	ldr	r4, [r3, #32]
 8006a68:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006a6c:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a6e:	6a1c      	ldr	r4, [r3, #32]
 8006a70:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006a74:	621c      	str	r4, [r3, #32]
 8006a76:	e79a      	b.n	80069ae <R3_1_F30X_RLDetectionModeDisable+0x72>
 8006a78:	fffeff8c 	.word	0xfffeff8c
 8006a7c:	0800591d 	.word	0x0800591d
 8006a80:	08005b65 	.word	0x08005b65
 8006a84:	08005bad 	.word	0x08005bad
 8006a88:	08005c4d 	.word	0x08005c4d

08006a8c <R3_1_F30X_RLDetectionModeSetDuty>:
  uint32_t val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006a8c:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
 8006a90:	4602      	mov	r2, r0
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC_JSQR_RL_Detection_phB;
 8006a92:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
{
 8006a96:	b470      	push	{r4, r5, r6}
  uint32_t val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006a98:	fb01 f103 	mul.w	r1, r1, r3
  pHandle->pParams_str->TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8006a9c:	68c4      	ldr	r4, [r0, #12]
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC_JSQR_RL_Detection_phB;
 8006a9e:	6806      	ldr	r6, [r0, #0]
 8006aa0:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  if ( pHandle->_Super.SWerror == 1u )
 8006aa4:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
  uint32_t val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006aa8:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.hCntPhA = ( uint16_t )( val );
 8006aaa:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
  pHandle->pParams_str->ADCx->JSQR = pHandle->wADC_JSQR_RL_Detection_phB;
 8006aae:	64f5      	str	r5, [r6, #76]	; 0x4c
  pHandle->pParams_str->TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8006ab0:	6361      	str	r1, [r4, #52]	; 0x34
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8006ab2:	6923      	ldr	r3, [r4, #16]
  if ( pHandle->_Super.SWerror == 1u )
 8006ab4:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006ab6:	bf0a      	itet	eq
 8006ab8:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8006aba:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 8006abe:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 8006ac2:	bc70      	pop	{r4, r5, r6}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
void RVBS_Init( RDivider_Handle_t * pHandle )
{
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	4604      	mov	r4, r0
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006acc:	300c      	adds	r0, #12
 8006ace:	f7fa ffd5 	bl	8001a7c <RCM_RegisterRegConv>
void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006ad2:	8b61      	ldrh	r1, [r4, #26]
 8006ad4:	8ba2      	ldrh	r2, [r4, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006ad6:	8b23      	ldrh	r3, [r4, #24]
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006ad8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006adc:	4411      	add	r1, r2
 8006ade:	f3c1 014f 	ubfx	r1, r1, #1, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006ae2:	b143      	cbz	r3, 8006af6 <RVBS_Init+0x2e>
 8006ae4:	6a20      	ldr	r0, [r4, #32]
 8006ae6:	2300      	movs	r3, #0
  {
    pHandle->aBuffer[index] = aux;
 8006ae8:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006aec:	3301      	adds	r3, #1
 8006aee:	8b22      	ldrh	r2, [r4, #24]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d8f8      	bhi.n	8006ae8 <RVBS_Init+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.LatestConv = aux;
 8006afc:	80a1      	strh	r1, [r4, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8006afe:	80e1      	strh	r1, [r4, #6]
}
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	bf00      	nop

08006b04 <RVBS_CalcAvVbusFilt>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
uint16_t RVBS_CalcAvVbusFilt( RDivider_Handle_t * pHandle )
{
 8006b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tot = 0u;
 8006b08:	2600      	movs	r6, #0
{
 8006b0a:	4607      	mov	r7, r0
  uint16_t max = 0, min = 0;
 8006b0c:	4635      	mov	r5, r6
 8006b0e:	46b0      	mov	r8, r6
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006b10:	4634      	mov	r4, r6
 8006b12:	46b2      	mov	sl, r6
    if ( hAux != 0xFFFFu )
 8006b14:	f64f 79ff 	movw	r9, #65535	; 0xffff
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006b18:	8b3b      	ldrh	r3, [r7, #24]
 8006b1a:	459a      	cmp	sl, r3
 8006b1c:	d218      	bcs.n	8006b50 <RVBS_CalcAvVbusFilt+0x4c>
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006b1e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8006b22:	f7fb f86f 	bl	8001c04 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006b26:	4548      	cmp	r0, r9
 8006b28:	d0f6      	beq.n	8006b18 <RVBS_CalcAvVbusFilt+0x14>
 8006b2a:	4285      	cmp	r5, r0
 8006b2c:	bf28      	it	cs
 8006b2e:	4605      	movcs	r5, r0
 8006b30:	4580      	cmp	r8, r0
 8006b32:	bf38      	it	cc
 8006b34:	4680      	movcc	r8, r0
      if ( vindex == 0 )
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d039      	beq.n	8006bae <RVBS_CalcAvVbusFilt+0xaa>
 8006b3a:	b2ad      	uxth	r5, r5
 8006b3c:	fa1f f888 	uxth.w	r8, r8
      vindex++;
 8006b40:	3401      	adds	r4, #1
 8006b42:	b2e4      	uxtb	r4, r4
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006b44:	8b3b      	ldrh	r3, [r7, #24]
 8006b46:	fa1f fa84 	uxth.w	sl, r4
 8006b4a:	459a      	cmp	sl, r3
      tot += hAux;
 8006b4c:	4406      	add	r6, r0
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006b4e:	d3e6      	bcc.n	8006b1e <RVBS_CalcAvVbusFilt+0x1a>
  tot -= max;
 8006b50:	eba6 0608 	sub.w	r6, r6, r8
  tot -= min;
 8006b54:	1b75      	subs	r5, r6, r5
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 8006b56:	3b02      	subs	r3, #2
  uint16_t hAux;
  uint8_t i;

  hAux = RVBS_ConvertVbusFiltrered( pHandle );

  if ( hAux != 0xFFFF )
 8006b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 8006b5c:	fbb5 f5f3 	udiv	r5, r5, r3
 8006b60:	b2ad      	uxth	r5, r5
  if ( hAux != 0xFFFF )
 8006b62:	4295      	cmp	r5, r2
 8006b64:	d037      	beq.n	8006bd6 <RVBS_CalcAvVbusFilt+0xd2>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 8006b66:	6a3c      	ldr	r4, [r7, #32]
 8006b68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006b6c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
    wtemp = 0;
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006b70:	8b38      	ldrh	r0, [r7, #24]
 8006b72:	b1f8      	cbz	r0, 8006bb4 <RVBS_CalcAvVbusFilt+0xb0>
 8006b74:	2300      	movs	r3, #0
 8006b76:	461a      	mov	r2, r3
    {
      wtemp += pHandle->aBuffer[i];
 8006b78:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	4283      	cmp	r3, r0
      wtemp += pHandle->aBuffer[i];
 8006b82:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006b84:	d3f8      	bcc.n	8006b78 <RVBS_CalcAvVbusFilt+0x74>
    }
    wtemp /= pHandle->LowPassFilterBW;
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
    pHandle->_Super.LatestConv = hAux;

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006b86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    wtemp /= pHandle->LowPassFilterBW;
 8006b8a:	fbb2 f2f0 	udiv	r2, r2, r0
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006b8e:	3801      	subs	r0, #1
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006b90:	b292      	uxth	r2, r2
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006b92:	4283      	cmp	r3, r0
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006b94:	80fa      	strh	r2, [r7, #6]
    pHandle->_Super.LatestConv = hAux;
 8006b96:	80bd      	strh	r5, [r7, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006b98:	da0f      	bge.n	8006bba <RVBS_CalcAvVbusFilt+0xb6>
    {
      pHandle->index++;
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  */
uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006ba0:	8b7b      	ldrh	r3, [r7, #26]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d20f      	bcs.n	8006bc6 <RVBS_CalcAvVbusFilt+0xc2>
  {
    fault = MC_OVER_VOLT;
 8006ba6:	2002      	movs	r0, #2
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006ba8:	8138      	strh	r0, [r7, #8]
}
 8006baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ( vindex == 0 )
 8006bae:	4605      	mov	r5, r0
 8006bb0:	4680      	mov	r8, r0
 8006bb2:	e7c5      	b.n	8006b40 <RVBS_CalcAvVbusFilt+0x3c>
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	80f8      	strh	r0, [r7, #6]
    pHandle->_Super.LatestConv = hAux;
 8006bb8:	80bd      	strh	r5, [r7, #4]
      pHandle->index = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006bc0:	8b7b      	ldrh	r3, [r7, #26]
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d3ef      	bcc.n	8006ba6 <RVBS_CalcAvVbusFilt+0xa2>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006bc6:	8bb8      	ldrh	r0, [r7, #28]
  {
    fault = MC_UNDER_VOLT;
 8006bc8:	4290      	cmp	r0, r2
 8006bca:	bf8c      	ite	hi
 8006bcc:	2004      	movhi	r0, #4
 8006bce:	2000      	movls	r0, #0
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006bd0:	8138      	strh	r0, [r7, #8]
}
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	e7e2      	b.n	8006ba0 <RVBS_CalcAvVbusFilt+0x9c>
 8006bda:	bf00      	nop

08006bdc <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006bdc:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006bde:	2201      	movs	r2, #1
 8006be0:	6142      	str	r2, [r0, #20]
  pHandle->Ext = 0;
 8006be2:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 8006be4:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 8006be6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006be8:	6103      	str	r3, [r0, #16]
 8006bea:	4770      	bx	lr

08006bec <REMNG_Calc>:
  int32_t current_ref;

  current_ref = pHandle->Ext;

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006bec:	68c2      	ldr	r2, [r0, #12]
  current_ref = pHandle->Ext;
 8006bee:	6883      	ldr	r3, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8006bf0:	2a01      	cmp	r2, #1
 8006bf2:	d90b      	bls.n	8006c0c <REMNG_Calc+0x20>
{
 8006bf4:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8006bf6:	6904      	ldr	r4, [r0, #16]
 8006bf8:	6941      	ldr	r1, [r0, #20]
 8006bfa:	4423      	add	r3, r4

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8006bfc:	3a01      	subs	r2, #1
 8006bfe:	60c2      	str	r2, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8006c00:	6083      	str	r3, [r0, #8]
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8006c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c06:	fb93 f0f1 	sdiv	r0, r3, r1
 8006c0a:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006c0c:	6941      	ldr	r1, [r0, #20]
  else if ( pHandle->RampRemainingStep == 1u )
 8006c0e:	d104      	bne.n	8006c1a <REMNG_Calc+0x2e>
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006c10:	6843      	ldr	r3, [r0, #4]
    pHandle->RampRemainingStep = 0u;
 8006c12:	2200      	movs	r2, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006c14:	fb03 f301 	mul.w	r3, r3, r1
    pHandle->RampRemainingStep = 0u;
 8006c18:	60c2      	str	r2, [r0, #12]
  pHandle->Ext = current_ref;
 8006c1a:	6083      	str	r3, [r0, #8]
}
 8006c1c:	fb93 f0f1 	sdiv	r0, r3, r1
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop

08006c24 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 8006c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  if ( Durationms == 0u )
 8006c28:	b9da      	cbnz	r2, 8006c62 <REMNG_ExecRamp+0x3e>
{
 8006c2a:	2301      	movs	r3, #1
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8006c2c:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006c30:	461c      	mov	r4, r3
    aux = -Target;
 8006c32:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
 8006c36:	e002      	b.n	8006c3e <REMNG_ExecRamp+0x1a>
 8006c38:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d074      	beq.n	8006d28 <REMNG_ExecRamp+0x104>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006c3e:	f1c3 021f 	rsb	r2, r3, #31
 8006c42:	fa04 f202 	lsl.w	r2, r4, r2
    if ( TargetAbs >= limit )
 8006c46:	42aa      	cmp	r2, r5
 8006c48:	d8f6      	bhi.n	8006c38 <REMNG_ExecRamp+0x14>
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	409c      	lsls	r4, r3
    pHandle->RampRemainingStep = 0u;
 8006c4e:	2200      	movs	r2, #0
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006c50:	fa01 f303 	lsl.w	r3, r1, r3
 8006c54:	6083      	str	r3, [r0, #8]
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8006c56:	6144      	str	r4, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8006c58:	60c2      	str	r2, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006c5a:	6102      	str	r2, [r0, #16]
}
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006c62:	6884      	ldr	r4, [r0, #8]
 8006c64:	6943      	ldr	r3, [r0, #20]
 8006c66:	fb94 f3f3 	sdiv	r3, r4, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8006c6a:	1acf      	subs	r7, r1, r3
  for ( i = 1u; i < 32u; i++ )
 8006c6c:	2401      	movs	r4, #1
    aux = -Target;
 8006c6e:	ea87 76e7 	eor.w	r6, r7, r7, asr #31
 8006c72:	eba6 76e7 	sub.w	r6, r6, r7, asr #31
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006c76:	46a6      	mov	lr, r4
 8006c78:	e002      	b.n	8006c80 <REMNG_ExecRamp+0x5c>
 8006c7a:	3401      	adds	r4, #1
  for ( i = 1u; i < 32u; i++ )
 8006c7c:	2c20      	cmp	r4, #32
 8006c7e:	d050      	beq.n	8006d22 <REMNG_ExecRamp+0xfe>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006c80:	f1c4 051f 	rsb	r5, r4, #31
 8006c84:	fa0e f505 	lsl.w	r5, lr, r5
    if ( TargetAbs >= limit )
 8006c88:	42b5      	cmp	r5, r6
 8006c8a:	d8f6      	bhi.n	8006c7a <REMNG_ExecRamp+0x56>
 8006c8c:	3c01      	subs	r4, #1
 8006c8e:	fa0e fe04 	lsl.w	lr, lr, r4
  for ( i = 1u; i < 32u; i++ )
 8006c92:	2501      	movs	r5, #1
    aux = -Target;
 8006c94:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006c98:	462c      	mov	r4, r5
    aux = -Target;
 8006c9a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 8006c9e:	e002      	b.n	8006ca6 <REMNG_ExecRamp+0x82>
 8006ca0:	3501      	adds	r5, #1
  for ( i = 1u; i < 32u; i++ )
 8006ca2:	2d20      	cmp	r5, #32
 8006ca4:	d044      	beq.n	8006d30 <REMNG_ExecRamp+0x10c>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006ca6:	f1c5 061f 	rsb	r6, r5, #31
 8006caa:	fa04 f606 	lsl.w	r6, r4, r6
    if ( TargetAbs >= limit )
 8006cae:	4566      	cmp	r6, ip
 8006cb0:	d8f6      	bhi.n	8006ca0 <REMNG_ExecRamp+0x7c>
 8006cb2:	3d01      	subs	r5, #1
 8006cb4:	fa04 f505 	lsl.w	r5, r4, r5
  for ( i = 1u; i < 32u; i++ )
 8006cb8:	2401      	movs	r4, #1
    aux = -Target;
 8006cba:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006cbe:	46a4      	mov	ip, r4
    aux = -Target;
 8006cc0:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
 8006cc4:	e002      	b.n	8006ccc <REMNG_ExecRamp+0xa8>
 8006cc6:	3401      	adds	r4, #1
  for ( i = 1u; i < 32u; i++ )
 8006cc8:	2c20      	cmp	r4, #32
 8006cca:	d027      	beq.n	8006d1c <REMNG_ExecRamp+0xf8>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006ccc:	f1c4 061f 	rsb	r6, r4, #31
 8006cd0:	fa0c f606 	lsl.w	r6, ip, r6
    if ( TargetAbs >= limit )
 8006cd4:	4546      	cmp	r6, r8
 8006cd6:	d8f6      	bhi.n	8006cc6 <REMNG_ExecRamp+0xa2>
 8006cd8:	3c01      	subs	r4, #1
 8006cda:	fa0c f404 	lsl.w	r4, ip, r4
    if ( wScalingFactor <  wScalingFactor2 )
 8006cde:	45ae      	cmp	lr, r5
 8006ce0:	d218      	bcs.n	8006d14 <REMNG_ExecRamp+0xf0>
 8006ce2:	4574      	cmp	r4, lr
 8006ce4:	bf28      	it	cs
 8006ce6:	4674      	movcs	r4, lr
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006ce8:	8806      	ldrh	r6, [r0, #0]
    aux /= 1000u;
 8006cea:	4d13      	ldr	r5, [pc, #76]	; (8006d38 <REMNG_ExecRamp+0x114>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8006cec:	6144      	str	r4, [r0, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006cee:	fb02 f206 	mul.w	r2, r2, r6
    aux /= 1000u;
 8006cf2:	fba5 5202 	umull	r5, r2, r5, r2
 8006cf6:	0992      	lsrs	r2, r2, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8006cf8:	fb04 f303 	mul.w	r3, r4, r3
    pHandle->RampRemainingStep++;
 8006cfc:	3201      	adds	r2, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8006cfe:	fb04 f407 	mul.w	r4, r4, r7
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8006d02:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = TargetFinal;
 8006d04:	6041      	str	r1, [r0, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8006d06:	fb94 f4f2 	sdiv	r4, r4, r2
    pHandle->RampRemainingStep++;
 8006d0a:	60c2      	str	r2, [r0, #12]
    pHandle->IncDecAmount = aux1;
 8006d0c:	6104      	str	r4, [r0, #16]
}
 8006d0e:	2001      	movs	r0, #1
 8006d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d14:	42ac      	cmp	r4, r5
 8006d16:	bf28      	it	cs
 8006d18:	462c      	movcs	r4, r5
 8006d1a:	e7e5      	b.n	8006ce8 <REMNG_ExecRamp+0xc4>
  for ( i = 1u; i < 32u; i++ )
 8006d1c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006d20:	e7dd      	b.n	8006cde <REMNG_ExecRamp+0xba>
 8006d22:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8006d26:	e7b4      	b.n	8006c92 <REMNG_ExecRamp+0x6e>
 8006d28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006d2c:	231f      	movs	r3, #31
 8006d2e:	e78e      	b.n	8006c4e <REMNG_ExecRamp+0x2a>
 8006d30:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006d34:	e7c0      	b.n	8006cb8 <REMNG_ExecRamp+0x94>
 8006d36:	bf00      	nop
 8006d38:	10624dd3 	.word	0x10624dd3

08006d3c <REMNG_RampCompleted>:
  if ( pHandle->RampRemainingStep == 0u )
 8006d3c:	68c0      	ldr	r0, [r0, #12]
}
 8006d3e:	fab0 f080 	clz	r0, r0
 8006d42:	0940      	lsrs	r0, r0, #5
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop

08006d48 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006d48:	f9b0 0000 	ldrsh.w	r0, [r0]
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop

08006d50 <SPD_GetAvrgMecSpeed01Hz>:
  * @retval int16_t rotor average mechanical speed (01Hz)
  */
int16_t SPD_GetAvrgMecSpeed01Hz( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeed01Hz );
}
 8006d50:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop

08006d58 <SPD_GetElSpeedDpp>:
  * @retval int16_t rotor electrical speed (Dpp)
  */
int16_t SPD_GetElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElSpeedDpp );
}
 8006d58:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeed01Hz < 0 )
 8006d60:	f9b1 3000 	ldrsh.w	r3, [r1]
  if ( hAbsMecSpeed01Hz > pHandle->hMaxReliableMecSpeed01Hz )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeed01Hz < pHandle->hMinReliableMecSpeed01Hz )
 8006d64:	89c1      	ldrh	r1, [r0, #14]
{
 8006d66:	b430      	push	{r4, r5}
  if ( *pMecSpeed01Hz < 0 )
 8006d68:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeed01Hz );
 8006d6a:	bfb8      	it	lt
 8006d6c:	425b      	neglt	r3, r3
    hAbsMecSpeed01Hz = ( uint16_t )( *pMecSpeed01Hz );
 8006d6e:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeed01Hz < pHandle->hMinReliableMecSpeed01Hz )
 8006d70:	4299      	cmp	r1, r3
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006d72:	7c04      	ldrb	r4, [r0, #16]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006d74:	7a82      	ldrb	r2, [r0, #10]
  if ( hAbsMecSpeed01Hz > pHandle->hMaxReliableMecSpeed01Hz )
 8006d76:	8985      	ldrh	r5, [r0, #12]
  if ( hAbsMecSpeed01Hz < pHandle->hMinReliableMecSpeed01Hz )
 8006d78:	d816      	bhi.n	8006da8 <SPD_IsMecSpeedReliable+0x48>
  if ( hAbsMecSpeed01Hz > pHandle->hMaxReliableMecSpeed01Hz )
 8006d7a:	42ab      	cmp	r3, r5
 8006d7c:	bf94      	ite	ls
 8006d7e:	2300      	movls	r3, #0
 8006d80:	2301      	movhi	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccel01HzP < 0 )
 8006d82:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
  else
  {
    hAbsMecAccel01HzP = ( uint16_t )( pHandle->hMecAccel01HzP );
  }

  if ( hAbsMecAccel01HzP > pHandle->hMaxReliableMecAccel01HzP )
 8006d86:	8a45      	ldrh	r5, [r0, #18]
  if ( pHandle->hMecAccel01HzP < 0 )
 8006d88:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccel01HzP );
 8006d8a:	bfb8      	it	lt
 8006d8c:	4249      	neglt	r1, r1
    hAbsMecAccel01HzP = ( uint16_t )( pHandle->hMecAccel01HzP );
 8006d8e:	b289      	uxth	r1, r1
  if ( hAbsMecAccel01HzP > pHandle->hMaxReliableMecAccel01HzP )
 8006d90:	428d      	cmp	r5, r1
 8006d92:	d30b      	bcc.n	8006dac <SPD_IsMecSpeedReliable+0x4c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006d94:	b953      	cbnz	r3, 8006dac <SPD_IsMecSpeedReliable+0x4c>
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
    {
      bSpeedErrorNumber = 0u;
 8006d96:	4294      	cmp	r4, r2
 8006d98:	bf88      	it	hi
 8006d9a:	2200      	movhi	r2, #0
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006d9c:	7282      	strb	r2, [r0, #10]

  return ( SpeedSensorReliability );
}
 8006d9e:	1b10      	subs	r0, r2, r4
 8006da0:	bf18      	it	ne
 8006da2:	2001      	movne	r0, #1
 8006da4:	bc30      	pop	{r4, r5}
 8006da6:	4770      	bx	lr
    SpeedError = true;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7ea      	b.n	8006d82 <SPD_IsMecSpeedReliable+0x22>
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006dac:	4294      	cmp	r4, r2
 8006dae:	d9f5      	bls.n	8006d9c <SPD_IsMecSpeedReliable+0x3c>
      bSpeedErrorNumber++;
 8006db0:	3201      	adds	r2, #1
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	e7f2      	b.n	8006d9c <SPD_IsMecSpeedReliable+0x3c>
 8006db6:	bf00      	nop

08006db8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeed01Hz;
  wAux *= INT16_MAX;
 8006db8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeed01Hz;
 8006dbc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  wAux *= INT16_MAX;
 8006dc0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeed01Hz;
 8006dc4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8006dc8:	b200      	sxth	r0, r0
 8006dca:	4770      	bx	lr

08006dcc <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8006dcc:	b470      	push	{r4, r5, r6}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRef01HzExt = ( int32_t )pHandle->MecSpeedRef01HzDefault * 65536;
 8006dce:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006dd2:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->Mode = pHandle->ModeDefault;
 8006dd6:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
 8006dda:	7006      	strb	r6, [r0, #0]
  pHandle->TargetFinal = 0;
 8006ddc:	2300      	movs	r3, #0
  pHandle->SpeedRef01HzExt = ( int32_t )pHandle->MecSpeedRef01HzDefault * 65536;
 8006dde:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006de0:	0424      	lsls	r4, r4, #16
  pHandle->SpeedRef01HzExt = ( int32_t )pHandle->MecSpeedRef01HzDefault * 65536;
 8006de2:	6045      	str	r5, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006de4:	6084      	str	r4, [r0, #8]
  pHandle->PISpeed = pPI;
 8006de6:	6101      	str	r1, [r0, #16]
  pHandle->SPD = SPD_Handle;
 8006de8:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 8006dea:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8006dec:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006dee:	6183      	str	r3, [r0, #24]
}
 8006df0:	bc70      	pop	{r4, r5, r6}
 8006df2:	4770      	bx	lr

08006df4 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8006df4:	6141      	str	r1, [r0, #20]
 8006df6:	4770      	bx	lr

08006df8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006df8:	6940      	ldr	r0, [r0, #20]
 8006dfa:	4770      	bx	lr

08006dfc <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006dfc:	7803      	ldrb	r3, [r0, #0]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d000      	beq.n	8006e04 <STC_Clear+0x8>
 8006e02:	4770      	bx	lr
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006e04:	6900      	ldr	r0, [r0, #16]
 8006e06:	2100      	movs	r1, #0
 8006e08:	f7fe bb9e 	b.w	8005548 <PID_SetIntegralTerm>

08006e0c <STC_GetMecSpeedRef01Hz>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
int16_t STC_GetMecSpeedRef01Hz( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRef01HzExt / 65536 ) );
 8006e0c:	6840      	ldr	r0, [r0, #4]
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	bfbc      	itt	lt
 8006e12:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006e16:	30ff      	addlt	r0, #255	; 0xff
}
 8006e18:	1400      	asrs	r0, r0, #16
 8006e1a:	4770      	bx	lr

08006e1c <STC_SetControlMode>:
  * @retval none
  */
void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006e1c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006e1e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006e20:	60c3      	str	r3, [r0, #12]
 8006e22:	4770      	bx	lr

08006e24 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006e24:	4603      	mov	r3, r0
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e26:	7800      	ldrb	r0, [r0, #0]
{
 8006e28:	b430      	push	{r4, r5}
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e2a:	b980      	cbnz	r0, 8006e4e <STC_ExecRamp+0x2a>
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
    {
      AllowedRange = false;
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006e2c:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 8006e30:	428c      	cmp	r4, r1
 8006e32:	dc0a      	bgt.n	8006e4a <STC_ExecRamp+0x26>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006e34:	8cdd      	ldrh	r5, [r3, #38]	; 0x26
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006e36:	689c      	ldr	r4, [r3, #8]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 8006e38:	42a9      	cmp	r1, r5
 8006e3a:	dc06      	bgt.n	8006e4a <STC_ExecRamp+0x26>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8006e3c:	b9fa      	cbnz	r2, 8006e7e <STC_ExecRamp+0x5a>
      {
        pHandle->SpeedRef01HzExt = ( int32_t )hTargetFinal * 65536;
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006e3e:	0409      	lsls	r1, r1, #16
 8006e40:	6099      	str	r1, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 8006e42:	2200      	movs	r2, #0
 8006e44:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 8006e46:	619a      	str	r2, [r3, #24]
 8006e48:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006e4a:	bc30      	pop	{r4, r5}
 8006e4c:	4770      	bx	lr
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeed01Hz )
 8006e4e:	8bdc      	ldrh	r4, [r3, #30]
 8006e50:	42a1      	cmp	r1, r4
 8006e52:	dd02      	ble.n	8006e5a <STC_ExecRamp+0x36>
 8006e54:	2000      	movs	r0, #0
}
 8006e56:	bc30      	pop	{r4, r5}
 8006e58:	4770      	bx	lr
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeed01Hz )
 8006e5a:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
 8006e5e:	428c      	cmp	r4, r1
 8006e60:	dcf8      	bgt.n	8006e54 <STC_ExecRamp+0x30>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeed01Hz )
 8006e62:	8c1c      	ldrh	r4, [r3, #32]
 8006e64:	42a1      	cmp	r1, r4
 8006e66:	da03      	bge.n	8006e70 <STC_ExecRamp+0x4c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeed01Hz )
 8006e68:	f9b3 4022 	ldrsh.w	r4, [r3, #34]	; 0x22
 8006e6c:	428c      	cmp	r4, r1
 8006e6e:	dbf1      	blt.n	8006e54 <STC_ExecRamp+0x30>
    hCurrentReference = ( int16_t )( pHandle->SpeedRef01HzExt >> 16 );
 8006e70:	685c      	ldr	r4, [r3, #4]
    if ( hDurationms == 0u )
 8006e72:	b9e2      	cbnz	r2, 8006eae <STC_ExecRamp+0x8a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006e74:	2801      	cmp	r0, #1
 8006e76:	d1e2      	bne.n	8006e3e <STC_ExecRamp+0x1a>
        pHandle->SpeedRef01HzExt = ( int32_t )hTargetFinal * 65536;
 8006e78:	0409      	lsls	r1, r1, #16
 8006e7a:	6059      	str	r1, [r3, #4]
 8006e7c:	e7e1      	b.n	8006e42 <STC_ExecRamp+0x1e>
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006e7e:	1e20      	subs	r0, r4, #0
 8006e80:	bfbc      	itt	lt
 8006e82:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006e86:	30ff      	addlt	r0, #255	; 0xff
 8006e88:	1400      	asrs	r0, r0, #16
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006e8a:	8b9c      	ldrh	r4, [r3, #28]
      wAux /= 1000u;
 8006e8c:	4d09      	ldr	r5, [pc, #36]	; (8006eb4 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 8006e8e:	8059      	strh	r1, [r3, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006e90:	fb02 f204 	mul.w	r2, r2, r4
      wAux /= 1000u;
 8006e94:	fba5 4202 	umull	r4, r2, r5, r2
 8006e98:	0992      	lsrs	r2, r2, #6
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006e9a:	1a09      	subs	r1, r1, r0
      pHandle->RampRemainingStep++;
 8006e9c:	3201      	adds	r2, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006e9e:	0409      	lsls	r1, r1, #16
      pHandle->IncDecAmount = wAux1;
 8006ea0:	2001      	movs	r0, #1
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006ea2:	fb91 f1f2 	sdiv	r1, r1, r2
      pHandle->RampRemainingStep++;
 8006ea6:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = wAux1;
 8006ea8:	6199      	str	r1, [r3, #24]
}
 8006eaa:	bc30      	pop	{r4, r5}
 8006eac:	4770      	bx	lr
    hCurrentReference = ( int16_t )( pHandle->SpeedRef01HzExt >> 16 );
 8006eae:	1420      	asrs	r0, r4, #16
 8006eb0:	e7eb      	b.n	8006e8a <STC_ExecRamp+0x66>
 8006eb2:	bf00      	nop
 8006eb4:	10624dd3 	.word	0x10624dd3

08006eb8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006eb8:	b538      	push	{r3, r4, r5, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006eba:	7802      	ldrb	r2, [r0, #0]
  {
    wCurrentReference = pHandle->TorqueRef;
  }
  else
  {
    wCurrentReference = pHandle->SpeedRef01HzExt;
 8006ebc:	6845      	ldr	r5, [r0, #4]
    wCurrentReference = pHandle->TorqueRef;
 8006ebe:	6881      	ldr	r1, [r0, #8]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006ec0:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	bf08      	it	eq
 8006ec6:	460d      	moveq	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d90d      	bls.n	8006ee8 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006ecc:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 8006ed2:	440d      	add	r5, r1
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8006ed4:	2a01      	cmp	r2, #1
 8006ed6:	d00e      	beq.n	8006ef6 <STC_CalcTorqueReference+0x3e>
    pHandle->SpeedRef01HzExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006ed8:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	bfbc      	itt	lt
 8006ede:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
 8006ee2:	35ff      	addlt	r5, #255	; 0xff
 8006ee4:	1428      	asrs	r0, r5, #16
  }

  return hTorqueReference;
}
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006ee8:	d1f4      	bne.n	8006ed4 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006eea:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006eee:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006ef0:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006ef2:	60c3      	str	r3, [r0, #12]
 8006ef4:	e7ee      	b.n	8006ed4 <STC_CalcTorqueReference+0x1c>
 8006ef6:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeed01Hz( pHandle->SPD );
 8006ef8:	6940      	ldr	r0, [r0, #20]
 8006efa:	f7ff ff29 	bl	8006d50 <SPD_GetAvrgMecSpeed01Hz>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	4629      	mov	r1, r5
 8006f02:	bfbc      	itt	lt
 8006f04:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 8006f08:	31ff      	addlt	r1, #255	; 0xff
    hError = hTargetSpeed - hMeasuredSpeed;
 8006f0a:	ebc0 4121 	rsb	r1, r0, r1, asr #16
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006f0e:	b209      	sxth	r1, r1
 8006f10:	6920      	ldr	r0, [r4, #16]
 8006f12:	f7fe fb25 	bl	8005560 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006f16:	0403      	lsls	r3, r0, #16
    pHandle->SpeedRef01HzExt = wCurrentReference;
 8006f18:	6065      	str	r5, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006f1a:	60a3      	str	r3, [r4, #8]
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop

08006f20 <STC_GetMecSpeedRef01HzDefault>:
  *         expressed in tenths of HZ.
  */
int16_t STC_GetMecSpeedRef01HzDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRef01HzDefault;
}
 8006f20:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop

08006f28 <STC_GetMaxAppPositiveMecSpeed01Hz>:
            speed expressed in tenth of mechanical Hertz.
  */
uint16_t STC_GetMaxAppPositiveMecSpeed01Hz( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeed01Hz;
}
 8006f28:	8bc0      	ldrh	r0, [r0, #30]
 8006f2a:	4770      	bx	lr

08006f2c <STC_GetMinAppNegativeMecSpeed01Hz>:
            speed expressed in tenth of mechanical Hertz.
  */
int16_t STC_GetMinAppNegativeMecSpeed01Hz( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeed01Hz;
}
 8006f2c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop

08006f34 <STC_StopSpeedRamp>:
  * @retval bool It returns true if the command is executed, false otherwise.
  */
bool STC_StopSpeedRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006f34:	7803      	ldrb	r3, [r0, #0]
 8006f36:	2b01      	cmp	r3, #1
  {
    pHandle->RampRemainingStep = 0u;
 8006f38:	bf0a      	itet	eq
 8006f3a:	2200      	moveq	r2, #0
  bool retVal = false;
 8006f3c:	2300      	movne	r3, #0
    pHandle->RampRemainingStep = 0u;
 8006f3e:	60c2      	streq	r2, [r0, #12]
    retVal = true;
  }
  return retVal;
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	4770      	bx	lr

08006f44 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
Curr_Components STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  Curr_Components IqdRefDefault;
  IqdRefDefault.qI_Component1 = pHandle->TorqueRefDefault;
 8006f44:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.qI_Component2 = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006f48:	2000      	movs	r0, #0
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f362 000f 	bfi	r0, r2, #0, #16
 8006f50:	0c1b      	lsrs	r3, r3, #16
 8006f52:	f363 401f 	bfi	r0, r3, #16, #16
{
 8006f56:	b082      	sub	sp, #8
}
 8006f58:	b002      	add	sp, #8
 8006f5a:	4770      	bx	lr

08006f5c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4604      	mov	r4, r0
  pHandle->SpeedRef01HzExt = ( int32_t )SPD_GetAvrgMecSpeed01Hz( pHandle->SPD ) * ( int32_t )65536;
 8006f60:	6940      	ldr	r0, [r0, #20]
 8006f62:	f7ff fef5 	bl	8006d50 <SPD_GetAvrgMecSpeed01Hz>
 8006f66:	0400      	lsls	r0, r0, #16
 8006f68:	6060      	str	r0, [r4, #4]
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <STM_Init>:
  * @retval none.
  */
void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006f70:	f8c0 3002 	str.w	r3, [r0, #2]
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop

08006f78 <STM_NextState>:
  *         bState, false if the requested state can't be reached
  */
bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
  bool bChangeState = false;
  State_t bCurrentState = pHandle->bState;
 8006f78:	7803      	ldrb	r3, [r0, #0]
  State_t bNewState = bCurrentState;

  switch ( bCurrentState )
 8006f7a:	2b14      	cmp	r3, #20
 8006f7c:	d822      	bhi.n	8006fc4 <STM_NextState+0x4c>
 8006f7e:	e8df f003 	tbb	[pc, r3]
 8006f82:	7a52      	.short	0x7a52
 8006f84:	76735e0b 	.word	0x76735e0b
 8006f88:	2b281f0b 	.word	0x2b281f0b
 8006f8c:	312f2121 	.word	0x312f2121
 8006f90:	3e3b4538 	.word	0x3e3b4538
 8006f94:	4b48      	.short	0x4b48
 8006f96:	5b          	.byte	0x5b
 8006f97:	00          	.byte	0x00
        bChangeState = true;
      }
      break;

    case RUN:
      if ( bState == ANY_STOP )
 8006f98:	2907      	cmp	r1, #7
 8006f9a:	d027      	beq.n	8006fec <STM_NextState+0x74>
  {
    pHandle->bState = bNewState;
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006f9c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8006fa0:	2901      	cmp	r1, #1
 8006fa2:	d00b      	beq.n	8006fbc <STM_NextState+0x44>
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006fa4:	8841      	ldrh	r1, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006fa6:	8882      	ldrh	r2, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006fa8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  pHandle->hFaultOccurred |= hSetErrors;
 8006fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  if ( LocalState == FAULT_NOW )
 8006fb0:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006fb2:	8041      	strh	r1, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006fb4:	8082      	strh	r2, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8006fb6:	d001      	beq.n	8006fbc <STM_NextState+0x44>
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
    {
      pHandle->bState = FAULT_NOW;
 8006fb8:	230a      	movs	r3, #10
 8006fba:	7003      	strb	r3, [r0, #0]
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	4770      	bx	lr
      if ( bState == STOP )
 8006fc0:	2908      	cmp	r1, #8
 8006fc2:	d013      	beq.n	8006fec <STM_NextState+0x74>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006fc4:	f001 02fd 	and.w	r2, r1, #253	; 0xfd
 8006fc8:	2a01      	cmp	r2, #1
 8006fca:	d0f7      	beq.n	8006fbc <STM_NextState+0x44>
 8006fcc:	2907      	cmp	r1, #7
 8006fce:	d0f5      	beq.n	8006fbc <STM_NextState+0x44>
 8006fd0:	e7e8      	b.n	8006fa4 <STM_NextState+0x2c>
      if ( bState == STOP_IDLE )
 8006fd2:	2909      	cmp	r1, #9
 8006fd4:	d1f6      	bne.n	8006fc4 <STM_NextState+0x4c>
 8006fd6:	e009      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006fd8:	b141      	cbz	r1, 8006fec <STM_NextState+0x74>
 8006fda:	290c      	cmp	r1, #12
 8006fdc:	d1f2      	bne.n	8006fc4 <STM_NextState+0x4c>
 8006fde:	e005      	b.n	8006fec <STM_NextState+0x74>
      if ( bState == IDLE )
 8006fe0:	b121      	cbz	r1, 8006fec <STM_NextState+0x74>
 8006fe2:	e7ef      	b.n	8006fc4 <STM_NextState+0x4c>
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006fe4:	290e      	cmp	r1, #14
 8006fe6:	d001      	beq.n	8006fec <STM_NextState+0x74>
 8006fe8:	2907      	cmp	r1, #7
 8006fea:	d1d7      	bne.n	8006f9c <STM_NextState+0x24>
    pHandle->bState = bNewState;
 8006fec:	7001      	strb	r1, [r0, #0]
 8006fee:	2001      	movs	r0, #1
  return ( bChangeState );
 8006ff0:	4770      	bx	lr
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006ff2:	290f      	cmp	r1, #15
 8006ff4:	d1f8      	bne.n	8006fe8 <STM_NextState+0x70>
 8006ff6:	e7f9      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006ff8:	2911      	cmp	r1, #17
 8006ffa:	d1f5      	bne.n	8006fe8 <STM_NextState+0x70>
 8006ffc:	e7f6      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006ffe:	2912      	cmp	r1, #18
 8007000:	d0f4      	beq.n	8006fec <STM_NextState+0x74>
 8007002:	2907      	cmp	r1, #7
 8007004:	d0f2      	beq.n	8006fec <STM_NextState+0x74>
 8007006:	2914      	cmp	r1, #20
 8007008:	d1c8      	bne.n	8006f9c <STM_NextState+0x24>
 800700a:	e7ef      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800700c:	2902      	cmp	r1, #2
 800700e:	d1eb      	bne.n	8006fe8 <STM_NextState+0x70>
 8007010:	e7ec      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8007012:	2904      	cmp	r1, #4
 8007014:	d1e8      	bne.n	8006fe8 <STM_NextState+0x70>
 8007016:	e7e9      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007018:	2904      	cmp	r1, #4
 800701a:	d0e7      	beq.n	8006fec <STM_NextState+0x74>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800701c:	2907      	cmp	r1, #7
 800701e:	d0e5      	beq.n	8006fec <STM_NextState+0x74>
 8007020:	2905      	cmp	r1, #5
 8007022:	d0e3      	beq.n	8006fec <STM_NextState+0x74>
 8007024:	e7ce      	b.n	8006fc4 <STM_NextState+0x4c>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007026:	2903      	cmp	r1, #3
 8007028:	d0e0      	beq.n	8006fec <STM_NextState+0x74>
 800702a:	2901      	cmp	r1, #1
 800702c:	d0de      	beq.n	8006fec <STM_NextState+0x74>
           || ( bState == ICLWAIT ) )
 800702e:	290c      	cmp	r1, #12
 8007030:	d0dc      	beq.n	8006fec <STM_NextState+0x74>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007032:	2907      	cmp	r1, #7
 8007034:	d0c2      	beq.n	8006fbc <STM_NextState+0x44>
 8007036:	e00e      	b.n	8007056 <STM_NextState+0xde>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8007038:	2912      	cmp	r1, #18
 800703a:	d1d5      	bne.n	8006fe8 <STM_NextState+0x70>
 800703c:	e7d6      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800703e:	2907      	cmp	r1, #7
 8007040:	d0d4      	beq.n	8006fec <STM_NextState+0x74>
 8007042:	2910      	cmp	r1, #16
 8007044:	d0d2      	beq.n	8006fec <STM_NextState+0x74>
 8007046:	2904      	cmp	r1, #4
 8007048:	d0d0      	beq.n	8006fec <STM_NextState+0x74>
           ( bState == START ) ||
 800704a:	2911      	cmp	r1, #17
 800704c:	d0ce      	beq.n	8006fec <STM_NextState+0x74>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800704e:	2901      	cmp	r1, #1
 8007050:	d0cc      	beq.n	8006fec <STM_NextState+0x74>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007052:	2903      	cmp	r1, #3
 8007054:	d0b2      	beq.n	8006fbc <STM_NextState+0x44>
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007056:	8842      	ldrh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007058:	8883      	ldrh	r3, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800705a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  pHandle->hFaultOccurred |= hSetErrors;
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007062:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007064:	8083      	strh	r3, [r0, #4]
 8007066:	e7a7      	b.n	8006fb8 <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007068:	2913      	cmp	r1, #19
 800706a:	d1d7      	bne.n	800701c <STM_NextState+0xa4>
 800706c:	e7be      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800706e:	1f8a      	subs	r2, r1, #6
 8007070:	2a01      	cmp	r2, #1
 8007072:	d8a7      	bhi.n	8006fc4 <STM_NextState+0x4c>
 8007074:	e7ba      	b.n	8006fec <STM_NextState+0x74>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8007076:	2907      	cmp	r1, #7
 8007078:	d0b8      	beq.n	8006fec <STM_NextState+0x74>
 800707a:	290d      	cmp	r1, #13
 800707c:	d0b6      	beq.n	8006fec <STM_NextState+0x74>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800707e:	290e      	cmp	r1, #14
 8007080:	d18c      	bne.n	8006f9c <STM_NextState+0x24>
 8007082:	e7b3      	b.n	8006fec <STM_NextState+0x74>

08007084 <STM_FaultProcessing>:
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007084:	8843      	ldrh	r3, [r0, #2]
{
 8007086:	b430      	push	{r4, r5}
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007088:	430b      	orrs	r3, r1
  pHandle->hFaultOccurred |= hSetErrors;
 800708a:	8885      	ldrh	r5, [r0, #4]
{
 800708c:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 800708e:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007090:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8007094:	4329      	orrs	r1, r5
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007096:	b292      	uxth	r2, r2
  if ( LocalState == FAULT_NOW )
 8007098:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 800709a:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800709c:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 800709e:	d004      	beq.n	80070aa <STM_FaultProcessing+0x26>
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80070a0:	b10a      	cbz	r2, 80070a6 <STM_FaultProcessing+0x22>
      pHandle->bState = FAULT_NOW;
 80070a2:	200a      	movs	r0, #10
 80070a4:	7020      	strb	r0, [r4, #0]
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80070a6:	bc30      	pop	{r4, r5}
 80070a8:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80070aa:	2a00      	cmp	r2, #0
 80070ac:	d1fb      	bne.n	80070a6 <STM_FaultProcessing+0x22>
      pHandle->bState = FAULT_OVER;
 80070ae:	200b      	movs	r0, #11
 80070b0:	7020      	strb	r0, [r4, #0]
}
 80070b2:	bc30      	pop	{r4, r5}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop

080070b8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80070b8:	7800      	ldrb	r0, [r0, #0]
 80070ba:	4770      	bx	lr

080070bc <STM_FaultAcknowledged>:
  */
bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80070bc:	7803      	ldrb	r3, [r0, #0]
 80070be:	2b0b      	cmp	r3, #11
 80070c0:	d001      	beq.n	80070c6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80070c2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80070c4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80070c6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80070c8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80070ca:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80070cc:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80070ce:	2001      	movs	r0, #1
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop

080070d4 <STM_GetFaultState>:
  */
uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80070d4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80070d6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80070d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop

080070e0 <UFCP_Init>:

void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80070e0:	f7fd bf26 	b.w	8004f30 <FCP_Init>

080070e4 <UFCP_RX_IRQ_Handler>:
{
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 80070e4:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80070e8:	b1bb      	cbz	r3, 800711a <UFCP_RX_IRQ_Handler+0x36>
{
 80070ea:	b570      	push	{r4, r5, r6, lr}
  {
    uint8_t rx_byte = (uint8_t) rx_data;

    switch ( pBaseHandle->RxFrameLevel )
 80070ec:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 80070f0:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 80070f2:	b2c9      	uxtb	r1, r1
    switch ( pBaseHandle->RxFrameLevel )
 80070f4:	b143      	cbz	r3, 8007108 <UFCP_RX_IRQ_Handler+0x24>
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d111      	bne.n	800711e <UFCP_RX_IRQ_Handler+0x3a>
        pBaseHandle->RxFrameLevel++;
        break;

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
        pBaseHandle->RxFrameLevel++;
 80070fa:	2302      	movs	r3, #2
        pBaseHandle->RxFrame.Size = rx_byte;
 80070fc:	f880 109a 	strb.w	r1, [r0, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 8007100:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007104:	482a      	ldr	r0, [pc, #168]	; (80071b0 <UFCP_RX_IRQ_Handler+0xcc>)
        break;
 8007106:	bd70      	pop	{r4, r5, r6, pc}
        pBaseHandle->RxFrameLevel++;
 8007108:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800710a:	8a00      	ldrh	r0, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 800710c:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8007110:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007114:	8260      	strh	r0, [r4, #18]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8007116:	4827      	ldr	r0, [pc, #156]	; (80071b4 <UFCP_RX_IRQ_Handler+0xd0>)
        break;
 8007118:	bd70      	pop	{r4, r5, r6, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800711a:	4825      	ldr	r0, [pc, #148]	; (80071b0 <UFCP_RX_IRQ_Handler+0xcc>)
 800711c:	4770      	bx	lr

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800711e:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
 8007122:	3001      	adds	r0, #1
 8007124:	4283      	cmp	r3, r0
 8007126:	dc07      	bgt.n	8007138 <UFCP_RX_IRQ_Handler+0x54>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007128:	18e0      	adds	r0, r4, r3
          pBaseHandle->RxFrameLevel++;
 800712a:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800712c:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8007130:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007134:	481e      	ldr	r0, [pc, #120]	; (80071b0 <UFCP_RX_IRQ_Handler+0xcc>)
 8007136:	bd70      	pop	{r4, r5, r6, pc}
          ret_val = (void *) & UFCP_Usart_Timeout_stop;

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8007138:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800713c:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007140:	682b      	ldr	r3, [r5, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 8007142:	2200      	movs	r2, #0
 8007144:	f023 0320 	bic.w	r3, r3, #32
 8007148:	8262      	strh	r2, [r4, #18]
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800714a:	f104 0099 	add.w	r0, r4, #153	; 0x99
 800714e:	602b      	str	r3, [r5, #0]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007150:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8007154:	f7fd ff08 	bl	8004f68 <FCP_CalcCRC>
 8007158:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800715c:	4283      	cmp	r3, r0
 800715e:	d01c      	beq.n	800719a <UFCP_RX_IRQ_Handler+0xb6>

uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007160:	f894 5097 	ldrb.w	r5, [r4, #151]	; 0x97
 8007164:	b10d      	cbz	r5, 800716a <UFCP_RX_IRQ_Handler+0x86>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007166:	4814      	ldr	r0, [pc, #80]	; (80071b8 <UFCP_RX_IRQ_Handler+0xd4>)
}
 8007168:	bd70      	pop	{r4, r5, r6, pc}
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
 800716a:	22ff      	movs	r2, #255	; 0xff
    pHandle->TxFrame.Size = size;
 800716c:	2601      	movs	r6, #1
    while ( size-- ) *dest++ = *buffer++;
 800716e:	230a      	movs	r3, #10
    pHandle->TxFrame.Code = code;
 8007170:	7522      	strb	r2, [r4, #20]
    while ( size-- ) *dest++ = *buffer++;
 8007172:	75a3      	strb	r3, [r4, #22]
    pHandle->TxFrame.Size = size;
 8007174:	7566      	strb	r6, [r4, #21]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007176:	f104 0014 	add.w	r0, r4, #20
 800717a:	f7fd fef5 	bl	8004f68 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800717e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007182:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8007186:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800718a:	6813      	ldr	r3, [r2, #0]
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800718c:	480a      	ldr	r0, [pc, #40]	; (80071b8 <UFCP_RX_IRQ_Handler+0xd4>)
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800718e:	f884 6097 	strb.w	r6, [r4, #151]	; 0x97
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	bd70      	pop	{r4, r5, r6, pc}
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	68a5      	ldr	r5, [r4, #8]
 800719e:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80071a2:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80071a6:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80071aa:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80071ac:	4802      	ldr	r0, [pc, #8]	; (80071b8 <UFCP_RX_IRQ_Handler+0xd4>)
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	080082b8 	.word	0x080082b8
 80071b4:	080082ba 	.word	0x080082ba
 80071b8:	080082bc 	.word	0x080082bc

080071bc <UFCP_TX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80071bc:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 80071c0:	b16a      	cbz	r2, 80071de <UFCP_TX_IRQ_Handler+0x22>
    switch ( pBaseHandle->TxFrameLevel )
 80071c2:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 80071c6:	4603      	mov	r3, r0
 80071c8:	b152      	cbz	r2, 80071e0 <UFCP_TX_IRQ_Handler+0x24>
 80071ca:	2a01      	cmp	r2, #1
 80071cc:	d10a      	bne.n	80071e4 <UFCP_TX_IRQ_Handler+0x28>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80071ce:	7d40      	ldrb	r0, [r0, #21]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80071d0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
      pBaseHandle->TxFrameLevel++;
 80071d4:	3201      	adds	r2, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80071d6:	8508      	strh	r0, [r1, #40]	; 0x28
 80071d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 80071dc:	4770      	bx	lr
 80071de:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80071e0:	7d00      	ldrb	r0, [r0, #20]
        break;
 80071e2:	e7f5      	b.n	80071d0 <UFCP_TX_IRQ_Handler+0x14>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80071e4:	7d41      	ldrb	r1, [r0, #21]
 80071e6:	3101      	adds	r1, #1
 80071e8:	428a      	cmp	r2, r1
 80071ea:	dc08      	bgt.n	80071fe <UFCP_TX_IRQ_Handler+0x42>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80071ec:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80071ee:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80071f2:	7d09      	ldrb	r1, [r1, #20]
 80071f4:	8501      	strh	r1, [r0, #40]	; 0x28
      pBaseHandle->TxFrameLevel++;
 80071f6:	3201      	adds	r2, #1
 80071f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 80071fc:	4770      	bx	lr
{
 80071fe:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007200:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8007204:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8007208:	8511      	strh	r1, [r2, #40]	; 0x28
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800720a:	c811      	ldmia	r0, {r0, r4}
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800720c:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800720e:	2500      	movs	r5, #0
 8007210:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007214:	6011      	str	r1, [r2, #0]
 8007216:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800721a:	4623      	mov	r3, r4
}
 800721c:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800721e:	4718      	bx	r3

08007220 <UFCP_OVR_IRQ_Handler>:
{
 8007220:	b570      	push	{r4, r5, r6, lr}
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007222:	f890 5097 	ldrb.w	r5, [r0, #151]	; 0x97
 8007226:	b9ad      	cbnz	r5, 8007254 <UFCP_OVR_IRQ_Handler+0x34>
    pHandle->TxFrame.Code = code;
 8007228:	22ff      	movs	r2, #255	; 0xff
    while ( size-- ) *dest++ = *buffer++;
 800722a:	2308      	movs	r3, #8
    pHandle->TxFrame.Size = size;
 800722c:	2601      	movs	r6, #1
 800722e:	4604      	mov	r4, r0
    pHandle->TxFrame.Code = code;
 8007230:	7502      	strb	r2, [r0, #20]
    while ( size-- ) *dest++ = *buffer++;
 8007232:	7583      	strb	r3, [r0, #22]
    pHandle->TxFrame.Size = size;
 8007234:	7546      	strb	r6, [r0, #21]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007236:	3014      	adds	r0, #20
 8007238:	f7fd fe96 	bl	8004f68 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800723c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007240:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8007244:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007248:	6813      	ldr	r3, [r2, #0]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800724a:	f884 6097 	strb.w	r6, [r4, #151]	; 0x97
 800724e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	bf00      	nop

08007258 <UFCP_Receive>:
  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8007258:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800725c:	b963      	cbnz	r3, 8007278 <UFCP_Receive+0x20>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800725e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 8007262:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007266:	6813      	ldr	r3, [r2, #0]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8007268:	2101      	movs	r1, #1
 800726a:	f043 0320 	orr.w	r3, r3, #32
 800726e:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8007272:	2002      	movs	r0, #2
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4770      	bx	lr
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8007278:	2001      	movs	r0, #1
}
 800727a:	4770      	bx	lr

0800727c <UFCP_Send>:
{
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4604      	mov	r4, r0
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007282:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8007286:	2800      	cmp	r0, #0
 8007288:	d175      	bne.n	8007376 <UFCP_Send+0xfa>
    while ( size-- ) *dest++ = *buffer++;
 800728a:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800728c:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800728e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8007290:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8007292:	f104 0016 	add.w	r0, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8007296:	2b00      	cmp	r3, #0
 8007298:	d058      	beq.n	800734c <UFCP_Send+0xd0>
 800729a:	1d15      	adds	r5, r2, #4
 800729c:	f104 061a 	add.w	r6, r4, #26
 80072a0:	4296      	cmp	r6, r2
 80072a2:	bf88      	it	hi
 80072a4:	4285      	cmphi	r5, r0
 80072a6:	d869      	bhi.n	800737c <UFCP_Send+0x100>
 80072a8:	2b0b      	cmp	r3, #11
 80072aa:	d967      	bls.n	800737c <UFCP_Send+0x100>
 80072ac:	f1c2 0c00 	rsb	ip, r2, #0
 80072b0:	f01c 0c03 	ands.w	ip, ip, #3
 80072b4:	d06c      	beq.n	8007390 <UFCP_Send+0x114>
 80072b6:	7810      	ldrb	r0, [r2, #0]
 80072b8:	75a0      	strb	r0, [r4, #22]
 80072ba:	1e9d      	subs	r5, r3, #2
 80072bc:	f1bc 0f01 	cmp.w	ip, #1
 80072c0:	b2ed      	uxtb	r5, r5
 80072c2:	f104 0017 	add.w	r0, r4, #23
 80072c6:	f102 0601 	add.w	r6, r2, #1
 80072ca:	d011      	beq.n	80072f0 <UFCP_Send+0x74>
 80072cc:	7850      	ldrb	r0, [r2, #1]
 80072ce:	75e0      	strb	r0, [r4, #23]
 80072d0:	1edd      	subs	r5, r3, #3
 80072d2:	f1bc 0f03 	cmp.w	ip, #3
 80072d6:	b2ed      	uxtb	r5, r5
 80072d8:	f104 0018 	add.w	r0, r4, #24
 80072dc:	f102 0602 	add.w	r6, r2, #2
 80072e0:	d106      	bne.n	80072f0 <UFCP_Send+0x74>
 80072e2:	7890      	ldrb	r0, [r2, #2]
 80072e4:	7620      	strb	r0, [r4, #24]
 80072e6:	1f1d      	subs	r5, r3, #4
 80072e8:	b2ed      	uxtb	r5, r5
 80072ea:	f104 0019 	add.w	r0, r4, #25
 80072ee:	1cd6      	adds	r6, r2, #3
 80072f0:	eba3 030c 	sub.w	r3, r3, ip
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f1a3 0804 	sub.w	r8, r3, #4
 80072fa:	f3c8 0885 	ubfx	r8, r8, #2, #6
 80072fe:	eba1 010c 	sub.w	r1, r1, ip
 8007302:	f108 0801 	add.w	r8, r8, #1
 8007306:	b2c9      	uxtb	r1, r1
 8007308:	ea4f 0788 	mov.w	r7, r8, lsl #2
 800730c:	2902      	cmp	r1, #2
 800730e:	b2ff      	uxtb	r7, r7
 8007310:	d913      	bls.n	800733a <UFCP_Send+0xbe>
 8007312:	f10c 0e16 	add.w	lr, ip, #22
 8007316:	4462      	add	r2, ip
 8007318:	44a6      	add	lr, r4
 800731a:	2100      	movs	r1, #0
 800731c:	3101      	adds	r1, #1
 800731e:	fa5f fc81 	uxtb.w	ip, r1
 8007322:	f852 9b04 	ldr.w	r9, [r2], #4
 8007326:	f84e 9b04 	str.w	r9, [lr], #4
 800732a:	45e0      	cmp	r8, ip
 800732c:	d8f6      	bhi.n	800731c <UFCP_Send+0xa0>
 800732e:	1bed      	subs	r5, r5, r7
 8007330:	42bb      	cmp	r3, r7
 8007332:	b2ed      	uxtb	r5, r5
 8007334:	4438      	add	r0, r7
 8007336:	443e      	add	r6, r7
 8007338:	d008      	beq.n	800734c <UFCP_Send+0xd0>
 800733a:	7833      	ldrb	r3, [r6, #0]
 800733c:	7003      	strb	r3, [r0, #0]
 800733e:	b12d      	cbz	r5, 800734c <UFCP_Send+0xd0>
 8007340:	7873      	ldrb	r3, [r6, #1]
 8007342:	7043      	strb	r3, [r0, #1]
 8007344:	2d01      	cmp	r5, #1
 8007346:	d001      	beq.n	800734c <UFCP_Send+0xd0>
 8007348:	78b3      	ldrb	r3, [r6, #2]
 800734a:	7083      	strb	r3, [r0, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800734c:	f104 0014 	add.w	r0, r4, #20
 8007350:	f7fd fe0a 	bl	8004f68 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8007354:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007358:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007362:	6813      	ldr	r3, [r2, #0]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007364:	2101      	movs	r1, #1
 8007366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736a:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 800736e:	2002      	movs	r0, #2
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8007376:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8007378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737c:	1843      	adds	r3, r0, r1
 800737e:	f104 0115 	add.w	r1, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8007382:	f812 0b01 	ldrb.w	r0, [r2], #1
 8007386:	f801 0f01 	strb.w	r0, [r1, #1]!
 800738a:	4299      	cmp	r1, r3
 800738c:	d1f9      	bne.n	8007382 <UFCP_Send+0x106>
 800738e:	e7dd      	b.n	800734c <UFCP_Send+0xd0>
 8007390:	460d      	mov	r5, r1
 8007392:	4616      	mov	r6, r2
 8007394:	e7ac      	b.n	80072f0 <UFCP_Send+0x74>
 8007396:	bf00      	nop

08007398 <UFCP_AbortReceive>:

void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007398:	2300      	movs	r3, #0
 800739a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
 800739e:	4770      	bx	lr

080073a0 <VSS_Init>:
 80073a0:	2300      	movs	r3, #0
 80073a2:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80073a4:	84c2      	strh	r2, [r0, #38]	; 0x26
 80073a6:	7283      	strb	r3, [r0, #10]
 80073a8:	8003      	strh	r3, [r0, #0]
 80073aa:	8043      	strh	r3, [r0, #2]
 80073ac:	8083      	strh	r3, [r0, #4]
 80073ae:	80c3      	strh	r3, [r0, #6]
 80073b0:	8103      	strh	r3, [r0, #8]
 80073b2:	6183      	str	r3, [r0, #24]
 80073b4:	61c3      	str	r3, [r0, #28]
 80073b6:	8403      	strh	r3, [r0, #32]
 80073b8:	8503      	strh	r3, [r0, #40]	; 0x28
 80073ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80073be:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80073c2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80073c6:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 80073ca:	4770      	bx	lr

080073cc <VSS_Clear>:
* @retval none
*/
void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 80073cc:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80073ce:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80073d0:	84c2      	strh	r2, [r0, #38]	; 0x26
  pHandle->_Super.bSpeedErrorNumber = 0u;
 80073d2:	7283      	strb	r3, [r0, #10]
  pHandle->_Super.hElAngle = 0;
 80073d4:	8003      	strh	r3, [r0, #0]
  pHandle->_Super.hMecAngle = 0;
 80073d6:	8043      	strh	r3, [r0, #2]
  pHandle->_Super.hAvrMecSpeed01Hz = 0;
 80073d8:	8083      	strh	r3, [r0, #4]
  pHandle->_Super.hElSpeedDpp = 0;
 80073da:	80c3      	strh	r3, [r0, #6]
  pHandle->_Super.hMecAccel01HzP = 0;
 80073dc:	8103      	strh	r3, [r0, #8]
  pHandle->wElAccDppP32 = 0;
 80073de:	6183      	str	r3, [r0, #24]
  pHandle->wElSpeedDpp32 = 0;
 80073e0:	61c3      	str	r3, [r0, #28]
  pHandle->hRemainingStep = 0u;
 80073e2:	8403      	strh	r3, [r0, #32]
  pHandle->hElAngleAccu = 0;
 80073e4:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 80073e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  pHandle->bTransitionEnded = false;
 80073ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  pHandle->bTransitionLocked = false;
 80073ee:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

  pHandle->bCopyObserver = false;
 80073f2:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 80073f6:	4770      	bx	lr

080073f8 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 80073f8:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
{
 80073fc:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 80073fe:	bb7a      	cbnz	r2, 8007460 <VSS_CalcElAngle+0x68>
{
 8007400:	b4f0      	push	{r4, r5, r6, r7}
  {
    hRetAngle = *( int16_t * )pInputVars_str;
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007402:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8007404:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007408:	8847      	ldrh	r7, [r0, #2]
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
#endif

    if ( pHandle->bTransitionStarted == true )
 800740a:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800740e:	7ac4      	ldrb	r4, [r0, #11]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007410:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007414:	442a      	add	r2, r5
 8007416:	b292      	uxth	r2, r2
 8007418:	b210      	sxth	r0, r2
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800741a:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800741c:	8518      	strh	r0, [r3, #40]	; 0x28
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800741e:	805c      	strh	r4, [r3, #2]
    if ( pHandle->bTransitionStarted == true )
 8007420:	b1de      	cbz	r6, 800745a <VSS_CalcElAngle+0x62>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8007422:	f9b3 4026 	ldrsh.w	r4, [r3, #38]	; 0x26
 8007426:	b324      	cbz	r4, 8007472 <VSS_CalcElAngle+0x7a>
        pHandle->bTransitionEnded = true;
        pHandle->_Super.bSpeedErrorNumber = 0u;
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 8007428:	3c01      	subs	r4, #1
 800742a:	b224      	sxth	r4, r4
 800742c:	84dc      	strh	r4, [r3, #38]	; 0x26

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800742e:	2d00      	cmp	r5, #0
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007430:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007432:	db19      	blt.n	8007468 <VSS_CalcElAngle+0x70>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007434:	1a8a      	subs	r2, r1, r2
 8007436:	b212      	sxth	r2, r2
 8007438:	2601      	movs	r6, #1
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
          hSignCorr = -1;
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800743a:	fb02 f404 	mul.w	r4, r2, r4
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800743e:	f9b3 502e 	ldrsh.w	r5, [r3, #46]	; 0x2e
 8007442:	fb94 f4f5 	sdiv	r4, r4, r5
#endif

        hAngleCorr *= hSignCorr;

        if ( hAngleDiff >= 0 )
 8007446:	2a00      	cmp	r2, #0
        hAngleCorr *= hSignCorr;
 8007448:	fb14 f406 	smulbb	r4, r4, r6
 800744c:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 800744e:	db19      	blt.n	8007484 <VSS_CalcElAngle+0x8c>
        {
          pHandle->bTransitionLocked = true;
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007450:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 8007452:	2201      	movs	r2, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007454:	b220      	sxth	r0, r4
          pHandle->bTransitionLocked = true;
 8007456:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800745a:	8018      	strh	r0, [r3, #0]
  return hRetAngle;
}
 800745c:	bcf0      	pop	{r4, r5, r6, r7}
 800745e:	4770      	bx	lr
    hRetAngle = *( int16_t * )pInputVars_str;
 8007460:	f9b1 0000 	ldrsh.w	r0, [r1]
  pHandle->_Super.hElAngle = hRetAngle;
 8007464:	8018      	strh	r0, [r3, #0]
}
 8007466:	4770      	bx	lr
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8007468:	1a52      	subs	r2, r2, r1
 800746a:	b212      	sxth	r2, r2
 800746c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007470:	e7e3      	b.n	800743a <VSS_CalcElAngle+0x42>
        hRetAngle = *( int16_t * )pInputVars_str;
 8007472:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8007476:	729c      	strb	r4, [r3, #10]
        pHandle->bTransitionEnded = true;
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pHandle->_Super.hElAngle = hRetAngle;
 800747e:	8018      	strh	r0, [r3, #0]
}
 8007480:	bcf0      	pop	{r4, r5, r6, r7}
 8007482:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 8007484:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007488:	2a00      	cmp	r2, #0
 800748a:	d0e6      	beq.n	800745a <VSS_CalcElAngle+0x62>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800748c:	440c      	add	r4, r1
 800748e:	b220      	sxth	r0, r4
 8007490:	e7e3      	b.n	800745a <VSS_CalcElAngle+0x62>
 8007492:	bf00      	nop

08007494 <VSS_CalcAvrgMecSpeed01Hz>:
  */
bool VSS_CalcAvrgMecSpeed01Hz( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeed01Hz )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8007494:	8c03      	ldrh	r3, [r0, #32]
 8007496:	2b01      	cmp	r3, #1
{
 8007498:	b430      	push	{r4, r5}
  if ( pHandle->hRemainingStep > 1u )
 800749a:	d926      	bls.n	80074ea <VSS_CalcAvrgMecSpeed01Hz+0x56>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800749c:	69c3      	ldr	r3, [r0, #28]
 800749e:	6982      	ldr	r2, [r0, #24]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );

    /* Convert dpp into Mec01Hz */
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
                                  ( 65536 * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80074a0:	7ac5      	ldrb	r5, [r0, #11]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80074a2:	4413      	add	r3, r2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80074a4:	1e1c      	subs	r4, r3, #0
 80074a6:	bfb8      	it	lt
 80074a8:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
 80074ac:	8a82      	ldrh	r2, [r0, #20]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80074ae:	61c3      	str	r3, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80074b0:	bfb8      	it	lt
 80074b2:	34ff      	addlt	r4, #255	; 0xff
 80074b4:	1424      	asrs	r4, r4, #16
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
 80074b6:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
 80074ba:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80074be:	005b      	lsls	r3, r3, #1
                                  ( 65536 * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80074c0:	042a      	lsls	r2, r5, #16
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
 80074c2:	fb93 f3f2 	sdiv	r3, r3, r2
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
 80074c6:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80074c8:	80c4      	strh	r4, [r0, #6]
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
 80074ca:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeed01Hz = *hMecSpeed01Hz;

    pHandle->hRemainingStep--;
 80074cc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->_Super.hAvrMecSpeed01Hz = *hMecSpeed01Hz;
 80074ce:	8083      	strh	r3, [r0, #4]
    pHandle->hRemainingStep--;
 80074d0:	1e53      	subs	r3, r2, #1
 80074d2:	8403      	strh	r3, [r0, #32]
  else
  {
    *hMecSpeed01Hz = pHandle->_Super.hAvrMecSpeed01Hz;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 80074d4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80074d8:	b923      	cbnz	r3, 80074e4 <VSS_CalcAvrgMecSpeed01Hz+0x50>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80074da:	7c02      	ldrb	r2, [r0, #16]
 80074dc:	7282      	strb	r2, [r0, #10]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeed01Hz );
  }

  return ( SpeedSensorReliability );
}
 80074de:	bc30      	pop	{r4, r5}
 80074e0:	4618      	mov	r0, r3
 80074e2:	4770      	bx	lr
 80074e4:	bc30      	pop	{r4, r5}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeed01Hz );
 80074e6:	f7ff bc3b 	b.w	8006d60 <SPD_IsMecSpeedReliable>
  else if ( pHandle->hRemainingStep == 1u )
 80074ea:	d003      	beq.n	80074f4 <VSS_CalcAvrgMecSpeed01Hz+0x60>
    *hMecSpeed01Hz = pHandle->_Super.hAvrMecSpeed01Hz;
 80074ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80074f0:	800b      	strh	r3, [r1, #0]
 80074f2:	e7ef      	b.n	80074d4 <VSS_CalcAvrgMecSpeed01Hz+0x40>
    *hMecSpeed01Hz = pHandle->hFinalMecSpeed01Hz;
 80074f4:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 80074f8:	800a      	strh	r2, [r1, #0]
                                  ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80074fa:	8a83      	ldrh	r3, [r0, #20]
    pHandle->_Super.hAvrMecSpeed01Hz = *hMecSpeed01Hz;
 80074fc:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeed01Hz ) *
 80074fe:	f9b1 2000 	ldrsh.w	r2, [r1]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007502:	7ac4      	ldrb	r4, [r0, #11]
                                  ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007504:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007508:	005b      	lsls	r3, r3, #1
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeed01Hz ) *
 800750a:	0412      	lsls	r2, r2, #16
    pHandle->hRemainingStep = 0u;
 800750c:	2500      	movs	r5, #0
                                  ( int32_t )65536 ) /
 800750e:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007512:	fb14 f303 	smulbb	r3, r4, r3
 8007516:	80c3      	strh	r3, [r0, #6]
    pHandle->hRemainingStep = 0u;
 8007518:	8405      	strh	r5, [r0, #32]
 800751a:	e7db      	b.n	80074d4 <VSS_CalcAvrgMecSpeed01Hz+0x40>

0800751c <VSS_SetMecAngle>:
  * @retval none
  */
void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 800751c:	8501      	strh	r1, [r0, #40]	; 0x28
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 800751e:	8001      	strh	r1, [r0, #0]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007520:	7ac3      	ldrb	r3, [r0, #11]
 8007522:	fb91 f1f3 	sdiv	r1, r1, r3
 8007526:	8041      	strh	r1, [r0, #2]
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop

0800752c <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800752c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007530:	bb1b      	cbnz	r3, 800757a <VSS_SetMecAcceleration+0x4e>
{
 8007532:	b4f0      	push	{r4, r5, r6, r7}
  {
    if ( hDurationms == 0u )
 8007534:	b312      	cbz	r2, 800757c <VSS_SetMecAcceleration+0x50>
      pHandle->hFinalMecSpeed01Hz = hFinalMecSpeed01Hz;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007536:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8007538:	4f18      	ldr	r7, [pc, #96]	; (800759c <VSS_SetMecAcceleration+0x70>)

      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
                            ( int16_t )pHandle->_Super.bElToMecRatio;

      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeed01Hz * ( int32_t )65536 ) /
                                       ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800753a:	8a85      	ldrh	r5, [r0, #20]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800753c:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8007540:	7ac4      	ldrb	r4, [r0, #11]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeed01Hz = hFinalMecSpeed01Hz;
 8007542:	8441      	strh	r1, [r0, #34]	; 0x22
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007544:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007548:	fba7 2303 	umull	r2, r3, r7, r3
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800754c:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007550:	eb05 0285 	add.w	r2, r5, r5, lsl #2
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeed01Hz * ( int32_t )65536 ) /
 8007554:	0409      	lsls	r1, r1, #16
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007556:	fb96 f5f4 	sdiv	r5, r6, r4
                                       ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800755a:	0052      	lsls	r2, r2, #1
      hNbrStep++;
 800755c:	3301      	adds	r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeed01Hz * ( int32_t )65536 ) /
 800755e:	fb91 f2f2 	sdiv	r2, r1, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007562:	1b52      	subs	r2, r2, r5
      hNbrStep++;
 8007564:	b29b      	uxth	r3, r3
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007566:	0412      	lsls	r2, r2, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8007568:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800756a:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800756e:	fb04 f202 	mul.w	r2, r4, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8007572:	61c6      	str	r6, [r0, #28]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8007574:	6182      	str	r2, [r0, #24]
      pHandle->hRemainingStep = hNbrStep;
 8007576:	8403      	strh	r3, [r0, #32]
    }
  }
}
 8007578:	bcf0      	pop	{r4, r5, r6, r7}
 800757a:	4770      	bx	lr
                                    ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800757c:	8a83      	ldrh	r3, [r0, #20]
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800757e:	7ac4      	ldrb	r4, [r0, #11]
      pHandle->_Super.hAvrMecSpeed01Hz = hFinalMecSpeed01Hz;
 8007580:	8081      	strh	r1, [r0, #4]
                                    ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeed01Hz ) *
 8007586:	040d      	lsls	r5, r1, #16
                                    ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007588:	005b      	lsls	r3, r3, #1
                                    ( int32_t )65536 ) /
 800758a:	fb95 f3f3 	sdiv	r3, r5, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800758e:	fb14 f303 	smulbb	r3, r4, r3
      pHandle->hRemainingStep = 0u;
 8007592:	8402      	strh	r2, [r0, #32]
      pHandle->hFinalMecSpeed01Hz = hFinalMecSpeed01Hz;
 8007594:	8441      	strh	r1, [r0, #34]	; 0x22
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007596:	80c3      	strh	r3, [r0, #6]
 8007598:	e7ee      	b.n	8007578 <VSS_SetMecAcceleration+0x4c>
 800759a:	bf00      	nop
 800759c:	10624dd3 	.word	0x10624dd3

080075a0 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 80075a0:	b151      	cbz	r1, 80075b8 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 80075a2:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
    pHandle->bTransitionStarted = true;
 80075a6:	2201      	movs	r2, #1
 80075a8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if ( pHandle->hTransitionSteps == 0 )
 80075ac:	b923      	cbnz	r3, 80075b8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 80075ae:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      pHandle->_Super.bSpeedErrorNumber = 0u;
 80075b2:	7283      	strb	r3, [r0, #10]
      bAux = false;
 80075b4:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 80075b6:	4770      	bx	lr
  bool bAux = true;
 80075b8:	2001      	movs	r0, #1
 80075ba:	4770      	bx	lr

080075bc <VSS_TransitionEnded>:
}

bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 80075bc:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop

080075c4 <FF_Init>:
 80075c4:	b470      	push	{r4, r5, r6}
 80075c6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80075c8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80075ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80075cc:	60c6      	str	r6, [r0, #12]
 80075ce:	6105      	str	r5, [r0, #16]
 80075d0:	6144      	str	r4, [r0, #20]
 80075d2:	6181      	str	r1, [r0, #24]
 80075d4:	6202      	str	r2, [r0, #32]
 80075d6:	61c3      	str	r3, [r0, #28]
 80075d8:	bc70      	pop	{r4, r5, r6}
 80075da:	4770      	bx	lr

080075dc <FF_Clear>:
 80075dc:	2300      	movs	r3, #0
 80075de:	6003      	str	r3, [r0, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop

080075e4 <FF_VqdffComputation>:
 80075e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e6:	b083      	sub	sp, #12
 80075e8:	4604      	mov	r4, r0
 80075ea:	4610      	mov	r0, r2
 80075ec:	9101      	str	r1, [sp, #4]
 80075ee:	f7ff fc03 	bl	8006df8 <STC_GetSpeedSensor>
 80075f2:	f7ff fbb1 	bl	8006d58 <SPD_GetElSpeedDpp>
 80075f6:	4b24      	ldr	r3, [pc, #144]	; (8007688 <FF_VqdffComputation+0xa4>)
 80075f8:	4f24      	ldr	r7, [pc, #144]	; (800768c <FF_VqdffComputation+0xa8>)
 80075fa:	4605      	mov	r5, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f7fd fc15 	bl	8004e2c <VBS_GetAvBusVoltage_d>
 8007602:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 8007606:	68e3      	ldr	r3, [r4, #12]
 8007608:	6961      	ldr	r1, [r4, #20]
 800760a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800760e:	fb16 f605 	smulbb	r6, r6, r5
 8007612:	2e00      	cmp	r6, #0
 8007614:	bfbc      	itt	lt
 8007616:	f506 46ff 	addlt.w	r6, r6, #32640	; 0x7f80
 800761a:	367f      	addlt	r6, #127	; 0x7f
 800761c:	13f6      	asrs	r6, r6, #15
 800761e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8007622:	fb03 f306 	mul.w	r3, r3, r6
 8007626:	fb93 f3f0 	sdiv	r3, r3, r0
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	fb01 f105 	mul.w	r1, r1, r5
 8007630:	fb91 f1f0 	sdiv	r1, r1, r0
 8007634:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007638:	4413      	add	r3, r2
 800763a:	42bb      	cmp	r3, r7
 800763c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007640:	bfb8      	it	lt
 8007642:	463b      	movlt	r3, r7
 8007644:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007648:	428b      	cmp	r3, r1
 800764a:	fb12 f505 	smulbb	r5, r2, r5
 800764e:	bfa8      	it	ge
 8007650:	460b      	movge	r3, r1
 8007652:	2d00      	cmp	r5, #0
 8007654:	bfb8      	it	lt
 8007656:	186d      	addlt	r5, r5, r1
 8007658:	8023      	strh	r3, [r4, #0]
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8007660:	490a      	ldr	r1, [pc, #40]	; (800768c <FF_VqdffComputation+0xa8>)
 8007662:	13ed      	asrs	r5, r5, #15
 8007664:	fb02 f505 	mul.w	r5, r2, r5
 8007668:	fb95 f0f0 	sdiv	r0, r5, r0
 800766c:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8007670:	4288      	cmp	r0, r1
 8007672:	bfb8      	it	lt
 8007674:	4608      	movlt	r0, r1
 8007676:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800767a:	4298      	cmp	r0, r3
 800767c:	bfa8      	it	ge
 800767e:	4618      	movge	r0, r3
 8007680:	8060      	strh	r0, [r4, #2]
 8007682:	b003      	add	sp, #12
 8007684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007686:	bf00      	nop
 8007688:	20000964 	.word	0x20000964
 800768c:	ffff8001 	.word	0xffff8001

08007690 <FF_VqdConditioning>:
 8007690:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007694:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8007698:	b430      	push	{r4, r5}
 800769a:	4d10      	ldr	r5, [pc, #64]	; (80076dc <FF_VqdConditioning+0x4c>)
 800769c:	b20c      	sxth	r4, r1
 800769e:	4422      	add	r2, r4
 80076a0:	1409      	asrs	r1, r1, #16
 80076a2:	440b      	add	r3, r1
 80076a4:	42aa      	cmp	r2, r5
 80076a6:	bfb8      	it	lt
 80076a8:	462a      	movlt	r2, r5
 80076aa:	8084      	strh	r4, [r0, #4]
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80076b2:	bfb8      	it	lt
 80076b4:	462b      	movlt	r3, r5
 80076b6:	42a2      	cmp	r2, r4
 80076b8:	bfa8      	it	ge
 80076ba:	4622      	movge	r2, r4
 80076bc:	42a3      	cmp	r3, r4
 80076be:	bfa8      	it	ge
 80076c0:	4623      	movge	r3, r4
 80076c2:	b292      	uxth	r2, r2
 80076c4:	2400      	movs	r4, #0
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f362 040f 	bfi	r4, r2, #0, #16
 80076cc:	f363 441f 	bfi	r4, r3, #16, #16
 80076d0:	80c1      	strh	r1, [r0, #6]
 80076d2:	b084      	sub	sp, #16
 80076d4:	4620      	mov	r0, r4
 80076d6:	b004      	add	sp, #16
 80076d8:	bc30      	pop	{r4, r5}
 80076da:	4770      	bx	lr
 80076dc:	ffff8001 	.word	0xffff8001

080076e0 <FF_DataProcess>:
 80076e0:	b4f0      	push	{r4, r5, r6, r7}
 80076e2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80076e4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80076e8:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80076ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80076f0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80076f4:	fa07 f501 	lsl.w	r5, r7, r1
 80076f8:	fa06 f401 	lsl.w	r4, r6, r1
 80076fc:	1bed      	subs	r5, r5, r7
 80076fe:	1ba4      	subs	r4, r4, r6
 8007700:	442a      	add	r2, r5
 8007702:	4423      	add	r3, r4
 8007704:	410a      	asrs	r2, r1
 8007706:	410b      	asrs	r3, r1
 8007708:	8102      	strh	r2, [r0, #8]
 800770a:	8143      	strh	r3, [r0, #10]
 800770c:	bcf0      	pop	{r4, r5, r6, r7}
 800770e:	4770      	bx	lr

08007710 <FF_InitFOCAdditionalMethods>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	2500      	movs	r5, #0
 8007714:	4604      	mov	r4, r0
 8007716:	6085      	str	r5, [r0, #8]
 8007718:	4629      	mov	r1, r5
 800771a:	69c0      	ldr	r0, [r0, #28]
 800771c:	f7fd ff14 	bl	8005548 <PID_SetIntegralTerm>
 8007720:	4629      	mov	r1, r5
 8007722:	6a20      	ldr	r0, [r4, #32]
 8007724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007728:	f7fd bf0e 	b.w	8005548 <PID_SetIntegralTerm>

0800772c <FF_SetFFConstants>:
 800772c:	b500      	push	{lr}
 800772e:	b085      	sub	sp, #20
 8007730:	f10d 0e10 	add.w	lr, sp, #16
 8007734:	e90e 000e 	stmdb	lr, {r1, r2, r3}
 8007738:	a901      	add	r1, sp, #4
 800773a:	c90e      	ldmia	r1, {r1, r2, r3}
 800773c:	60c1      	str	r1, [r0, #12]
 800773e:	6102      	str	r2, [r0, #16]
 8007740:	6143      	str	r3, [r0, #20]
 8007742:	b005      	add	sp, #20
 8007744:	f85d fb04 	ldr.w	pc, [sp], #4

08007748 <FF_GetFFConstants>:
 8007748:	b430      	push	{r4, r5}
 800774a:	690d      	ldr	r5, [r1, #16]
 800774c:	68cc      	ldr	r4, [r1, #12]
 800774e:	694a      	ldr	r2, [r1, #20]
 8007750:	6082      	str	r2, [r0, #8]
 8007752:	e880 0030 	stmia.w	r0, {r4, r5}
 8007756:	bc30      	pop	{r4, r5}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop

0800775c <FF_GetVqdff>:
 800775c:	6803      	ldr	r3, [r0, #0]
 800775e:	2000      	movs	r0, #0
 8007760:	b29a      	uxth	r2, r3
 8007762:	f362 000f 	bfi	r0, r2, #0, #16
 8007766:	0c1b      	lsrs	r3, r3, #16
 8007768:	f363 401f 	bfi	r0, r3, #16, #16
 800776c:	b082      	sub	sp, #8
 800776e:	b002      	add	sp, #8
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop

08007774 <FF_GetVqdAvPIout>:
 8007774:	6803      	ldr	r3, [r0, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	b29a      	uxth	r2, r3
 800777a:	f362 000f 	bfi	r0, r2, #0, #16
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	f363 401f 	bfi	r0, r3, #16, #16
 8007784:	b082      	sub	sp, #8
 8007786:	b002      	add	sp, #8
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop

0800778c <STO_PLL_Init>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4604      	mov	r4, r0
 8007790:	2101      	movs	r1, #1
 8007792:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
 8007796:	f9b4 5024 	ldrsh.w	r5, [r4, #36]	; 0x24
 800779a:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <STO_PLL_Init+0xbc>)
 800779c:	fb93 f3f5 	sdiv	r3, r3, r5
 80077a0:	2200      	movs	r2, #0
 80077a2:	b21b      	sxth	r3, r3
 80077a4:	f884 00ee 	strb.w	r0, [r4, #238]	; 0xee
 80077a8:	8522      	strh	r2, [r4, #40]	; 0x28
 80077aa:	f884 10fc 	strb.w	r1, [r4, #252]	; 0xfc
 80077ae:	4608      	mov	r0, r1
 80077b0:	b90b      	cbnz	r3, 80077b6 <STO_PLL_Init+0x2a>
 80077b2:	e00b      	b.n	80077cc <STO_PLL_Init+0x40>
 80077b4:	4611      	mov	r1, r2
 80077b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80077ba:	1c4a      	adds	r2, r1, #1
 80077bc:	105b      	asrs	r3, r3, #1
 80077be:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80077c2:	b292      	uxth	r2, r2
 80077c4:	d1f6      	bne.n	80077b4 <STO_PLL_Init+0x28>
 80077c6:	b200      	sxth	r0, r0
 80077c8:	8521      	strh	r1, [r4, #40]	; 0x28
 80077ca:	4601      	mov	r1, r0
 80077cc:	4e1f      	ldr	r6, [pc, #124]	; (800784c <STO_PLL_Init+0xc0>)
 80077ce:	84e0      	strh	r0, [r4, #38]	; 0x26
 80077d0:	fb01 f305 	mul.w	r3, r1, r5
 80077d4:	fb86 0103 	smull	r0, r1, r6, r3
 80077d8:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 80077dc:	17db      	asrs	r3, r3, #31
 80077de:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 80077e2:	2100      	movs	r1, #0
 80077e4:	8423      	strh	r3, [r4, #32]
 80077e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80077e8:	65e1      	str	r1, [r4, #92]	; 0x5c
 80077ea:	6621      	str	r1, [r4, #96]	; 0x60
 80077ec:	6661      	str	r1, [r4, #100]	; 0x64
 80077ee:	8021      	strh	r1, [r4, #0]
 80077f0:	80e1      	strh	r1, [r4, #6]
 80077f2:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
 80077f6:	f884 10ef 	strb.w	r1, [r4, #239]	; 0xef
 80077fa:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
 80077fe:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
 8007802:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
 8007806:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
 800780a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800780e:	f884 111a 	strb.w	r1, [r4, #282]	; 0x11a
 8007812:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
 8007816:	b13a      	cbz	r2, 8007828 <STO_PLL_Init+0x9c>
 8007818:	3a01      	subs	r2, #1
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	3201      	adds	r2, #1
 800781e:	0052      	lsls	r2, r2, #1
 8007820:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8007824:	f000 fbdc 	bl	8007fe0 <memset>
 8007828:	2500      	movs	r5, #0
 800782a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
 8007836:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
 800783a:	f7fd fe85 	bl	8005548 <PID_SetIntegralTerm>
 800783e:	4630      	mov	r0, r6
 8007840:	f7fd fe6e 	bl	8005520 <PID_HandleInit>
 8007844:	8125      	strh	r5, [r4, #8]
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	000fea5e 	.word	0x000fea5e
 800784c:	06488dc5 	.word	0x06488dc5

08007850 <STO_PLL_CalcElAngle>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 8007858:	f8d0 e060 	ldr.w	lr, [r0, #96]	; 0x60
 800785c:	03dd      	lsls	r5, r3, #15
 800785e:	1aea      	subs	r2, r5, r3
 8007860:	4596      	cmp	lr, r2
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	4604      	mov	r4, r0
 8007866:	f340 80c3 	ble.w	80079f0 <STO_PLL_CalcElAngle+0x1a0>
 800786a:	6602      	str	r2, [r0, #96]	; 0x60
 800786c:	4696      	mov	lr, r2
 800786e:	f8b4 0116 	ldrh.w	r0, [r4, #278]	; 0x116
 8007872:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8007874:	fa4e f600 	asr.w	r6, lr, r0
 8007878:	9603      	str	r6, [sp, #12]
 800787a:	42ba      	cmp	r2, r7
 800787c:	b236      	sxth	r6, r6
 800787e:	9601      	str	r6, [sp, #4]
 8007880:	f280 80c8 	bge.w	8007a14 <STO_PLL_CalcElAngle+0x1c4>
 8007884:	6662      	str	r2, [r4, #100]	; 0x64
 8007886:	4617      	mov	r7, r2
 8007888:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800788c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800788e:	fa47 f000 	asr.w	r0, r7, r0
 8007892:	03de      	lsls	r6, r3, #15
 8007894:	4605      	mov	r5, r0
 8007896:	9004      	str	r0, [sp, #16]
 8007898:	1af0      	subs	r0, r6, r3
 800789a:	b22d      	sxth	r5, r5
 800789c:	4282      	cmp	r2, r0
 800789e:	9502      	str	r5, [sp, #8]
 80078a0:	f340 80b2 	ble.w	8007a08 <STO_PLL_CalcElAngle+0x1b8>
 80078a4:	65a0      	str	r0, [r4, #88]	; 0x58
 80078a6:	4602      	mov	r2, r0
 80078a8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 80078aa:	42a8      	cmp	r0, r5
 80078ac:	f280 80a6 	bge.w	80079fc <STO_PLL_CalcElAngle+0x1ac>
 80078b0:	65e0      	str	r0, [r4, #92]	; 0x5c
 80078b2:	4605      	mov	r5, r0
 80078b4:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
 80078b8:	8888      	ldrh	r0, [r1, #4]
 80078ba:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80078be:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80078c2:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 80078c6:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 80078ca:	f9b1 b000 	ldrsh.w	fp, [r1]
 80078ce:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80078d2:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 80078d6:	fa42 f603 	asr.w	r6, r2, r3
 80078da:	fa45 f303 	asr.w	r3, r5, r3
 80078de:	f9b4 a018 	ldrsh.w	sl, [r4, #24]
 80078e2:	1a30      	subs	r0, r6, r0
 80078e4:	fb16 f60c 	smulbb	r6, r6, ip
 80078e8:	fb13 fc0c 	smulbb	ip, r3, ip
 80078ec:	b200      	sxth	r0, r0
 80078ee:	eba5 0c0c 	sub.w	ip, r5, ip
 80078f2:	1b92      	subs	r2, r2, r6
 80078f4:	fb08 f50b 	mul.w	r5, r8, fp
 80078f8:	f9b4 b01e 	ldrsh.w	fp, [r4, #30]
 80078fc:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80078fe:	fb0a 2200 	mla	r2, sl, r0, r2
 8007902:	142d      	asrs	r5, r5, #16
 8007904:	fb0b 2205 	mla	r2, fp, r5, r2
 8007908:	eba3 0309 	sub.w	r3, r3, r9
 800790c:	9205      	str	r2, [sp, #20]
 800790e:	9d02      	ldr	r5, [sp, #8]
 8007910:	9a01      	ldr	r2, [sp, #4]
 8007912:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8007916:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 800791a:	b21b      	sxth	r3, r3
 800791c:	fb08 f101 	mul.w	r1, r8, r1
 8007920:	1409      	asrs	r1, r1, #16
 8007922:	fb0a c803 	mla	r8, sl, r3, ip
 8007926:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
 800792a:	f9b4 c01c 	ldrsh.w	ip, [r4, #28]
 800792e:	f9b4 911c 	ldrsh.w	r9, [r4, #284]	; 0x11c
 8007932:	fb0b 8101 	mla	r1, fp, r1, r8
 8007936:	4135      	asrs	r5, r6
 8007938:	f9b4 b006 	ldrsh.w	fp, [r4, #6]
 800793c:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 8007940:	fa42 f606 	asr.w	r6, r2, r6
 8007944:	fb0c 7303 	mla	r3, ip, r3, r7
 8007948:	fb06 f60a 	mul.w	r6, r6, sl
 800794c:	fb06 361b 	mls	r6, r6, fp, r3
 8007950:	9b05      	ldr	r3, [sp, #20]
 8007952:	f1b9 0f00 	cmp.w	r9, #0
 8007956:	46a1      	mov	r9, r4
 8007958:	fb08 3712 	mls	r7, r8, r2, r3
 800795c:	fb00 ee0c 	mla	lr, r0, ip, lr
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007966:	fb0a f505 	mul.w	r5, sl, r5
 800796a:	bfb8      	it	lt
 800796c:	4682      	movlt	sl, r0
 800796e:	f939 0b2c 	ldrsh.w	r0, [r9], #44
 8007972:	bfa8      	it	ge
 8007974:	f04f 0a01 	movge.w	sl, #1
 8007978:	fb08 1813 	mls	r8, r8, r3, r1
 800797c:	fb0b e505 	mla	r5, fp, r5, lr
 8007980:	f7fd fd04 	bl	800538c <MCM_Trig_Functions>
 8007984:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8007988:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800798c:	fb13 f30a 	smulbb	r3, r3, sl
 8007990:	fb12 f10a 	smulbb	r1, r2, sl
 8007994:	425b      	negs	r3, r3
 8007996:	fb10 f303 	smulbb	r3, r0, r3
 800799a:	fb10 f021 	smultb	r0, r0, r1
 800799e:	f343 33cf 	sbfx	r3, r3, #15, #16
 80079a2:	f340 31cf 	sbfx	r1, r0, #15, #16
 80079a6:	1a59      	subs	r1, r3, r1
 80079a8:	4648      	mov	r0, r9
 80079aa:	f7fd fdd9 	bl	8005560 <PI_Controller>
 80079ae:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 80079b2:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 80079b6:	3301      	adds	r3, #1
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	429a      	cmp	r2, r3
 80079bc:	bf0a      	itet	eq
 80079be:	2200      	moveq	r2, #0
 80079c0:	461a      	movne	r2, r3
 80079c2:	4613      	moveq	r3, r2
 80079c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80079c8:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 80079cc:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
 80079d0:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
 80079d4:	8822      	ldrh	r2, [r4, #0]
 80079d6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 80079da:	4410      	add	r0, r2
 80079dc:	b200      	sxth	r0, r0
 80079de:	65a7      	str	r7, [r4, #88]	; 0x58
 80079e0:	6625      	str	r5, [r4, #96]	; 0x60
 80079e2:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
 80079e6:	6666      	str	r6, [r4, #100]	; 0x64
 80079e8:	8020      	strh	r0, [r4, #0]
 80079ea:	b009      	add	sp, #36	; 0x24
 80079ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f0:	1b58      	subs	r0, r3, r5
 80079f2:	4586      	cmp	lr, r0
 80079f4:	bfdc      	itt	le
 80079f6:	6620      	strle	r0, [r4, #96]	; 0x60
 80079f8:	4686      	movle	lr, r0
 80079fa:	e738      	b.n	800786e <STO_PLL_CalcElAngle+0x1e>
 80079fc:	1b9b      	subs	r3, r3, r6
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bfdc      	itt	le
 8007a02:	65e3      	strle	r3, [r4, #92]	; 0x5c
 8007a04:	461d      	movle	r5, r3
 8007a06:	e755      	b.n	80078b4 <STO_PLL_CalcElAngle+0x64>
 8007a08:	1b9d      	subs	r5, r3, r6
 8007a0a:	42aa      	cmp	r2, r5
 8007a0c:	bfdc      	itt	le
 8007a0e:	65a5      	strle	r5, [r4, #88]	; 0x58
 8007a10:	462a      	movle	r2, r5
 8007a12:	e749      	b.n	80078a8 <STO_PLL_CalcElAngle+0x58>
 8007a14:	1b5b      	subs	r3, r3, r5
 8007a16:	429f      	cmp	r7, r3
 8007a18:	bfdc      	itt	le
 8007a1a:	6663      	strle	r3, [r4, #100]	; 0x64
 8007a1c:	461f      	movle	r7, r3
 8007a1e:	e733      	b.n	8007888 <STO_PLL_CalcElAngle+0x38>

08007a20 <STO_PLL_CalcAvrgMecSpeed01Hz>:
 8007a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a22:	f890 7106 	ldrb.w	r7, [r0, #262]	; 0x106
 8007a26:	2f00      	cmp	r7, #0
 8007a28:	f000 809e 	beq.w	8007b68 <STO_PLL_CalcAvrgMecSpeed01Hz+0x148>
 8007a2c:	1e7e      	subs	r6, r7, #1
 8007a2e:	b2f6      	uxtb	r6, r6
 8007a30:	3636      	adds	r6, #54	; 0x36
 8007a32:	f100 056a 	add.w	r5, r0, #106	; 0x6a
 8007a36:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8007a42:	4296      	cmp	r6, r2
 8007a44:	4423      	add	r3, r4
 8007a46:	d1fa      	bne.n	8007a3e <STO_PLL_CalcAvrgMecSpeed01Hz+0x1e>
 8007a48:	2600      	movs	r6, #0
 8007a4a:	fb93 f4f7 	sdiv	r4, r3, r7
 8007a4e:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8007a52:	1b1b      	subs	r3, r3, r4
 8007a54:	42aa      	cmp	r2, r5
 8007a56:	fb03 6603 	mla	r6, r3, r3, r6
 8007a5a:	d1f8      	bne.n	8007a4e <STO_PLL_CalcAvrgMecSpeed01Hz+0x2e>
 8007a5c:	fb96 f6f7 	sdiv	r6, r6, r7
 8007a60:	8a82      	ldrh	r2, [r0, #20]
 8007a62:	f8b0 5108 	ldrh.w	r5, [r0, #264]	; 0x108
 8007a66:	fb04 f202 	mul.w	r2, r4, r2
 8007a6a:	fb04 f304 	mul.w	r3, r4, r4
 8007a6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007a72:	0052      	lsls	r2, r2, #1
 8007a74:	fb05 f403 	mul.w	r4, r5, r3
 8007a78:	bf48      	it	mi
 8007a7a:	f502 427f 	addmi.w	r2, r2, #65280	; 0xff00
 8007a7e:	ea4f 14e4 	mov.w	r4, r4, asr #7
 8007a82:	bf48      	it	mi
 8007a84:	32ff      	addmi	r2, #255	; 0xff
 8007a86:	f890 50fc 	ldrb.w	r5, [r0, #252]	; 0xfc
 8007a8a:	7ac3      	ldrb	r3, [r0, #11]
 8007a8c:	42b4      	cmp	r4, r6
 8007a8e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8007a92:	bfd8      	it	le
 8007a94:	2700      	movle	r7, #0
 8007a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8007a9a:	bfc8      	it	gt
 8007a9c:	2701      	movgt	r7, #1
 8007a9e:	b21a      	sxth	r2, r3
 8007aa0:	800a      	strh	r2, [r1, #0]
 8007aa2:	8082      	strh	r2, [r0, #4]
 8007aa4:	f880 70ed 	strb.w	r7, [r0, #237]	; 0xed
 8007aa8:	b1b5      	cbz	r5, 8007ad8 <STO_PLL_CalcAvrgMecSpeed01Hz+0xb8>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f8b0 2112 	ldrh.w	r2, [r0, #274]	; 0x112
 8007ab0:	bfb8      	it	lt
 8007ab2:	425b      	neglt	r3, r3
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	db30      	blt.n	8007b1a <STO_PLL_CalcAvrgMecSpeed01Hz+0xfa>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	461a      	mov	r2, r3
 8007abc:	461d      	mov	r5, r3
 8007abe:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
 8007ac2:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8007ac6:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
 8007aca:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
 8007ace:	b942      	cbnz	r2, 8007ae2 <STO_PLL_CalcAvrgMecSpeed01Hz+0xc2>
 8007ad0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ad4:	f7ff b944 	b.w	8006d60 <SPD_IsMecSpeedReliable>
 8007ad8:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8007adc:	2301      	movs	r3, #1
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	d0f6      	beq.n	8007ad0 <STO_PLL_CalcAvrgMecSpeed01Hz+0xb0>
 8007ae2:	42b4      	cmp	r4, r6
 8007ae4:	dc10      	bgt.n	8007b08 <STO_PLL_CalcAvrgMecSpeed01Hz+0xe8>
 8007ae6:	f890 30ef 	ldrb.w	r3, [r0, #239]	; 0xef
 8007aea:	f890 210f 	ldrb.w	r2, [r0, #271]	; 0x10f
 8007aee:	3301      	adds	r3, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	429a      	cmp	r2, r3
 8007af4:	f880 30ef 	strb.w	r3, [r0, #239]	; 0xef
 8007af8:	d8ea      	bhi.n	8007ad0 <STO_PLL_CalcAvrgMecSpeed01Hz+0xb0>
 8007afa:	2300      	movs	r3, #0
 8007afc:	7c02      	ldrb	r2, [r0, #16]
 8007afe:	f880 30ef 	strb.w	r3, [r0, #239]	; 0xef
 8007b02:	7282      	strb	r2, [r0, #10]
 8007b04:	4618      	mov	r0, r3
 8007b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0ec      	beq.n	8007ae6 <STO_PLL_CalcAvrgMecSpeed01Hz+0xc6>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f880 30ef 	strb.w	r3, [r0, #239]	; 0xef
 8007b12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007b16:	f7ff b923 	b.w	8006d60 <SPD_IsMecSpeedReliable>
 8007b1a:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
 8007b1e:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8007b22:	f9b0 706a 	ldrsh.w	r7, [r0, #106]	; 0x6a
 8007b26:	f9b0 5068 	ldrsh.w	r5, [r0, #104]	; 0x68
 8007b2a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007b2e:	fb93 f3fe 	sdiv	r3, r3, lr
 8007b32:	fb03 f202 	mul.w	r2, r3, r2
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	bfb8      	it	lt
 8007b3a:	323f      	addlt	r2, #63	; 0x3f
 8007b3c:	1192      	asrs	r2, r2, #6
 8007b3e:	fb02 f203 	mul.w	r2, r2, r3
 8007b42:	fb07 f707 	mul.w	r7, r7, r7
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	fb05 7505 	mla	r5, r5, r5, r7
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
 8007b52:	bfb8      	it	lt
 8007b54:	f102 033f 	addlt.w	r3, r2, #63	; 0x3f
 8007b58:	119b      	asrs	r3, r3, #6
 8007b5a:	fb07 2313 	mls	r3, r7, r3, r2
 8007b5e:	429d      	cmp	r5, r3
 8007b60:	bfd4      	ite	le
 8007b62:	2300      	movle	r3, #0
 8007b64:	2301      	movgt	r3, #1
 8007b66:	e7aa      	b.n	8007abe <STO_PLL_CalcAvrgMecSpeed01Hz+0x9e>
 8007b68:	463e      	mov	r6, r7
 8007b6a:	463c      	mov	r4, r7
 8007b6c:	e778      	b.n	8007a60 <STO_PLL_CalcAvrgMecSpeed01Hz+0x40>
 8007b6e:	bf00      	nop

08007b70 <STO_PLL_CalcAvrgElSpeedDpp>:
 8007b70:	b470      	push	{r4, r5, r6}
 8007b72:	f890 5106 	ldrb.w	r5, [r0, #262]	; 0x106
 8007b76:	f890 3107 	ldrb.w	r3, [r0, #263]	; 0x107
 8007b7a:	f890 20ec 	ldrb.w	r2, [r0, #236]	; 0xec
 8007b7e:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
 8007b82:	b2ae      	uxth	r6, r5
 8007b84:	1af3      	subs	r3, r6, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	b1c3      	cbz	r3, 8007bbc <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8007b8a:	4413      	add	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	b219      	sxth	r1, r3
 8007b90:	428d      	cmp	r5, r1
 8007b92:	bfdc      	itt	le
 8007b94:	1b9b      	suble	r3, r3, r6
 8007b96:	b219      	sxthle	r1, r3
 8007b98:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007b9c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007ba0:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	; 0x6c
 8007ba4:	f9b1 206c 	ldrsh.w	r2, [r1, #108]	; 0x6c
 8007ba8:	4423      	add	r3, r4
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	f8b0 2118 	ldrh.w	r2, [r0, #280]	; 0x118
 8007bb0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007bb4:	4113      	asrs	r3, r2
 8007bb6:	80c3      	strh	r3, [r0, #6]
 8007bb8:	bc70      	pop	{r4, r5, r6}
 8007bba:	4770      	bx	lr
 8007bbc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007bc0:	f9b0 1104 	ldrsh.w	r1, [r0, #260]	; 0x104
 8007bc4:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	; 0x6c
 8007bc8:	4423      	add	r3, r4
 8007bca:	1a5b      	subs	r3, r3, r1
 8007bcc:	e7ee      	b.n	8007bac <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
 8007bce:	bf00      	nop

08007bd0 <STO_PLL_Clear>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4604      	mov	r4, r0
 8007bda:	6581      	str	r1, [r0, #88]	; 0x58
 8007bdc:	65c1      	str	r1, [r0, #92]	; 0x5c
 8007bde:	6601      	str	r1, [r0, #96]	; 0x60
 8007be0:	6641      	str	r1, [r0, #100]	; 0x64
 8007be2:	8001      	strh	r1, [r0, #0]
 8007be4:	80c1      	strh	r1, [r0, #6]
 8007be6:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
 8007bea:	f880 10ef 	strb.w	r1, [r0, #239]	; 0xef
 8007bee:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
 8007bf2:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
 8007bf6:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
 8007bfa:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
 8007bfe:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8007c02:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
 8007c06:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
 8007c0a:	b132      	cbz	r2, 8007c1a <STO_PLL_Clear+0x4a>
 8007c0c:	3a01      	subs	r2, #1
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	3201      	adds	r2, #1
 8007c12:	0052      	lsls	r2, r2, #1
 8007c14:	306c      	adds	r0, #108	; 0x6c
 8007c16:	f000 f9e3 	bl	8007fe0 <memset>
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
 8007c20:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
 8007c24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8007c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2c:	f7fd bc8c 	b.w	8005548 <PID_SetIntegralTerm>

08007c30 <STO_PLL_IsObserverConverged>:
 8007c30:	f890 211b 	ldrb.w	r2, [r0, #283]	; 0x11b
 8007c34:	f8a0 111c 	strh.w	r1, [r0, #284]	; 0x11c
 8007c38:	4603      	mov	r3, r0
 8007c3a:	b10a      	cbz	r2, 8007c40 <STO_PLL_IsObserverConverged+0x10>
 8007c3c:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8007c40:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d143      	bne.n	8007cd0 <STO_PLL_IsObserverConverged+0xa0>
 8007c48:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007c4c:	b430      	push	{r4, r5}
 8007c4e:	fb02 f501 	mul.w	r5, r2, r1
 8007c52:	2d00      	cmp	r5, #0
 8007c54:	460c      	mov	r4, r1
 8007c56:	dd34      	ble.n	8007cc2 <STO_PLL_IsObserverConverged+0x92>
 8007c58:	2a00      	cmp	r2, #0
 8007c5a:	bfbc      	itt	lt
 8007c5c:	4252      	neglt	r2, r2
 8007c5e:	b212      	sxthlt	r2, r2
 8007c60:	2900      	cmp	r1, #0
 8007c62:	bfbc      	itt	lt
 8007c64:	4249      	neglt	r1, r1
 8007c66:	b20c      	sxthlt	r4, r1
 8007c68:	f893 10ed 	ldrb.w	r1, [r3, #237]	; 0xed
 8007c6c:	b359      	cbz	r1, 8007cc6 <STO_PLL_IsObserverConverged+0x96>
 8007c6e:	f8b3 510c 	ldrh.w	r5, [r3, #268]	; 0x10c
 8007c72:	b291      	uxth	r1, r2
 8007c74:	428d      	cmp	r5, r1
 8007c76:	d226      	bcs.n	8007cc6 <STO_PLL_IsObserverConverged+0x96>
 8007c78:	f893 110b 	ldrb.w	r1, [r3, #267]	; 0x10b
 8007c7c:	fb04 f101 	mul.w	r1, r4, r1
 8007c80:	2900      	cmp	r1, #0
 8007c82:	bfb8      	it	lt
 8007c84:	310f      	addlt	r1, #15
 8007c86:	f341 110f 	sbfx	r1, r1, #4, #16
 8007c8a:	428a      	cmp	r2, r1
 8007c8c:	db1b      	blt.n	8007cc6 <STO_PLL_IsObserverConverged+0x96>
 8007c8e:	f893 110a 	ldrb.w	r1, [r3, #266]	; 0x10a
 8007c92:	fb04 f101 	mul.w	r1, r4, r1
 8007c96:	2900      	cmp	r1, #0
 8007c98:	bfb8      	it	lt
 8007c9a:	310f      	addlt	r1, #15
 8007c9c:	f341 110f 	sbfx	r1, r1, #4, #16
 8007ca0:	428a      	cmp	r2, r1
 8007ca2:	dc10      	bgt.n	8007cc6 <STO_PLL_IsObserverConverged+0x96>
 8007ca4:	f893 20ee 	ldrb.w	r2, [r3, #238]	; 0xee
 8007ca8:	f893 110e 	ldrb.w	r1, [r3, #270]	; 0x10e
 8007cac:	3201      	adds	r2, #1
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	4291      	cmp	r1, r2
 8007cb2:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8007cb6:	d804      	bhi.n	8007cc2 <STO_PLL_IsObserverConverged+0x92>
 8007cb8:	2001      	movs	r0, #1
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8007cc0:	729a      	strb	r2, [r3, #10]
 8007cc2:	bc30      	pop	{r4, r5}
 8007cc4:	4770      	bx	lr
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8007ccc:	bc30      	pop	{r4, r5}
 8007cce:	4770      	bx	lr
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8007cd8:	729a      	strb	r2, [r3, #10]
 8007cda:	4770      	bx	lr

08007cdc <STO_PLL_GetEstimatedBemf>:
 8007cdc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007cde:	2000      	movs	r0, #0
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f362 000f 	bfi	r0, r2, #0, #16
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	f363 401f 	bfi	r0, r3, #16, #16
 8007cec:	b082      	sub	sp, #8
 8007cee:	b002      	add	sp, #8
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop

08007cf4 <STO_PLL_GetEstimatedCurrent>:
 8007cf4:	b410      	push	{r4}
 8007cf6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007cf8:	f8b0 4114 	ldrh.w	r4, [r0, #276]	; 0x114
 8007cfc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007cfe:	4122      	asrs	r2, r4
 8007d00:	b292      	uxth	r2, r2
 8007d02:	4123      	asrs	r3, r4
 8007d04:	2100      	movs	r1, #0
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f362 010f 	bfi	r1, r2, #0, #16
 8007d0c:	f363 411f 	bfi	r1, r3, #16, #16
 8007d10:	4608      	mov	r0, r1
 8007d12:	b083      	sub	sp, #12
 8007d14:	b003      	add	sp, #12
 8007d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <STO_PLL_GetObserverGains>:
 8007d1c:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8007d20:	800b      	strh	r3, [r1, #0]
 8007d22:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8007d26:	8013      	strh	r3, [r2, #0]
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <STO_PLL_SetObserverGains>:
 8007d2c:	8301      	strh	r1, [r0, #24]
 8007d2e:	8382      	strh	r2, [r0, #28]
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <STO_GetPLLGains>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	4615      	mov	r5, r2
 8007d40:	f7fd fbfa 	bl	8005538 <PID_GetKP>
 8007d44:	8030      	strh	r0, [r6, #0]
 8007d46:	4620      	mov	r0, r4
 8007d48:	f7fd fbfa 	bl	8005540 <PID_GetKI>
 8007d4c:	8028      	strh	r0, [r5, #0]
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}

08007d50 <STO_SetPLLGains>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 8007d56:	4615      	mov	r5, r2
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7fd fbe9 	bl	8005530 <PID_SetKP>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4620      	mov	r0, r4
 8007d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d66:	f7fd bbe5 	b.w	8005534 <PID_SetKI>
 8007d6a:	bf00      	nop

08007d6c <STO_OTF_ResetPLL>:
 8007d6c:	6800      	ldr	r0, [r0, #0]
 8007d6e:	2100      	movs	r1, #0
 8007d70:	302c      	adds	r0, #44	; 0x2c
 8007d72:	f7fd bbe9 	b.w	8005548 <PID_SetIntegralTerm>
 8007d76:	bf00      	nop

08007d78 <STO_ResetPLL>:
 8007d78:	302c      	adds	r0, #44	; 0x2c
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	f7fd bbe4 	b.w	8005548 <PID_SetIntegralTerm>

08007d80 <STO_PLL_GetEstimatedBemfLevel>:
 8007d80:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <STO_PLL_GetObservedBemfLevel>:
 8007d88:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <STO_PLL_IsVarianceTight>:
 8007d90:	6803      	ldr	r3, [r0, #0]
 8007d92:	f893 00ed 	ldrb.w	r0, [r3, #237]	; 0xed
 8007d96:	4770      	bx	lr

08007d98 <STO_PLL_ForceConvergency1>:
 8007d98:	6803      	ldr	r3, [r0, #0]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <STO_PLL_ForceConvergency2>:
 8007da4:	6803      	ldr	r3, [r0, #0]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <RUC_Init>:
 8007db0:	b430      	push	{r4, r5}
 8007db2:	6681      	str	r1, [r0, #104]	; 0x68
 8007db4:	2100      	movs	r1, #0
 8007db6:	9c02      	ldr	r4, [sp, #8]
 8007db8:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8007dbc:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8007dc0:	f110 010c 	adds.w	r1, r0, #12
 8007dc4:	66c2      	str	r2, [r0, #108]	; 0x6c
 8007dc6:	6703      	str	r3, [r0, #112]	; 0x70
 8007dc8:	6744      	str	r4, [r0, #116]	; 0x74
 8007dca:	d023      	beq.n	8007e14 <RUC_Init+0x64>
 8007dcc:	6943      	ldr	r3, [r0, #20]
 8007dce:	b323      	cbz	r3, 8007e1a <RUC_Init+0x6a>
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	b323      	cbz	r3, 8007e1e <RUC_Init+0x6e>
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	b323      	cbz	r3, 8007e22 <RUC_Init+0x72>
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	b1c3      	cbz	r3, 8007e0e <RUC_Init+0x5e>
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2105      	movs	r1, #5
 8007de0:	b1b3      	cbz	r3, 8007e10 <RUC_Init+0x60>
 8007de2:	2204      	movs	r2, #4
 8007de4:	2105      	movs	r1, #5
 8007de6:	8805      	ldrh	r5, [r0, #0]
 8007de8:	4c0f      	ldr	r4, [pc, #60]	; (8007e28 <RUC_Init+0x78>)
 8007dea:	2364      	movs	r3, #100	; 0x64
 8007dec:	fb03 f305 	mul.w	r3, r3, r5
 8007df0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007df4:	fba4 4303 	umull	r4, r3, r4, r3
 8007df8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007dfc:	2400      	movs	r4, #0
 8007dfe:	099b      	lsrs	r3, r3, #6
 8007e00:	6154      	str	r4, [r2, #20]
 8007e02:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8007e06:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8007e0a:	bc30      	pop	{r4, r5}
 8007e0c:	4770      	bx	lr
 8007e0e:	2104      	movs	r1, #4
 8007e10:	1e4a      	subs	r2, r1, #1
 8007e12:	e7e8      	b.n	8007de6 <RUC_Init+0x36>
 8007e14:	f04f 32ff 	mov.w	r2, #4294967295
 8007e18:	e7e5      	b.n	8007de6 <RUC_Init+0x36>
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	e7f8      	b.n	8007e10 <RUC_Init+0x60>
 8007e1e:	2102      	movs	r1, #2
 8007e20:	e7f6      	b.n	8007e10 <RUC_Init+0x60>
 8007e22:	2103      	movs	r1, #3
 8007e24:	e7f4      	b.n	8007e10 <RUC_Init+0x60>
 8007e26:	bf00      	nop
 8007e28:	10624dd3 	.word	0x10624dd3

08007e2c <RUC_Clear>:
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8007e34:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8007e38:	80e1      	strh	r1, [r4, #6]
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8007e42:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007e46:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8007e4a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8007e4e:	460e      	mov	r6, r1
 8007e50:	f7ff fabc 	bl	80073cc <VSS_Clear>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7fe ffe0 	bl	8006e1c <STC_SetControlMode>
 8007e5c:	8861      	ldrh	r1, [r4, #2]
 8007e5e:	b2b6      	uxth	r6, r6
 8007e60:	fb11 f106 	smulbb	r1, r1, r6
 8007e64:	b209      	sxth	r1, r1
 8007e66:	4638      	mov	r0, r7
 8007e68:	f7ff fb58 	bl	800751c <VSS_SetMecAngle>
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4640      	mov	r0, r8
 8007e72:	f7fe ffd7 	bl	8006e24 <STC_ExecRamp>
 8007e76:	8a21      	ldrh	r1, [r4, #16]
 8007e78:	89a2      	ldrh	r2, [r4, #12]
 8007e7a:	fb11 f106 	smulbb	r1, r1, r6
 8007e7e:	b209      	sxth	r1, r1
 8007e80:	4640      	mov	r0, r8
 8007e82:	f7fe ffcf 	bl	8006e24 <STC_ExecRamp>
 8007e86:	89e1      	ldrh	r1, [r4, #14]
 8007e88:	89a2      	ldrh	r2, [r4, #12]
 8007e8a:	fb11 f106 	smulbb	r1, r1, r6
 8007e8e:	4638      	mov	r0, r7
 8007e90:	b209      	sxth	r1, r1
 8007e92:	f7ff fb4b 	bl	800752c <VSS_SetMecAcceleration>
 8007e96:	89a0      	ldrh	r0, [r4, #12]
 8007e98:	8823      	ldrh	r3, [r4, #0]
 8007e9a:	4907      	ldr	r1, [pc, #28]	; (8007eb8 <RUC_Clear+0x8c>)
 8007e9c:	6962      	ldr	r2, [r4, #20]
 8007e9e:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8007ea2:	fb03 f300 	mul.w	r3, r3, r0
 8007ea6:	fba1 1303 	umull	r1, r3, r1, r3
 8007eaa:	099b      	lsrs	r3, r3, #6
 8007eac:	3301      	adds	r3, #1
 8007eae:	80a3      	strh	r3, [r4, #4]
 8007eb0:	60a2      	str	r2, [r4, #8]
 8007eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb6:	bf00      	nop
 8007eb8:	10624dd3 	.word	0x10624dd3

08007ebc <RUC_Exec>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	8883      	ldrh	r3, [r0, #4]
 8007ec0:	b12b      	cbz	r3, 8007ece <RUC_Exec+0x12>
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8083      	strh	r3, [r0, #4]
 8007ec8:	b10b      	cbz	r3, 8007ece <RUC_Exec+0x12>
 8007eca:	2001      	movs	r0, #1
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	6883      	ldr	r3, [r0, #8]
 8007ed0:	b33b      	cbz	r3, 8007f22 <RUC_Exec+0x66>
 8007ed2:	88c5      	ldrh	r5, [r0, #6]
 8007ed4:	8899      	ldrh	r1, [r3, #4]
 8007ed6:	881a      	ldrh	r2, [r3, #0]
 8007ed8:	4604      	mov	r4, r0
 8007eda:	fb11 f105 	smulbb	r1, r1, r5
 8007ede:	b209      	sxth	r1, r1
 8007ee0:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8007ee2:	f7fe ff9f 	bl	8006e24 <STC_ExecRamp>
 8007ee6:	68a3      	ldr	r3, [r4, #8]
 8007ee8:	88e5      	ldrh	r5, [r4, #6]
 8007eea:	8859      	ldrh	r1, [r3, #2]
 8007eec:	881a      	ldrh	r2, [r3, #0]
 8007eee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007ef0:	fb11 f105 	smulbb	r1, r1, r5
 8007ef4:	b209      	sxth	r1, r1
 8007ef6:	f7ff fb19 	bl	800752c <VSS_SetMecAcceleration>
 8007efa:	68a1      	ldr	r1, [r4, #8]
 8007efc:	8823      	ldrh	r3, [r4, #0]
 8007efe:	880d      	ldrh	r5, [r1, #0]
 8007f00:	4809      	ldr	r0, [pc, #36]	; (8007f28 <RUC_Exec+0x6c>)
 8007f02:	6889      	ldr	r1, [r1, #8]
 8007f04:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8007f08:	60a1      	str	r1, [r4, #8]
 8007f0a:	fb03 f305 	mul.w	r3, r3, r5
 8007f0e:	fba0 1303 	umull	r1, r3, r0, r3
 8007f12:	3201      	adds	r2, #1
 8007f14:	099b      	lsrs	r3, r3, #6
 8007f16:	3301      	adds	r3, #1
 8007f18:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007f1c:	80a3      	strh	r3, [r4, #4]
 8007f1e:	2001      	movs	r0, #1
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	4618      	mov	r0, r3
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	10624dd3 	.word	0x10624dd3

08007f2c <RUC_FirstAccelerationStageReached>:
 8007f2c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007f30:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8007f34:	4282      	cmp	r2, r0
 8007f36:	bf34      	ite	cc
 8007f38:	2000      	movcc	r0, #0
 8007f3a:	2001      	movcs	r0, #1
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop

08007f40 <RUC_SetPhaseDurationms>:
 8007f40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f48:	818a      	strh	r2, [r1, #12]
 8007f4a:	4770      	bx	lr

08007f4c <RUC_SetPhaseFinalMecSpeed01Hz>:
 8007f4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f54:	81ca      	strh	r2, [r1, #14]
 8007f56:	4770      	bx	lr

08007f58 <RUC_SetPhaseFinalTorque>:
 8007f58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f60:	820a      	strh	r2, [r1, #16]
 8007f62:	4770      	bx	lr

08007f64 <RUC_GetPhaseDurationms>:
 8007f64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f6c:	8988      	ldrh	r0, [r1, #12]
 8007f6e:	4770      	bx	lr

08007f70 <RUC_GetPhaseFinalMecSpeed01Hz>:
 8007f70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f78:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop

08007f80 <RUC_GetPhaseFinalTorque>:
 8007f80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f88:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop

08007f90 <RUC_GetNumberOfPhases>:
 8007f90:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop

08007f98 <__libc_init_array>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	4e0d      	ldr	r6, [pc, #52]	; (8007fd0 <__libc_init_array+0x38>)
 8007f9c:	4c0d      	ldr	r4, [pc, #52]	; (8007fd4 <__libc_init_array+0x3c>)
 8007f9e:	1ba4      	subs	r4, r4, r6
 8007fa0:	10a4      	asrs	r4, r4, #2
 8007fa2:	2500      	movs	r5, #0
 8007fa4:	42a5      	cmp	r5, r4
 8007fa6:	d109      	bne.n	8007fbc <__libc_init_array+0x24>
 8007fa8:	4e0b      	ldr	r6, [pc, #44]	; (8007fd8 <__libc_init_array+0x40>)
 8007faa:	4c0c      	ldr	r4, [pc, #48]	; (8007fdc <__libc_init_array+0x44>)
 8007fac:	f000 f820 	bl	8007ff0 <_init>
 8007fb0:	1ba4      	subs	r4, r4, r6
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	2500      	movs	r5, #0
 8007fb6:	42a5      	cmp	r5, r4
 8007fb8:	d105      	bne.n	8007fc6 <__libc_init_array+0x2e>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fc0:	4798      	blx	r3
 8007fc2:	3501      	adds	r5, #1
 8007fc4:	e7ee      	b.n	8007fa4 <__libc_init_array+0xc>
 8007fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fca:	4798      	blx	r3
 8007fcc:	3501      	adds	r5, #1
 8007fce:	e7f2      	b.n	8007fb6 <__libc_init_array+0x1e>
 8007fd0:	080082c0 	.word	0x080082c0
 8007fd4:	080082c0 	.word	0x080082c0
 8007fd8:	080082c0 	.word	0x080082c0
 8007fdc:	080082c4 	.word	0x080082c4

08007fe0 <memset>:
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d100      	bne.n	8007fea <memset+0xa>
 8007fe8:	4770      	bx	lr
 8007fea:	f803 1b01 	strb.w	r1, [r3], #1
 8007fee:	e7f9      	b.n	8007fe4 <memset+0x4>

08007ff0 <_init>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	bf00      	nop
 8007ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff6:	bc08      	pop	{r3}
 8007ff8:	469e      	mov	lr, r3
 8007ffa:	4770      	bx	lr

08007ffc <_fini>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	bf00      	nop
 8008000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008002:	bc08      	pop	{r3}
 8008004:	469e      	mov	lr, r3
 8008006:	4770      	bx	lr
